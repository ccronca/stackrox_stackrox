// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: storage/runtime_filters.proto

package storage

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RuntimeFilterFeatures int32

const (
	RuntimeFilterFeatures_EXTERNAL_IPS        RuntimeFilterFeatures = 0
	RuntimeFilterFeatures_PROCESSES           RuntimeFilterFeatures = 1
	RuntimeFilterFeatures_NETWORK_CONNECTIONS RuntimeFilterFeatures = 2
	RuntimeFilterFeatures_LISTENING_ENDPOINTS RuntimeFilterFeatures = 3
)

var RuntimeFilterFeatures_name = map[int32]string{
	0: "EXTERNAL_IPS",
	1: "PROCESSES",
	2: "NETWORK_CONNECTIONS",
	3: "LISTENING_ENDPOINTS",
}

var RuntimeFilterFeatures_value = map[string]int32{
	"EXTERNAL_IPS":        0,
	"PROCESSES":           1,
	"NETWORK_CONNECTIONS": 2,
	"LISTENING_ENDPOINTS": 3,
}

func (x RuntimeFilterFeatures) String() string {
	return proto.EnumName(RuntimeFilterFeatures_name, int32(x))
}

func (RuntimeFilterFeatures) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7f358327c0ea1214, []int{0}
}

type RuntimeFiltersACK_Action int32

const (
	RuntimeFiltersACK_ACK  RuntimeFiltersACK_Action = 0
	RuntimeFiltersACK_NACK RuntimeFiltersACK_Action = 1
)

var RuntimeFiltersACK_Action_name = map[int32]string{
	0: "ACK",
	1: "NACK",
}

var RuntimeFiltersACK_Action_value = map[string]int32{
	"ACK":  0,
	"NACK": 1,
}

func (x RuntimeFiltersACK_Action) String() string {
	return proto.EnumName(RuntimeFiltersACK_Action_name, int32(x))
}

func (RuntimeFiltersACK_Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7f358327c0ea1214, []int{0, 0}
}

type RuntimeFiltersACK struct {
	InstanceId           string                   `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Action               RuntimeFiltersACK_Action `protobuf:"varint,2,opt,name=action,proto3,enum=storage.RuntimeFiltersACK_Action" json:"action,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *RuntimeFiltersACK) Reset()         { *m = RuntimeFiltersACK{} }
func (m *RuntimeFiltersACK) String() string { return proto.CompactTextString(m) }
func (*RuntimeFiltersACK) ProtoMessage()    {}
func (*RuntimeFiltersACK) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f358327c0ea1214, []int{0}
}
func (m *RuntimeFiltersACK) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RuntimeFiltersACK) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RuntimeFiltersACK.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RuntimeFiltersACK) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuntimeFiltersACK.Merge(m, src)
}
func (m *RuntimeFiltersACK) XXX_Size() int {
	return m.Size()
}
func (m *RuntimeFiltersACK) XXX_DiscardUnknown() {
	xxx_messageInfo_RuntimeFiltersACK.DiscardUnknown(m)
}

var xxx_messageInfo_RuntimeFiltersACK proto.InternalMessageInfo

func (m *RuntimeFiltersACK) GetInstanceId() string {
	if m != nil {
		return m.InstanceId
	}
	return ""
}

func (m *RuntimeFiltersACK) GetAction() RuntimeFiltersACK_Action {
	if m != nil {
		return m.Action
	}
	return RuntimeFiltersACK_ACK
}

func (m *RuntimeFiltersACK) MessageClone() proto.Message {
	return m.Clone()
}
func (m *RuntimeFiltersACK) Clone() *RuntimeFiltersACK {
	if m == nil {
		return nil
	}
	cloned := new(RuntimeFiltersACK)
	*cloned = *m

	return cloned
}

type RuntimeFilter struct {
	Feature              RuntimeFilterFeatures              `protobuf:"varint,1,opt,name=feature,proto3,enum=storage.RuntimeFilterFeatures" json:"feature,omitempty"`
	DefaultStatus        string                             `protobuf:"bytes,2,opt,name=default_status,json=defaultStatus,proto3" json:"default_status,omitempty"`
	Rules                []*RuntimeFilter_RuntimeFilterRule `protobuf:"bytes,3,rep,name=rules,proto3" json:"rules,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *RuntimeFilter) Reset()         { *m = RuntimeFilter{} }
func (m *RuntimeFilter) String() string { return proto.CompactTextString(m) }
func (*RuntimeFilter) ProtoMessage()    {}
func (*RuntimeFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f358327c0ea1214, []int{1}
}
func (m *RuntimeFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RuntimeFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RuntimeFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RuntimeFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuntimeFilter.Merge(m, src)
}
func (m *RuntimeFilter) XXX_Size() int {
	return m.Size()
}
func (m *RuntimeFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_RuntimeFilter.DiscardUnknown(m)
}

var xxx_messageInfo_RuntimeFilter proto.InternalMessageInfo

func (m *RuntimeFilter) GetFeature() RuntimeFilterFeatures {
	if m != nil {
		return m.Feature
	}
	return RuntimeFilterFeatures_EXTERNAL_IPS
}

func (m *RuntimeFilter) GetDefaultStatus() string {
	if m != nil {
		return m.DefaultStatus
	}
	return ""
}

func (m *RuntimeFilter) GetRules() []*RuntimeFilter_RuntimeFilterRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

func (m *RuntimeFilter) MessageClone() proto.Message {
	return m.Clone()
}
func (m *RuntimeFilter) Clone() *RuntimeFilter {
	if m == nil {
		return nil
	}
	cloned := new(RuntimeFilter)
	*cloned = *m

	if m.Rules != nil {
		cloned.Rules = make([]*RuntimeFilter_RuntimeFilterRule, len(m.Rules))
		for idx, v := range m.Rules {
			cloned.Rules[idx] = v.Clone()
		}
	}
	return cloned
}

type RuntimeFilter_RuntimeFilterRule struct {
	ResourceCollectionId string   `protobuf:"bytes,1,opt,name=resource_collection_id,json=resourceCollectionId,proto3" json:"resource_collection_id,omitempty"`
	Status               string   `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RuntimeFilter_RuntimeFilterRule) Reset()         { *m = RuntimeFilter_RuntimeFilterRule{} }
func (m *RuntimeFilter_RuntimeFilterRule) String() string { return proto.CompactTextString(m) }
func (*RuntimeFilter_RuntimeFilterRule) ProtoMessage()    {}
func (*RuntimeFilter_RuntimeFilterRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f358327c0ea1214, []int{1, 0}
}
func (m *RuntimeFilter_RuntimeFilterRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RuntimeFilter_RuntimeFilterRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RuntimeFilter_RuntimeFilterRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RuntimeFilter_RuntimeFilterRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuntimeFilter_RuntimeFilterRule.Merge(m, src)
}
func (m *RuntimeFilter_RuntimeFilterRule) XXX_Size() int {
	return m.Size()
}
func (m *RuntimeFilter_RuntimeFilterRule) XXX_DiscardUnknown() {
	xxx_messageInfo_RuntimeFilter_RuntimeFilterRule.DiscardUnknown(m)
}

var xxx_messageInfo_RuntimeFilter_RuntimeFilterRule proto.InternalMessageInfo

func (m *RuntimeFilter_RuntimeFilterRule) GetResourceCollectionId() string {
	if m != nil {
		return m.ResourceCollectionId
	}
	return ""
}

func (m *RuntimeFilter_RuntimeFilterRule) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *RuntimeFilter_RuntimeFilterRule) MessageClone() proto.Message {
	return m.Clone()
}
func (m *RuntimeFilter_RuntimeFilterRule) Clone() *RuntimeFilter_RuntimeFilterRule {
	if m == nil {
		return nil
	}
	cloned := new(RuntimeFilter_RuntimeFilterRule)
	*cloned = *m

	return cloned
}

type RuntimeFilteringConfiguration struct {
	RuntimeFilters       []*RuntimeFilter      `protobuf:"bytes,1,rep,name=runtime_filters,json=runtimeFilters,proto3" json:"runtime_filters,omitempty"`
	ResourceCollections  []*ResourceCollection `protobuf:"bytes,2,rep,name=resource_collections,json=resourceCollections,proto3" json:"resource_collections,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *RuntimeFilteringConfiguration) Reset()         { *m = RuntimeFilteringConfiguration{} }
func (m *RuntimeFilteringConfiguration) String() string { return proto.CompactTextString(m) }
func (*RuntimeFilteringConfiguration) ProtoMessage()    {}
func (*RuntimeFilteringConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f358327c0ea1214, []int{2}
}
func (m *RuntimeFilteringConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RuntimeFilteringConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RuntimeFilteringConfiguration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RuntimeFilteringConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuntimeFilteringConfiguration.Merge(m, src)
}
func (m *RuntimeFilteringConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *RuntimeFilteringConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_RuntimeFilteringConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_RuntimeFilteringConfiguration proto.InternalMessageInfo

func (m *RuntimeFilteringConfiguration) GetRuntimeFilters() []*RuntimeFilter {
	if m != nil {
		return m.RuntimeFilters
	}
	return nil
}

func (m *RuntimeFilteringConfiguration) GetResourceCollections() []*ResourceCollection {
	if m != nil {
		return m.ResourceCollections
	}
	return nil
}

func (m *RuntimeFilteringConfiguration) MessageClone() proto.Message {
	return m.Clone()
}
func (m *RuntimeFilteringConfiguration) Clone() *RuntimeFilteringConfiguration {
	if m == nil {
		return nil
	}
	cloned := new(RuntimeFilteringConfiguration)
	*cloned = *m

	if m.RuntimeFilters != nil {
		cloned.RuntimeFilters = make([]*RuntimeFilter, len(m.RuntimeFilters))
		for idx, v := range m.RuntimeFilters {
			cloned.RuntimeFilters[idx] = v.Clone()
		}
	}
	if m.ResourceCollections != nil {
		cloned.ResourceCollections = make([]*ResourceCollection, len(m.ResourceCollections))
		for idx, v := range m.ResourceCollections {
			cloned.ResourceCollections[idx] = v.Clone()
		}
	}
	return cloned
}

type RuntimeFilterData struct {
	Id                   string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" search:"Collection ID" sql:"pk"` // @gotags: search:"Collection ID" sql:"pk"
	Feature              RuntimeFilterFeatures `protobuf:"varint,2,opt,name=feature,proto3,enum=storage.RuntimeFilterFeatures" json:"feature,omitempty"`
	Status               string                `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	ResourceCollectionId string                `protobuf:"bytes,4,opt,name=resource_collection_id,json=resourceCollectionId,proto3" json:"resource_collection_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *RuntimeFilterData) Reset()         { *m = RuntimeFilterData{} }
func (m *RuntimeFilterData) String() string { return proto.CompactTextString(m) }
func (*RuntimeFilterData) ProtoMessage()    {}
func (*RuntimeFilterData) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f358327c0ea1214, []int{3}
}
func (m *RuntimeFilterData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RuntimeFilterData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RuntimeFilterData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RuntimeFilterData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuntimeFilterData.Merge(m, src)
}
func (m *RuntimeFilterData) XXX_Size() int {
	return m.Size()
}
func (m *RuntimeFilterData) XXX_DiscardUnknown() {
	xxx_messageInfo_RuntimeFilterData.DiscardUnknown(m)
}

var xxx_messageInfo_RuntimeFilterData proto.InternalMessageInfo

func (m *RuntimeFilterData) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RuntimeFilterData) GetFeature() RuntimeFilterFeatures {
	if m != nil {
		return m.Feature
	}
	return RuntimeFilterFeatures_EXTERNAL_IPS
}

func (m *RuntimeFilterData) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *RuntimeFilterData) GetResourceCollectionId() string {
	if m != nil {
		return m.ResourceCollectionId
	}
	return ""
}

func (m *RuntimeFilterData) MessageClone() proto.Message {
	return m.Clone()
}
func (m *RuntimeFilterData) Clone() *RuntimeFilterData {
	if m == nil {
		return nil
	}
	cloned := new(RuntimeFilterData)
	*cloned = *m

	return cloned
}

func init() {
	proto.RegisterEnum("storage.RuntimeFilterFeatures", RuntimeFilterFeatures_name, RuntimeFilterFeatures_value)
	proto.RegisterEnum("storage.RuntimeFiltersACK_Action", RuntimeFiltersACK_Action_name, RuntimeFiltersACK_Action_value)
	proto.RegisterType((*RuntimeFiltersACK)(nil), "storage.RuntimeFiltersACK")
	proto.RegisterType((*RuntimeFilter)(nil), "storage.RuntimeFilter")
	proto.RegisterType((*RuntimeFilter_RuntimeFilterRule)(nil), "storage.RuntimeFilter.RuntimeFilterRule")
	proto.RegisterType((*RuntimeFilteringConfiguration)(nil), "storage.RuntimeFilteringConfiguration")
	proto.RegisterType((*RuntimeFilterData)(nil), "storage.RuntimeFilterData")
}

func init() { proto.RegisterFile("storage/runtime_filters.proto", fileDescriptor_7f358327c0ea1214) }

var fileDescriptor_7f358327c0ea1214 = []byte{
	// 510 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xb3, 0x4e, 0x49, 0xc8, 0x94, 0x04, 0xb3, 0x2d, 0x21, 0xb4, 0x6a, 0x48, 0x23, 0x21,
	0x45, 0x1c, 0x82, 0x14, 0x7a, 0x80, 0x0b, 0x28, 0xb8, 0x2e, 0xb2, 0x52, 0x6d, 0xa2, 0x75, 0x24,
	0x10, 0x17, 0x6b, 0x49, 0x36, 0x91, 0xc1, 0xd8, 0x68, 0x77, 0x2d, 0xf1, 0x10, 0xdc, 0xb8, 0xf0,
	0x0e, 0x5c, 0x78, 0x0c, 0x8e, 0x3c, 0x02, 0x0a, 0x2f, 0x82, 0xfc, 0x2f, 0xa9, 0x13, 0x83, 0xd4,
	0x9b, 0x3d, 0x33, 0xfb, 0xcd, 0x37, 0xbf, 0xd9, 0x85, 0x13, 0xa9, 0x02, 0xc1, 0x96, 0xfc, 0xb1,
	0x08, 0x7d, 0xe5, 0x7e, 0xe4, 0xce, 0xc2, 0xf5, 0x14, 0x17, 0xb2, 0xff, 0x49, 0x04, 0x2a, 0xc0,
	0xd5, 0x34, 0x7d, 0x74, 0xba, 0xae, 0xe3, 0x32, 0x08, 0xc5, 0x8c, 0x3b, 0xb3, 0xc0, 0xf3, 0xf8,
	0x4c, 0xb9, 0x81, 0x9f, 0xd4, 0x76, 0xbf, 0x20, 0xb8, 0x43, 0x13, 0x95, 0x8b, 0x44, 0x64, 0x68,
	0x8c, 0xf0, 0x03, 0xd8, 0x77, 0x7d, 0xa9, 0x98, 0x3f, 0xe3, 0x8e, 0x3b, 0x6f, 0xa1, 0x0e, 0xea,
	0xd5, 0x28, 0x64, 0x21, 0x6b, 0x8e, 0x9f, 0x41, 0x85, 0xc5, 0x32, 0x2d, 0xad, 0x83, 0x7a, 0x8d,
	0xc1, 0x69, 0x3f, 0x6d, 0xd5, 0xdf, 0x11, 0xeb, 0x0f, 0xe3, 0x42, 0x9a, 0x1e, 0xe8, 0x1e, 0x43,
	0x25, 0x89, 0xe0, 0x2a, 0x94, 0x87, 0xc6, 0x48, 0x2f, 0xe1, 0x9b, 0xb0, 0x47, 0xa2, 0x2f, 0xd4,
	0xfd, 0xaa, 0x41, 0x3d, 0xa7, 0x80, 0x9f, 0x42, 0x75, 0xc1, 0x99, 0x0a, 0x05, 0x8f, 0x6d, 0x34,
	0x06, 0xed, 0xe2, 0x56, 0x17, 0x49, 0x91, 0xa4, 0x59, 0x39, 0x7e, 0x08, 0x8d, 0x39, 0x5f, 0xb0,
	0xd0, 0x53, 0x8e, 0x54, 0x4c, 0x85, 0x32, 0xf6, 0x5a, 0xa3, 0xf5, 0x34, 0x6a, 0xc7, 0x41, 0xfc,
	0x1c, 0x6e, 0x88, 0xd0, 0xe3, 0xb2, 0x55, 0xee, 0x94, 0x7b, 0xfb, 0x83, 0x5e, 0xb1, 0x7c, 0xfe,
	0x8f, 0x86, 0x1e, 0xa7, 0xc9, 0xb1, 0x23, 0xb6, 0x05, 0x30, 0xca, 0xe1, 0x33, 0x68, 0x16, 0x30,
	0xdf, 0xb0, 0x3c, 0xcc, 0xb2, 0xc6, 0x3a, 0x69, 0xcd, 0x71, 0x13, 0x2a, 0x39, 0xa7, 0xe9, 0x5f,
	0xf7, 0x07, 0x82, 0x93, 0x5c, 0x0f, 0xd7, 0x5f, 0x1a, 0x81, 0xbf, 0x70, 0x97, 0xa1, 0x60, 0x31,
	0xca, 0x17, 0x70, 0x7b, 0xeb, 0x2e, 0xb4, 0x50, 0x3c, 0x4e, 0xb3, 0x78, 0x1c, 0xda, 0x10, 0xb9,
	0x3d, 0x61, 0x02, 0x87, 0x05, 0x86, 0x23, 0x23, 0x91, 0xca, 0xf1, 0x46, 0x65, 0xc7, 0x37, 0x3d,
	0xd8, 0x9d, 0x45, 0x76, 0xbf, 0x6f, 0xdf, 0xab, 0x73, 0xa6, 0x18, 0x6e, 0x80, 0xb6, 0x46, 0xa0,
	0xb9, 0xf3, 0xab, 0xcb, 0xd5, 0xae, 0xb7, 0xdc, 0x0d, 0xaa, 0xf2, 0x55, 0x54, 0xff, 0x01, 0xbf,
	0xf7, 0x6f, 0xf0, 0x8f, 0xde, 0xc3, 0xdd, 0xc2, 0x7e, 0x58, 0x87, 0x5b, 0xe6, 0x9b, 0xa9, 0x49,
	0xc9, 0xf0, 0xd2, 0xb1, 0x26, 0xb6, 0x5e, 0xc2, 0x75, 0xa8, 0x4d, 0xe8, 0xd8, 0x30, 0x6d, 0xdb,
	0xb4, 0x75, 0x84, 0xef, 0xc1, 0x01, 0x31, 0xa7, 0xaf, 0xc7, 0x74, 0xe4, 0x18, 0x63, 0x42, 0x4c,
	0x63, 0x6a, 0x8d, 0x89, 0xad, 0x6b, 0x51, 0xe2, 0xd2, 0xb2, 0xa7, 0x26, 0xb1, 0xc8, 0x2b, 0xc7,
	0x24, 0xe7, 0x93, 0xb1, 0x45, 0xa6, 0xb6, 0x5e, 0x7e, 0x79, 0xf6, 0x73, 0xd5, 0x46, 0xbf, 0x56,
	0x6d, 0xf4, 0x7b, 0xd5, 0x46, 0xdf, 0xfe, 0xb4, 0x4b, 0x70, 0xdf, 0x0d, 0xfa, 0x52, 0xb1, 0xd9,
	0x07, 0x11, 0x7c, 0x4e, 0x9e, 0x65, 0x46, 0xe1, 0x6d, 0xf6, 0x94, 0xdf, 0x55, 0xe2, 0xf8, 0x93,
	0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xcb, 0x70, 0x33, 0x88, 0xfb, 0x03, 0x00, 0x00,
}

func (m *RuntimeFiltersACK) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RuntimeFiltersACK) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RuntimeFiltersACK) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Action != 0 {
		i = encodeVarintRuntimeFilters(dAtA, i, uint64(m.Action))
		i--
		dAtA[i] = 0x10
	}
	if len(m.InstanceId) > 0 {
		i -= len(m.InstanceId)
		copy(dAtA[i:], m.InstanceId)
		i = encodeVarintRuntimeFilters(dAtA, i, uint64(len(m.InstanceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RuntimeFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RuntimeFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RuntimeFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Rules) > 0 {
		for iNdEx := len(m.Rules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRuntimeFilters(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.DefaultStatus) > 0 {
		i -= len(m.DefaultStatus)
		copy(dAtA[i:], m.DefaultStatus)
		i = encodeVarintRuntimeFilters(dAtA, i, uint64(len(m.DefaultStatus)))
		i--
		dAtA[i] = 0x12
	}
	if m.Feature != 0 {
		i = encodeVarintRuntimeFilters(dAtA, i, uint64(m.Feature))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RuntimeFilter_RuntimeFilterRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RuntimeFilter_RuntimeFilterRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RuntimeFilter_RuntimeFilterRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintRuntimeFilters(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ResourceCollectionId) > 0 {
		i -= len(m.ResourceCollectionId)
		copy(dAtA[i:], m.ResourceCollectionId)
		i = encodeVarintRuntimeFilters(dAtA, i, uint64(len(m.ResourceCollectionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RuntimeFilteringConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RuntimeFilteringConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RuntimeFilteringConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ResourceCollections) > 0 {
		for iNdEx := len(m.ResourceCollections) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ResourceCollections[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRuntimeFilters(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RuntimeFilters) > 0 {
		for iNdEx := len(m.RuntimeFilters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RuntimeFilters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRuntimeFilters(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RuntimeFilterData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RuntimeFilterData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RuntimeFilterData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ResourceCollectionId) > 0 {
		i -= len(m.ResourceCollectionId)
		copy(dAtA[i:], m.ResourceCollectionId)
		i = encodeVarintRuntimeFilters(dAtA, i, uint64(len(m.ResourceCollectionId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintRuntimeFilters(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Feature != 0 {
		i = encodeVarintRuntimeFilters(dAtA, i, uint64(m.Feature))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintRuntimeFilters(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRuntimeFilters(dAtA []byte, offset int, v uint64) int {
	offset -= sovRuntimeFilters(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RuntimeFiltersACK) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InstanceId)
	if l > 0 {
		n += 1 + l + sovRuntimeFilters(uint64(l))
	}
	if m.Action != 0 {
		n += 1 + sovRuntimeFilters(uint64(m.Action))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RuntimeFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Feature != 0 {
		n += 1 + sovRuntimeFilters(uint64(m.Feature))
	}
	l = len(m.DefaultStatus)
	if l > 0 {
		n += 1 + l + sovRuntimeFilters(uint64(l))
	}
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovRuntimeFilters(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RuntimeFilter_RuntimeFilterRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ResourceCollectionId)
	if l > 0 {
		n += 1 + l + sovRuntimeFilters(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovRuntimeFilters(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RuntimeFilteringConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RuntimeFilters) > 0 {
		for _, e := range m.RuntimeFilters {
			l = e.Size()
			n += 1 + l + sovRuntimeFilters(uint64(l))
		}
	}
	if len(m.ResourceCollections) > 0 {
		for _, e := range m.ResourceCollections {
			l = e.Size()
			n += 1 + l + sovRuntimeFilters(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RuntimeFilterData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRuntimeFilters(uint64(l))
	}
	if m.Feature != 0 {
		n += 1 + sovRuntimeFilters(uint64(m.Feature))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovRuntimeFilters(uint64(l))
	}
	l = len(m.ResourceCollectionId)
	if l > 0 {
		n += 1 + l + sovRuntimeFilters(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRuntimeFilters(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRuntimeFilters(x uint64) (n int) {
	return sovRuntimeFilters(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RuntimeFiltersACK) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRuntimeFilters
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuntimeFiltersACK: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuntimeFiltersACK: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntimeFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRuntimeFilters
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRuntimeFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstanceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntimeFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= RuntimeFiltersACK_Action(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRuntimeFilters(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRuntimeFilters
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RuntimeFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRuntimeFilters
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuntimeFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuntimeFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Feature", wireType)
			}
			m.Feature = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntimeFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Feature |= RuntimeFilterFeatures(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntimeFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRuntimeFilters
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRuntimeFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntimeFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRuntimeFilters
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRuntimeFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &RuntimeFilter_RuntimeFilterRule{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRuntimeFilters(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRuntimeFilters
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RuntimeFilter_RuntimeFilterRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRuntimeFilters
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuntimeFilterRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuntimeFilterRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceCollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntimeFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRuntimeFilters
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRuntimeFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceCollectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntimeFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRuntimeFilters
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRuntimeFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRuntimeFilters(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRuntimeFilters
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RuntimeFilteringConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRuntimeFilters
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuntimeFilteringConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuntimeFilteringConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuntimeFilters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntimeFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRuntimeFilters
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRuntimeFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuntimeFilters = append(m.RuntimeFilters, &RuntimeFilter{})
			if err := m.RuntimeFilters[len(m.RuntimeFilters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceCollections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntimeFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRuntimeFilters
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRuntimeFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceCollections = append(m.ResourceCollections, &ResourceCollection{})
			if err := m.ResourceCollections[len(m.ResourceCollections)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRuntimeFilters(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRuntimeFilters
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RuntimeFilterData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRuntimeFilters
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuntimeFilterData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuntimeFilterData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntimeFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRuntimeFilters
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRuntimeFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Feature", wireType)
			}
			m.Feature = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntimeFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Feature |= RuntimeFilterFeatures(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntimeFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRuntimeFilters
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRuntimeFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceCollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntimeFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRuntimeFilters
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRuntimeFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceCollectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRuntimeFilters(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRuntimeFilters
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRuntimeFilters(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRuntimeFilters
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRuntimeFilters
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRuntimeFilters
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRuntimeFilters
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRuntimeFilters
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRuntimeFilters
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRuntimeFilters        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRuntimeFilters          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRuntimeFilters = fmt.Errorf("proto: unexpected end of group")
)
