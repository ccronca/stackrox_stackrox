// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v4.25.3
// source: api/v2/compliance_results_service.proto

package v2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ComplianceCheckStatus int32

const (
	ComplianceCheckStatus_UNSET_CHECK_STATUS ComplianceCheckStatus = 0
	ComplianceCheckStatus_PASS               ComplianceCheckStatus = 1
	ComplianceCheckStatus_FAIL               ComplianceCheckStatus = 2
	ComplianceCheckStatus_ERROR              ComplianceCheckStatus = 3
	ComplianceCheckStatus_INFO               ComplianceCheckStatus = 4
	ComplianceCheckStatus_MANUAL             ComplianceCheckStatus = 5
	ComplianceCheckStatus_NOT_APPLICABLE     ComplianceCheckStatus = 6
	ComplianceCheckStatus_INCONSISTENT       ComplianceCheckStatus = 7
)

// Enum value maps for ComplianceCheckStatus.
var (
	ComplianceCheckStatus_name = map[int32]string{
		0: "UNSET_CHECK_STATUS",
		1: "PASS",
		2: "FAIL",
		3: "ERROR",
		4: "INFO",
		5: "MANUAL",
		6: "NOT_APPLICABLE",
		7: "INCONSISTENT",
	}
	ComplianceCheckStatus_value = map[string]int32{
		"UNSET_CHECK_STATUS": 0,
		"PASS":               1,
		"FAIL":               2,
		"ERROR":              3,
		"INFO":               4,
		"MANUAL":             5,
		"NOT_APPLICABLE":     6,
		"INCONSISTENT":       7,
	}
)

func (x ComplianceCheckStatus) Enum() *ComplianceCheckStatus {
	p := new(ComplianceCheckStatus)
	*p = x
	return p
}

func (x ComplianceCheckStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComplianceCheckStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v2_compliance_results_service_proto_enumTypes[0].Descriptor()
}

func (ComplianceCheckStatus) Type() protoreflect.EnumType {
	return &file_api_v2_compliance_results_service_proto_enumTypes[0]
}

func (x ComplianceCheckStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComplianceCheckStatus.Descriptor instead.
func (ComplianceCheckStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_v2_compliance_results_service_proto_rawDescGZIP(), []int{0}
}

type ComplianceScanCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId   string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ClusterName string `protobuf:"bytes,2,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
}

func (x *ComplianceScanCluster) Reset() {
	*x = ComplianceScanCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v2_compliance_results_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceScanCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceScanCluster) ProtoMessage() {}

func (x *ComplianceScanCluster) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_compliance_results_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceScanCluster.ProtoReflect.Descriptor instead.
func (*ComplianceScanCluster) Descriptor() ([]byte, []int) {
	return file_api_v2_compliance_results_service_proto_rawDescGZIP(), []int{0}
}

func (x *ComplianceScanCluster) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ComplianceScanCluster) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

// Next tag: 11
// ComplianceCheckResult provides the results of a compliance check against a rule
type ComplianceCheckResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CheckId      string                                      `protobuf:"bytes,1,opt,name=check_id,json=checkId,proto3" json:"check_id,omitempty"`
	CheckName    string                                      `protobuf:"bytes,2,opt,name=check_name,json=checkName,proto3" json:"check_name,omitempty"`
	Clusters     []*ComplianceCheckResult_ClusterCheckStatus `protobuf:"bytes,3,rep,name=clusters,proto3" json:"clusters,omitempty"`
	Description  string                                      `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Instructions string                                      `protobuf:"bytes,5,opt,name=instructions,proto3" json:"instructions,omitempty"`
	Standard     string                                      `protobuf:"bytes,6,opt,name=standard,proto3" json:"standard,omitempty"`
	Control      string                                      `protobuf:"bytes,7,opt,name=control,proto3" json:"control,omitempty"`
	Rationale    string                                      `protobuf:"bytes,8,opt,name=rationale,proto3" json:"rationale,omitempty"`
	ValuesUsed   []string                                    `protobuf:"bytes,9,rep,name=valuesUsed,proto3" json:"valuesUsed,omitempty"`
	Warnings     []string                                    `protobuf:"bytes,10,rep,name=warnings,proto3" json:"warnings,omitempty"`
}

func (x *ComplianceCheckResult) Reset() {
	*x = ComplianceCheckResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v2_compliance_results_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceCheckResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceCheckResult) ProtoMessage() {}

func (x *ComplianceCheckResult) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_compliance_results_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceCheckResult.ProtoReflect.Descriptor instead.
func (*ComplianceCheckResult) Descriptor() ([]byte, []int) {
	return file_api_v2_compliance_results_service_proto_rawDescGZIP(), []int{1}
}

func (x *ComplianceCheckResult) GetCheckId() string {
	if x != nil {
		return x.CheckId
	}
	return ""
}

func (x *ComplianceCheckResult) GetCheckName() string {
	if x != nil {
		return x.CheckName
	}
	return ""
}

func (x *ComplianceCheckResult) GetClusters() []*ComplianceCheckResult_ClusterCheckStatus {
	if x != nil {
		return x.Clusters
	}
	return nil
}

func (x *ComplianceCheckResult) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ComplianceCheckResult) GetInstructions() string {
	if x != nil {
		return x.Instructions
	}
	return ""
}

func (x *ComplianceCheckResult) GetStandard() string {
	if x != nil {
		return x.Standard
	}
	return ""
}

func (x *ComplianceCheckResult) GetControl() string {
	if x != nil {
		return x.Control
	}
	return ""
}

func (x *ComplianceCheckResult) GetRationale() string {
	if x != nil {
		return x.Rationale
	}
	return ""
}

func (x *ComplianceCheckResult) GetValuesUsed() []string {
	if x != nil {
		return x.ValuesUsed
	}
	return nil
}

func (x *ComplianceCheckResult) GetWarnings() []string {
	if x != nil {
		return x.Warnings
	}
	return nil
}

// ComplianceScanResult provides the results of a scan
type ComplianceScanResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScanName     string                   `protobuf:"bytes,1,opt,name=scan_name,json=scanName,proto3" json:"scan_name,omitempty"`
	ProfileName  string                   `protobuf:"bytes,2,opt,name=profile_name,json=profileName,proto3" json:"profile_name,omitempty"`
	CheckResults []*ComplianceCheckResult `protobuf:"bytes,3,rep,name=check_results,json=checkResults,proto3" json:"check_results,omitempty"`
	ScanConfigId string                   `protobuf:"bytes,4,opt,name=scan_config_id,json=scanConfigId,proto3" json:"scan_config_id,omitempty"`
}

func (x *ComplianceScanResult) Reset() {
	*x = ComplianceScanResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v2_compliance_results_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceScanResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceScanResult) ProtoMessage() {}

func (x *ComplianceScanResult) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_compliance_results_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceScanResult.ProtoReflect.Descriptor instead.
func (*ComplianceScanResult) Descriptor() ([]byte, []int) {
	return file_api_v2_compliance_results_service_proto_rawDescGZIP(), []int{2}
}

func (x *ComplianceScanResult) GetScanName() string {
	if x != nil {
		return x.ScanName
	}
	return ""
}

func (x *ComplianceScanResult) GetProfileName() string {
	if x != nil {
		return x.ProfileName
	}
	return ""
}

func (x *ComplianceScanResult) GetCheckResults() []*ComplianceCheckResult {
	if x != nil {
		return x.CheckResults
	}
	return nil
}

func (x *ComplianceScanResult) GetScanConfigId() string {
	if x != nil {
		return x.ScanConfigId
	}
	return ""
}

// Group the number of occurrences by status
type ComplianceCheckStatusCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count  int32                 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Status ComplianceCheckStatus `protobuf:"varint,2,opt,name=status,proto3,enum=v2.ComplianceCheckStatus" json:"status,omitempty"`
}

func (x *ComplianceCheckStatusCount) Reset() {
	*x = ComplianceCheckStatusCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v2_compliance_results_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceCheckStatusCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceCheckStatusCount) ProtoMessage() {}

func (x *ComplianceCheckStatusCount) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_compliance_results_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceCheckStatusCount.ProtoReflect.Descriptor instead.
func (*ComplianceCheckStatusCount) Descriptor() ([]byte, []int) {
	return file_api_v2_compliance_results_service_proto_rawDescGZIP(), []int{3}
}

func (x *ComplianceCheckStatusCount) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ComplianceCheckStatusCount) GetStatus() ComplianceCheckStatus {
	if x != nil {
		return x.Status
	}
	return ComplianceCheckStatus_UNSET_CHECK_STATUS
}

// ComplianceScanStatsShim models statistics of checks for a given scan configuration
type ComplianceScanStatsShim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScanName     string                        `protobuf:"bytes,1,opt,name=scan_name,json=scanName,proto3" json:"scan_name,omitempty"`
	CheckStats   []*ComplianceCheckStatusCount `protobuf:"bytes,2,rep,name=check_stats,json=checkStats,proto3" json:"check_stats,omitempty"`
	LastScan     *timestamppb.Timestamp        `protobuf:"bytes,3,opt,name=last_scan,json=lastScan,proto3" json:"last_scan,omitempty"`
	ScanConfigId string                        `protobuf:"bytes,4,opt,name=scan_config_id,json=scanConfigId,proto3" json:"scan_config_id,omitempty"`
}

func (x *ComplianceScanStatsShim) Reset() {
	*x = ComplianceScanStatsShim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v2_compliance_results_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceScanStatsShim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceScanStatsShim) ProtoMessage() {}

func (x *ComplianceScanStatsShim) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_compliance_results_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceScanStatsShim.ProtoReflect.Descriptor instead.
func (*ComplianceScanStatsShim) Descriptor() ([]byte, []int) {
	return file_api_v2_compliance_results_service_proto_rawDescGZIP(), []int{4}
}

func (x *ComplianceScanStatsShim) GetScanName() string {
	if x != nil {
		return x.ScanName
	}
	return ""
}

func (x *ComplianceScanStatsShim) GetCheckStats() []*ComplianceCheckStatusCount {
	if x != nil {
		return x.CheckStats
	}
	return nil
}

func (x *ComplianceScanStatsShim) GetLastScan() *timestamppb.Timestamp {
	if x != nil {
		return x.LastScan
	}
	return nil
}

func (x *ComplianceScanStatsShim) GetScanConfigId() string {
	if x != nil {
		return x.ScanConfigId
	}
	return ""
}

// ComplianceScanResultsOverview provides an overview and stats of the results of a scan configuration
type ComplianceScanResultsOverview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScanStats   *ComplianceScanStatsShim `protobuf:"bytes,1,opt,name=scan_stats,json=scanStats,proto3" json:"scan_stats,omitempty"`
	ProfileName []string                 `protobuf:"bytes,2,rep,name=profile_name,json=profileName,proto3" json:"profile_name,omitempty"`
	Cluster     []*ComplianceScanCluster `protobuf:"bytes,3,rep,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *ComplianceScanResultsOverview) Reset() {
	*x = ComplianceScanResultsOverview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v2_compliance_results_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceScanResultsOverview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceScanResultsOverview) ProtoMessage() {}

func (x *ComplianceScanResultsOverview) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_compliance_results_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceScanResultsOverview.ProtoReflect.Descriptor instead.
func (*ComplianceScanResultsOverview) Descriptor() ([]byte, []int) {
	return file_api_v2_compliance_results_service_proto_rawDescGZIP(), []int{5}
}

func (x *ComplianceScanResultsOverview) GetScanStats() *ComplianceScanStatsShim {
	if x != nil {
		return x.ScanStats
	}
	return nil
}

func (x *ComplianceScanResultsOverview) GetProfileName() []string {
	if x != nil {
		return x.ProfileName
	}
	return nil
}

func (x *ComplianceScanResultsOverview) GetCluster() []*ComplianceScanCluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

// ComplianceProfileScanStats provides scan stats overview based on profile
type ComplianceProfileScanStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CheckStats  []*ComplianceCheckStatusCount `protobuf:"bytes,1,rep,name=check_stats,json=checkStats,proto3" json:"check_stats,omitempty"`
	ProfileName string                        `protobuf:"bytes,2,opt,name=profile_name,json=profileName,proto3" json:"profile_name,omitempty"`
}

func (x *ComplianceProfileScanStats) Reset() {
	*x = ComplianceProfileScanStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v2_compliance_results_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceProfileScanStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceProfileScanStats) ProtoMessage() {}

func (x *ComplianceProfileScanStats) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_compliance_results_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceProfileScanStats.ProtoReflect.Descriptor instead.
func (*ComplianceProfileScanStats) Descriptor() ([]byte, []int) {
	return file_api_v2_compliance_results_service_proto_rawDescGZIP(), []int{6}
}

func (x *ComplianceProfileScanStats) GetCheckStats() []*ComplianceCheckStatusCount {
	if x != nil {
		return x.CheckStats
	}
	return nil
}

func (x *ComplianceProfileScanStats) GetProfileName() string {
	if x != nil {
		return x.ProfileName
	}
	return ""
}

// Group the number of occurrences by status
type ComplianceCheckResultStatusCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CheckName  string                        `protobuf:"bytes,1,opt,name=check_name,json=checkName,proto3" json:"check_name,omitempty"`
	Rationale  string                        `protobuf:"bytes,2,opt,name=rationale,proto3" json:"rationale,omitempty"`
	RuleName   string                        `protobuf:"bytes,3,opt,name=rule_name,json=ruleName,proto3" json:"rule_name,omitempty"`
	CheckStats []*ComplianceCheckStatusCount `protobuf:"bytes,4,rep,name=check_stats,json=checkStats,proto3" json:"check_stats,omitempty"`
}

func (x *ComplianceCheckResultStatusCount) Reset() {
	*x = ComplianceCheckResultStatusCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v2_compliance_results_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceCheckResultStatusCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceCheckResultStatusCount) ProtoMessage() {}

func (x *ComplianceCheckResultStatusCount) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_compliance_results_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceCheckResultStatusCount.ProtoReflect.Descriptor instead.
func (*ComplianceCheckResultStatusCount) Descriptor() ([]byte, []int) {
	return file_api_v2_compliance_results_service_proto_rawDescGZIP(), []int{7}
}

func (x *ComplianceCheckResultStatusCount) GetCheckName() string {
	if x != nil {
		return x.CheckName
	}
	return ""
}

func (x *ComplianceCheckResultStatusCount) GetRationale() string {
	if x != nil {
		return x.Rationale
	}
	return ""
}

func (x *ComplianceCheckResultStatusCount) GetRuleName() string {
	if x != nil {
		return x.RuleName
	}
	return ""
}

func (x *ComplianceCheckResultStatusCount) GetCheckStats() []*ComplianceCheckStatusCount {
	if x != nil {
		return x.CheckStats
	}
	return nil
}

// ComplianceProfileScanStats provides scan stats overview based on profile
type ComplianceProfileResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileResults []*ComplianceCheckResultStatusCount `protobuf:"bytes,1,rep,name=profile_results,json=profileResults,proto3" json:"profile_results,omitempty"`
	ProfileName    string                              `protobuf:"bytes,2,opt,name=profile_name,json=profileName,proto3" json:"profile_name,omitempty"`
}

func (x *ComplianceProfileResults) Reset() {
	*x = ComplianceProfileResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v2_compliance_results_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceProfileResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceProfileResults) ProtoMessage() {}

func (x *ComplianceProfileResults) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_compliance_results_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceProfileResults.ProtoReflect.Descriptor instead.
func (*ComplianceProfileResults) Descriptor() ([]byte, []int) {
	return file_api_v2_compliance_results_service_proto_rawDescGZIP(), []int{8}
}

func (x *ComplianceProfileResults) GetProfileResults() []*ComplianceCheckResultStatusCount {
	if x != nil {
		return x.ProfileResults
	}
	return nil
}

func (x *ComplianceProfileResults) GetProfileName() string {
	if x != nil {
		return x.ProfileName
	}
	return ""
}

// ComplianceClusterScanStats provides scan stats overview based on cluster
type ComplianceClusterScanStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScanStats *ComplianceScanStatsShim `protobuf:"bytes,1,opt,name=scan_stats,json=scanStats,proto3" json:"scan_stats,omitempty"`
	Cluster   *ComplianceScanCluster   `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *ComplianceClusterScanStats) Reset() {
	*x = ComplianceClusterScanStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v2_compliance_results_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceClusterScanStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceClusterScanStats) ProtoMessage() {}

func (x *ComplianceClusterScanStats) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_compliance_results_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceClusterScanStats.ProtoReflect.Descriptor instead.
func (*ComplianceClusterScanStats) Descriptor() ([]byte, []int) {
	return file_api_v2_compliance_results_service_proto_rawDescGZIP(), []int{9}
}

func (x *ComplianceClusterScanStats) GetScanStats() *ComplianceScanStatsShim {
	if x != nil {
		return x.ScanStats
	}
	return nil
}

func (x *ComplianceClusterScanStats) GetCluster() *ComplianceScanCluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

// ComplianceClusterOverallStats provides overall stats for cluster
type ComplianceClusterOverallStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster       *ComplianceScanCluster        `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	CheckStats    []*ComplianceCheckStatusCount `protobuf:"bytes,2,rep,name=check_stats,json=checkStats,proto3" json:"check_stats,omitempty"`
	ClusterErrors []string                      `protobuf:"bytes,3,rep,name=cluster_errors,json=clusterErrors,proto3" json:"cluster_errors,omitempty"`
}

func (x *ComplianceClusterOverallStats) Reset() {
	*x = ComplianceClusterOverallStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v2_compliance_results_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceClusterOverallStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceClusterOverallStats) ProtoMessage() {}

func (x *ComplianceClusterOverallStats) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_compliance_results_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceClusterOverallStats.ProtoReflect.Descriptor instead.
func (*ComplianceClusterOverallStats) Descriptor() ([]byte, []int) {
	return file_api_v2_compliance_results_service_proto_rawDescGZIP(), []int{10}
}

func (x *ComplianceClusterOverallStats) GetCluster() *ComplianceScanCluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *ComplianceClusterOverallStats) GetCheckStats() []*ComplianceCheckStatusCount {
	if x != nil {
		return x.CheckStats
	}
	return nil
}

func (x *ComplianceClusterOverallStats) GetClusterErrors() []string {
	if x != nil {
		return x.ClusterErrors
	}
	return nil
}

// ListComplianceScanResultsOverviewResponse provides overviews for scans
type ListComplianceScanResultsOverviewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScanOverviews []*ComplianceScanResultsOverview `protobuf:"bytes,1,rep,name=scan_overviews,json=scanOverviews,proto3" json:"scan_overviews,omitempty"`
}

func (x *ListComplianceScanResultsOverviewResponse) Reset() {
	*x = ListComplianceScanResultsOverviewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v2_compliance_results_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListComplianceScanResultsOverviewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListComplianceScanResultsOverviewResponse) ProtoMessage() {}

func (x *ListComplianceScanResultsOverviewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_compliance_results_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListComplianceScanResultsOverviewResponse.ProtoReflect.Descriptor instead.
func (*ListComplianceScanResultsOverviewResponse) Descriptor() ([]byte, []int) {
	return file_api_v2_compliance_results_service_proto_rawDescGZIP(), []int{11}
}

func (x *ListComplianceScanResultsOverviewResponse) GetScanOverviews() []*ComplianceScanResultsOverview {
	if x != nil {
		return x.ScanOverviews
	}
	return nil
}

// ListComplianceProfileScanStatsResponse provides stats for the profiles within the scans
type ListComplianceProfileScanStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScanStats []*ComplianceProfileScanStats `protobuf:"bytes,1,rep,name=scan_stats,json=scanStats,proto3" json:"scan_stats,omitempty"`
}

func (x *ListComplianceProfileScanStatsResponse) Reset() {
	*x = ListComplianceProfileScanStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v2_compliance_results_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListComplianceProfileScanStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListComplianceProfileScanStatsResponse) ProtoMessage() {}

func (x *ListComplianceProfileScanStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_compliance_results_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListComplianceProfileScanStatsResponse.ProtoReflect.Descriptor instead.
func (*ListComplianceProfileScanStatsResponse) Descriptor() ([]byte, []int) {
	return file_api_v2_compliance_results_service_proto_rawDescGZIP(), []int{12}
}

func (x *ListComplianceProfileScanStatsResponse) GetScanStats() []*ComplianceProfileScanStats {
	if x != nil {
		return x.ScanStats
	}
	return nil
}

// ListComplianceClusterScanStatsResponse provides stats for the clusters within the scans
type ListComplianceClusterScanStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScanStats []*ComplianceClusterScanStats `protobuf:"bytes,1,rep,name=scan_stats,json=scanStats,proto3" json:"scan_stats,omitempty"`
}

func (x *ListComplianceClusterScanStatsResponse) Reset() {
	*x = ListComplianceClusterScanStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v2_compliance_results_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListComplianceClusterScanStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListComplianceClusterScanStatsResponse) ProtoMessage() {}

func (x *ListComplianceClusterScanStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_compliance_results_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListComplianceClusterScanStatsResponse.ProtoReflect.Descriptor instead.
func (*ListComplianceClusterScanStatsResponse) Descriptor() ([]byte, []int) {
	return file_api_v2_compliance_results_service_proto_rawDescGZIP(), []int{13}
}

func (x *ListComplianceClusterScanStatsResponse) GetScanStats() []*ComplianceClusterScanStats {
	if x != nil {
		return x.ScanStats
	}
	return nil
}

// ListComplianceScanResultsResponse provides the complete scan results
type ListComplianceScanResultsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScanResults []*ComplianceScanResult `protobuf:"bytes,1,rep,name=scan_results,json=scanResults,proto3" json:"scan_results,omitempty"`
}

func (x *ListComplianceScanResultsResponse) Reset() {
	*x = ListComplianceScanResultsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v2_compliance_results_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListComplianceScanResultsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListComplianceScanResultsResponse) ProtoMessage() {}

func (x *ListComplianceScanResultsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_compliance_results_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListComplianceScanResultsResponse.ProtoReflect.Descriptor instead.
func (*ListComplianceScanResultsResponse) Descriptor() ([]byte, []int) {
	return file_api_v2_compliance_results_service_proto_rawDescGZIP(), []int{14}
}

func (x *ListComplianceScanResultsResponse) GetScanResults() []*ComplianceScanResult {
	if x != nil {
		return x.ScanResults
	}
	return nil
}

// ListComplianceCheckScanStatsResponse provides stats per cluster
type ListComplianceClusterOverallStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScanStats []*ComplianceClusterOverallStats `protobuf:"bytes,1,rep,name=scan_stats,json=scanStats,proto3" json:"scan_stats,omitempty"`
}

func (x *ListComplianceClusterOverallStatsResponse) Reset() {
	*x = ListComplianceClusterOverallStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v2_compliance_results_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListComplianceClusterOverallStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListComplianceClusterOverallStatsResponse) ProtoMessage() {}

func (x *ListComplianceClusterOverallStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_compliance_results_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListComplianceClusterOverallStatsResponse.ProtoReflect.Descriptor instead.
func (*ListComplianceClusterOverallStatsResponse) Descriptor() ([]byte, []int) {
	return file_api_v2_compliance_results_service_proto_rawDescGZIP(), []int{15}
}

func (x *ListComplianceClusterOverallStatsResponse) GetScanStats() []*ComplianceClusterOverallStats {
	if x != nil {
		return x.ScanStats
	}
	return nil
}

// ComplianceScanResultsCount gives count of scan results
type CountComplianceScanResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *CountComplianceScanResults) Reset() {
	*x = CountComplianceScanResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v2_compliance_results_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountComplianceScanResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountComplianceScanResults) ProtoMessage() {}

func (x *CountComplianceScanResults) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_compliance_results_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountComplianceScanResults.ProtoReflect.Descriptor instead.
func (*CountComplianceScanResults) Descriptor() ([]byte, []int) {
	return file_api_v2_compliance_results_service_proto_rawDescGZIP(), []int{16}
}

func (x *CountComplianceScanResults) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ComplianceScanResultsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScanConfigName string    `protobuf:"bytes,1,opt,name=scan_config_name,json=scanConfigName,proto3" json:"scan_config_name,omitempty"`
	Query          *RawQuery `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *ComplianceScanResultsRequest) Reset() {
	*x = ComplianceScanResultsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v2_compliance_results_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceScanResultsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceScanResultsRequest) ProtoMessage() {}

func (x *ComplianceScanResultsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_compliance_results_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceScanResultsRequest.ProtoReflect.Descriptor instead.
func (*ComplianceScanResultsRequest) Descriptor() ([]byte, []int) {
	return file_api_v2_compliance_results_service_proto_rawDescGZIP(), []int{17}
}

func (x *ComplianceScanResultsRequest) GetScanConfigName() string {
	if x != nil {
		return x.ScanConfigName
	}
	return ""
}

func (x *ComplianceScanResultsRequest) GetQuery() *RawQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

type ComplianceProfileResultsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileName string    `protobuf:"bytes,1,opt,name=profile_name,json=profileName,proto3" json:"profile_name,omitempty"`
	Query       *RawQuery `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *ComplianceProfileResultsRequest) Reset() {
	*x = ComplianceProfileResultsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v2_compliance_results_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceProfileResultsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceProfileResultsRequest) ProtoMessage() {}

func (x *ComplianceProfileResultsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_compliance_results_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceProfileResultsRequest.ProtoReflect.Descriptor instead.
func (*ComplianceProfileResultsRequest) Descriptor() ([]byte, []int) {
	return file_api_v2_compliance_results_service_proto_rawDescGZIP(), []int{18}
}

func (x *ComplianceProfileResultsRequest) GetProfileName() string {
	if x != nil {
		return x.ProfileName
	}
	return ""
}

func (x *ComplianceProfileResultsRequest) GetQuery() *RawQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

// ClusterCheckStatus groups the result of the check by cluster
type ComplianceCheckResult_ClusterCheckStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster     *ComplianceScanCluster `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Status      ComplianceCheckStatus  `protobuf:"varint,2,opt,name=status,proto3,enum=v2.ComplianceCheckStatus" json:"status,omitempty"`
	CreatedTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	CheckUid    string                 `protobuf:"bytes,4,opt,name=check_uid,json=checkUid,proto3" json:"check_uid,omitempty"`
}

func (x *ComplianceCheckResult_ClusterCheckStatus) Reset() {
	*x = ComplianceCheckResult_ClusterCheckStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v2_compliance_results_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceCheckResult_ClusterCheckStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceCheckResult_ClusterCheckStatus) ProtoMessage() {}

func (x *ComplianceCheckResult_ClusterCheckStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_v2_compliance_results_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceCheckResult_ClusterCheckStatus.ProtoReflect.Descriptor instead.
func (*ComplianceCheckResult_ClusterCheckStatus) Descriptor() ([]byte, []int) {
	return file_api_v2_compliance_results_service_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ComplianceCheckResult_ClusterCheckStatus) GetCluster() *ComplianceScanCluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *ComplianceCheckResult_ClusterCheckStatus) GetStatus() ComplianceCheckStatus {
	if x != nil {
		return x.Status
	}
	return ComplianceCheckStatus_UNSET_CHECK_STATUS
}

func (x *ComplianceCheckResult_ClusterCheckStatus) GetCreatedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedTime
	}
	return nil
}

func (x *ComplianceCheckResult_ClusterCheckStatus) GetCheckUid() string {
	if x != nil {
		return x.CheckUid
	}
	return ""
}

var File_api_v2_compliance_results_service_proto protoreflect.FileDescriptor

var file_api_v2_compliance_results_service_proto_rawDesc = []byte{
	0x0a, 0x27, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x76, 0x32, 0x1a, 0x13, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x19, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x59, 0x0a, 0x15,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xcc, 0x04, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x08, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x55, 0x73, 0x65, 0x64, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0xd8, 0x01, 0x0a, 0x12,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x55, 0x69, 0x64, 0x22, 0xbc, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x3e, 0x0a, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x24, 0x0a, 0x0e, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x49, 0x64, 0x22, 0x65, 0x0a, 0x1a, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x76, 0x32, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xd6, 0x01, 0x0a,
	0x17, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x53, 0x68, 0x69, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x61, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x61,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x32, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73,
	0x63, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x12,
	0x24, 0x0a, 0x0e, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x49, 0x64, 0x22, 0xb3, 0x01, 0x0a, 0x1d, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x4f,
	0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x63, 0x61, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x32,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x53, 0x68, 0x69, 0x6d, 0x52, 0x09, 0x73, 0x63, 0x61, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x80, 0x01, 0x0a, 0x1a,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x0b, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xbd,
	0x01, 0x0a, 0x20, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a,
	0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x8c,
	0x01, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x0f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8d, 0x01,
	0x0a, 0x1a, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x0a,
	0x73, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x53, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x68, 0x69, 0x6d, 0x52, 0x09, 0x73,
	0x63, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x32, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0xbc, 0x01,
	0x0a, 0x1d, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x33, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x53, 0x63, 0x61, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x32, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x75, 0x0a, 0x29,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63,
	0x61, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65,
	0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0e, 0x73, 0x63, 0x61,
	0x6e, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x4f, 0x76, 0x65, 0x72,
	0x76, 0x69, 0x65, 0x77, 0x52, 0x0d, 0x73, 0x63, 0x61, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69,
	0x65, 0x77, 0x73, 0x22, 0x67, 0x0a, 0x26, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x63, 0x61, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a,
	0x0a, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x09, 0x73, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x67, 0x0a, 0x26,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x32, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x09, 0x73, 0x63, 0x61, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x60, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x63,
	0x61, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0b, 0x73, 0x63, 0x61, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x6d, 0x0a, 0x29, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f,
	0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x09, 0x73, 0x63, 0x61,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x32, 0x0a, 0x1a, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6c, 0x0a, 0x1c, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x63,
	0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x61, 0x77, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x68, 0x0a, 0x1f, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x76, 0x32, 0x2e, 0x52, 0x61, 0x77, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2a, 0x8a, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12,
	0x55, 0x4e, 0x53, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x41, 0x53, 0x53, 0x10, 0x01, 0x12, 0x08,
	0x0a, 0x04, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x04, 0x12, 0x0a, 0x0a,
	0x06, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x54,
	0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x06, 0x12, 0x10, 0x0a,
	0x0c, 0x49, 0x4e, 0x43, 0x4f, 0x4e, 0x53, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x07, 0x32,
	0xd7, 0x0d, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x74, 0x0a, 0x1c,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x61,
	0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x10, 0x2e, 0x76,
	0x32, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x79, 0x49, 0x44, 0x1a, 0x19,
	0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x21, 0x12, 0x1f, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x2f, 0x73, 0x63, 0x61, 0x6e, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x12, 0x85, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x4f,
	0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x12, 0x0c, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x61, 0x77,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x2d, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x76,
	0x32, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x73, 0x63, 0x61,
	0x6e, 0x2f, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x12, 0x74, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x0c, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x61, 0x77, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x1a, 0x25, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x2f, 0x73, 0x63, 0x61, 0x6e, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x12, 0xa8, 0x01, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x20, 0x2e, 0x76, 0x32, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x76,
	0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x12, 0x2e, 0x2f, 0x76, 0x32,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x73, 0x63, 0x61, 0x6e,
	0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2f, 0x7b, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x9c, 0x01, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x23, 0x2e, 0x76, 0x32,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x3a,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x12, 0x32, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x73, 0x63, 0x61, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xa6, 0x01, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x23, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x32, 0x12, 0x30, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x2f, 0x73, 0x63, 0x61, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x7d, 0x12, 0x82, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x0c, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x61, 0x77, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x1a, 0x2a, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x2f, 0x73, 0x63, 0x61, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x84, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x0c, 0x2e, 0x76, 0x32, 0x2e,
	0x52, 0x61, 0x77, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x2a, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x76,
	0x32, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x73, 0x63, 0x61,
	0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x92, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x4f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x0c, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x61, 0x77, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x1a, 0x2d, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x76, 0x65,
	0x72, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29, 0x2f, 0x76, 0x32, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x73, 0x63, 0x61, 0x6e, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x2f, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x2f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x89, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0c, 0x2e, 0x76, 0x32, 0x2e, 0x52,
	0x61, 0x77, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1e, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x12,
	0x2f, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f,
	0x73, 0x63, 0x61, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2f, 0x6f, 0x76, 0x65, 0x72, 0x61,
	0x6c, 0x6c, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x78, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x0c, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x61, 0x77, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a,
	0x1e, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22,
	0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x73, 0x63, 0x61, 0x6e, 0x2f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0xac, 0x01, 0x0a, 0x2a, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x2e, 0x76, 0x32, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x76, 0x32,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x3c, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x36, 0x12, 0x34, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x2f, 0x73, 0x63, 0x61, 0x6e, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2f, 0x7b, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x42, 0x21, 0x0a, 0x18, 0x69, 0x6f, 0x2e,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x72, 0x6f, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x32, 0x5a, 0x05, 0x2e, 0x2f, 0x3b, 0x76, 0x32, 0x58, 0x02, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_v2_compliance_results_service_proto_rawDescOnce sync.Once
	file_api_v2_compliance_results_service_proto_rawDescData = file_api_v2_compliance_results_service_proto_rawDesc
)

func file_api_v2_compliance_results_service_proto_rawDescGZIP() []byte {
	file_api_v2_compliance_results_service_proto_rawDescOnce.Do(func() {
		file_api_v2_compliance_results_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v2_compliance_results_service_proto_rawDescData)
	})
	return file_api_v2_compliance_results_service_proto_rawDescData
}

var file_api_v2_compliance_results_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_v2_compliance_results_service_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_api_v2_compliance_results_service_proto_goTypes = []interface{}{
	(ComplianceCheckStatus)(0),                        // 0: v2.ComplianceCheckStatus
	(*ComplianceScanCluster)(nil),                     // 1: v2.ComplianceScanCluster
	(*ComplianceCheckResult)(nil),                     // 2: v2.ComplianceCheckResult
	(*ComplianceScanResult)(nil),                      // 3: v2.ComplianceScanResult
	(*ComplianceCheckStatusCount)(nil),                // 4: v2.ComplianceCheckStatusCount
	(*ComplianceScanStatsShim)(nil),                   // 5: v2.ComplianceScanStatsShim
	(*ComplianceScanResultsOverview)(nil),             // 6: v2.ComplianceScanResultsOverview
	(*ComplianceProfileScanStats)(nil),                // 7: v2.ComplianceProfileScanStats
	(*ComplianceCheckResultStatusCount)(nil),          // 8: v2.ComplianceCheckResultStatusCount
	(*ComplianceProfileResults)(nil),                  // 9: v2.ComplianceProfileResults
	(*ComplianceClusterScanStats)(nil),                // 10: v2.ComplianceClusterScanStats
	(*ComplianceClusterOverallStats)(nil),             // 11: v2.ComplianceClusterOverallStats
	(*ListComplianceScanResultsOverviewResponse)(nil), // 12: v2.ListComplianceScanResultsOverviewResponse
	(*ListComplianceProfileScanStatsResponse)(nil),    // 13: v2.ListComplianceProfileScanStatsResponse
	(*ListComplianceClusterScanStatsResponse)(nil),    // 14: v2.ListComplianceClusterScanStatsResponse
	(*ListComplianceScanResultsResponse)(nil),         // 15: v2.ListComplianceScanResultsResponse
	(*ListComplianceClusterOverallStatsResponse)(nil), // 16: v2.ListComplianceClusterOverallStatsResponse
	(*CountComplianceScanResults)(nil),                // 17: v2.CountComplianceScanResults
	(*ComplianceScanResultsRequest)(nil),              // 18: v2.ComplianceScanResultsRequest
	(*ComplianceProfileResultsRequest)(nil),           // 19: v2.ComplianceProfileResultsRequest
	(*ComplianceCheckResult_ClusterCheckStatus)(nil),  // 20: v2.ComplianceCheckResult.ClusterCheckStatus
	(*timestamppb.Timestamp)(nil),                     // 21: google.protobuf.Timestamp
	(*RawQuery)(nil),                                  // 22: v2.RawQuery
	(*ResourceByID)(nil),                              // 23: v2.ResourceByID
}
var file_api_v2_compliance_results_service_proto_depIdxs = []int32{
	20, // 0: v2.ComplianceCheckResult.clusters:type_name -> v2.ComplianceCheckResult.ClusterCheckStatus
	2,  // 1: v2.ComplianceScanResult.check_results:type_name -> v2.ComplianceCheckResult
	0,  // 2: v2.ComplianceCheckStatusCount.status:type_name -> v2.ComplianceCheckStatus
	4,  // 3: v2.ComplianceScanStatsShim.check_stats:type_name -> v2.ComplianceCheckStatusCount
	21, // 4: v2.ComplianceScanStatsShim.last_scan:type_name -> google.protobuf.Timestamp
	5,  // 5: v2.ComplianceScanResultsOverview.scan_stats:type_name -> v2.ComplianceScanStatsShim
	1,  // 6: v2.ComplianceScanResultsOverview.cluster:type_name -> v2.ComplianceScanCluster
	4,  // 7: v2.ComplianceProfileScanStats.check_stats:type_name -> v2.ComplianceCheckStatusCount
	4,  // 8: v2.ComplianceCheckResultStatusCount.check_stats:type_name -> v2.ComplianceCheckStatusCount
	8,  // 9: v2.ComplianceProfileResults.profile_results:type_name -> v2.ComplianceCheckResultStatusCount
	5,  // 10: v2.ComplianceClusterScanStats.scan_stats:type_name -> v2.ComplianceScanStatsShim
	1,  // 11: v2.ComplianceClusterScanStats.cluster:type_name -> v2.ComplianceScanCluster
	1,  // 12: v2.ComplianceClusterOverallStats.cluster:type_name -> v2.ComplianceScanCluster
	4,  // 13: v2.ComplianceClusterOverallStats.check_stats:type_name -> v2.ComplianceCheckStatusCount
	6,  // 14: v2.ListComplianceScanResultsOverviewResponse.scan_overviews:type_name -> v2.ComplianceScanResultsOverview
	7,  // 15: v2.ListComplianceProfileScanStatsResponse.scan_stats:type_name -> v2.ComplianceProfileScanStats
	10, // 16: v2.ListComplianceClusterScanStatsResponse.scan_stats:type_name -> v2.ComplianceClusterScanStats
	3,  // 17: v2.ListComplianceScanResultsResponse.scan_results:type_name -> v2.ComplianceScanResult
	11, // 18: v2.ListComplianceClusterOverallStatsResponse.scan_stats:type_name -> v2.ComplianceClusterOverallStats
	22, // 19: v2.ComplianceScanResultsRequest.query:type_name -> v2.RawQuery
	22, // 20: v2.ComplianceProfileResultsRequest.query:type_name -> v2.RawQuery
	1,  // 21: v2.ComplianceCheckResult.ClusterCheckStatus.cluster:type_name -> v2.ComplianceScanCluster
	0,  // 22: v2.ComplianceCheckResult.ClusterCheckStatus.status:type_name -> v2.ComplianceCheckStatus
	21, // 23: v2.ComplianceCheckResult.ClusterCheckStatus.created_time:type_name -> google.protobuf.Timestamp
	23, // 24: v2.ComplianceResultsService.GetComplianceScanCheckResult:input_type -> v2.ResourceByID
	22, // 25: v2.ComplianceResultsService.GetComplianceScanResultsOverview:input_type -> v2.RawQuery
	22, // 26: v2.ComplianceResultsService.GetComplianceScanResults:input_type -> v2.RawQuery
	18, // 27: v2.ComplianceResultsService.GetComplianceScanConfigurationResults:input_type -> v2.ComplianceScanResultsRequest
	19, // 28: v2.ComplianceResultsService.GetComplianceProfileResults:input_type -> v2.ComplianceProfileResultsRequest
	19, // 29: v2.ComplianceResultsService.GetComplianceProfileStats:input_type -> v2.ComplianceProfileResultsRequest
	22, // 30: v2.ComplianceResultsService.GetComplianceProfilesStats:input_type -> v2.RawQuery
	22, // 31: v2.ComplianceResultsService.GetComplianceClusterScanStats:input_type -> v2.RawQuery
	22, // 32: v2.ComplianceResultsService.GetComplianceOverallClusterStats:input_type -> v2.RawQuery
	22, // 33: v2.ComplianceResultsService.GetComplianceOverallClusterCount:input_type -> v2.RawQuery
	22, // 34: v2.ComplianceResultsService.GetComplianceScanResultsCount:input_type -> v2.RawQuery
	18, // 35: v2.ComplianceResultsService.GetComplianceScanConfigurationResultsCount:input_type -> v2.ComplianceScanResultsRequest
	2,  // 36: v2.ComplianceResultsService.GetComplianceScanCheckResult:output_type -> v2.ComplianceCheckResult
	12, // 37: v2.ComplianceResultsService.GetComplianceScanResultsOverview:output_type -> v2.ListComplianceScanResultsOverviewResponse
	15, // 38: v2.ComplianceResultsService.GetComplianceScanResults:output_type -> v2.ListComplianceScanResultsResponse
	15, // 39: v2.ComplianceResultsService.GetComplianceScanConfigurationResults:output_type -> v2.ListComplianceScanResultsResponse
	9,  // 40: v2.ComplianceResultsService.GetComplianceProfileResults:output_type -> v2.ComplianceProfileResults
	13, // 41: v2.ComplianceResultsService.GetComplianceProfileStats:output_type -> v2.ListComplianceProfileScanStatsResponse
	13, // 42: v2.ComplianceResultsService.GetComplianceProfilesStats:output_type -> v2.ListComplianceProfileScanStatsResponse
	14, // 43: v2.ComplianceResultsService.GetComplianceClusterScanStats:output_type -> v2.ListComplianceClusterScanStatsResponse
	16, // 44: v2.ComplianceResultsService.GetComplianceOverallClusterStats:output_type -> v2.ListComplianceClusterOverallStatsResponse
	17, // 45: v2.ComplianceResultsService.GetComplianceOverallClusterCount:output_type -> v2.CountComplianceScanResults
	17, // 46: v2.ComplianceResultsService.GetComplianceScanResultsCount:output_type -> v2.CountComplianceScanResults
	17, // 47: v2.ComplianceResultsService.GetComplianceScanConfigurationResultsCount:output_type -> v2.CountComplianceScanResults
	36, // [36:48] is the sub-list for method output_type
	24, // [24:36] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_api_v2_compliance_results_service_proto_init() }
func file_api_v2_compliance_results_service_proto_init() {
	if File_api_v2_compliance_results_service_proto != nil {
		return
	}
	file_api_v2_common_proto_init()
	file_api_v2_search_query_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_v2_compliance_results_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceScanCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v2_compliance_results_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceCheckResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v2_compliance_results_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceScanResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v2_compliance_results_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceCheckStatusCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v2_compliance_results_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceScanStatsShim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v2_compliance_results_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceScanResultsOverview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v2_compliance_results_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceProfileScanStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v2_compliance_results_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceCheckResultStatusCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v2_compliance_results_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceProfileResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v2_compliance_results_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceClusterScanStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v2_compliance_results_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceClusterOverallStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v2_compliance_results_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListComplianceScanResultsOverviewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v2_compliance_results_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListComplianceProfileScanStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v2_compliance_results_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListComplianceClusterScanStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v2_compliance_results_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListComplianceScanResultsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v2_compliance_results_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListComplianceClusterOverallStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v2_compliance_results_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountComplianceScanResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v2_compliance_results_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceScanResultsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v2_compliance_results_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceProfileResultsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v2_compliance_results_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceCheckResult_ClusterCheckStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v2_compliance_results_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_v2_compliance_results_service_proto_goTypes,
		DependencyIndexes: file_api_v2_compliance_results_service_proto_depIdxs,
		EnumInfos:         file_api_v2_compliance_results_service_proto_enumTypes,
		MessageInfos:      file_api_v2_compliance_results_service_proto_msgTypes,
	}.Build()
	File_api_v2_compliance_results_service_proto = out.File
	file_api_v2_compliance_results_service_proto_rawDesc = nil
	file_api_v2_compliance_results_service_proto_goTypes = nil
	file_api_v2_compliance_results_service_proto_depIdxs = nil
}
