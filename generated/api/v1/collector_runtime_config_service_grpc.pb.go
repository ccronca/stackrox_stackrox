// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: api/v1/collector_runtime_config_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CollectorRuntimeConfigService_GetCollectorRuntimeConfig_FullMethodName    = "/v1.CollectorRuntimeConfigService/GetCollectorRuntimeConfig"
	CollectorRuntimeConfigService_PatchCollectorRuntimeConfig_FullMethodName  = "/v1.CollectorRuntimeConfigService/PatchCollectorRuntimeConfig"
	CollectorRuntimeConfigService_DryRunCollectorRuntimeConfig_FullMethodName = "/v1.CollectorRuntimeConfigService/DryRunCollectorRuntimeConfig"
)

// CollectorRuntimeConfigServiceClient is the client API for CollectorRuntimeConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollectorRuntimeConfigServiceClient interface {
	GetCollectorRuntimeConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetCollectorRuntimeConfigResponse, error)
	PatchCollectorRuntimeConfig(ctx context.Context, in *CollectorRuntimeConfigRequest, opts ...grpc.CallOption) (*Empty, error)
	DryRunCollectorRuntimeConfig(ctx context.Context, in *CollectorRuntimeConfigRequest, opts ...grpc.CallOption) (*DryRunCollectorRuntimeConfigResponse, error)
}

type collectorRuntimeConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCollectorRuntimeConfigServiceClient(cc grpc.ClientConnInterface) CollectorRuntimeConfigServiceClient {
	return &collectorRuntimeConfigServiceClient{cc}
}

func (c *collectorRuntimeConfigServiceClient) GetCollectorRuntimeConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetCollectorRuntimeConfigResponse, error) {
	out := new(GetCollectorRuntimeConfigResponse)
	err := c.cc.Invoke(ctx, CollectorRuntimeConfigService_GetCollectorRuntimeConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectorRuntimeConfigServiceClient) PatchCollectorRuntimeConfig(ctx context.Context, in *CollectorRuntimeConfigRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, CollectorRuntimeConfigService_PatchCollectorRuntimeConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectorRuntimeConfigServiceClient) DryRunCollectorRuntimeConfig(ctx context.Context, in *CollectorRuntimeConfigRequest, opts ...grpc.CallOption) (*DryRunCollectorRuntimeConfigResponse, error) {
	out := new(DryRunCollectorRuntimeConfigResponse)
	err := c.cc.Invoke(ctx, CollectorRuntimeConfigService_DryRunCollectorRuntimeConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollectorRuntimeConfigServiceServer is the server API for CollectorRuntimeConfigService service.
// All implementations should embed UnimplementedCollectorRuntimeConfigServiceServer
// for forward compatibility
type CollectorRuntimeConfigServiceServer interface {
	GetCollectorRuntimeConfig(context.Context, *Empty) (*GetCollectorRuntimeConfigResponse, error)
	PatchCollectorRuntimeConfig(context.Context, *CollectorRuntimeConfigRequest) (*Empty, error)
	DryRunCollectorRuntimeConfig(context.Context, *CollectorRuntimeConfigRequest) (*DryRunCollectorRuntimeConfigResponse, error)
}

// UnimplementedCollectorRuntimeConfigServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCollectorRuntimeConfigServiceServer struct {
}

func (UnimplementedCollectorRuntimeConfigServiceServer) GetCollectorRuntimeConfig(context.Context, *Empty) (*GetCollectorRuntimeConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectorRuntimeConfig not implemented")
}
func (UnimplementedCollectorRuntimeConfigServiceServer) PatchCollectorRuntimeConfig(context.Context, *CollectorRuntimeConfigRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchCollectorRuntimeConfig not implemented")
}
func (UnimplementedCollectorRuntimeConfigServiceServer) DryRunCollectorRuntimeConfig(context.Context, *CollectorRuntimeConfigRequest) (*DryRunCollectorRuntimeConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DryRunCollectorRuntimeConfig not implemented")
}

// UnsafeCollectorRuntimeConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollectorRuntimeConfigServiceServer will
// result in compilation errors.
type UnsafeCollectorRuntimeConfigServiceServer interface {
	mustEmbedUnimplementedCollectorRuntimeConfigServiceServer()
}

func RegisterCollectorRuntimeConfigServiceServer(s grpc.ServiceRegistrar, srv CollectorRuntimeConfigServiceServer) {
	s.RegisterService(&CollectorRuntimeConfigService_ServiceDesc, srv)
}

func _CollectorRuntimeConfigService_GetCollectorRuntimeConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorRuntimeConfigServiceServer).GetCollectorRuntimeConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectorRuntimeConfigService_GetCollectorRuntimeConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorRuntimeConfigServiceServer).GetCollectorRuntimeConfig(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectorRuntimeConfigService_PatchCollectorRuntimeConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectorRuntimeConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorRuntimeConfigServiceServer).PatchCollectorRuntimeConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectorRuntimeConfigService_PatchCollectorRuntimeConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorRuntimeConfigServiceServer).PatchCollectorRuntimeConfig(ctx, req.(*CollectorRuntimeConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectorRuntimeConfigService_DryRunCollectorRuntimeConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectorRuntimeConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorRuntimeConfigServiceServer).DryRunCollectorRuntimeConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectorRuntimeConfigService_DryRunCollectorRuntimeConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorRuntimeConfigServiceServer).DryRunCollectorRuntimeConfig(ctx, req.(*CollectorRuntimeConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CollectorRuntimeConfigService_ServiceDesc is the grpc.ServiceDesc for CollectorRuntimeConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CollectorRuntimeConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.CollectorRuntimeConfigService",
	HandlerType: (*CollectorRuntimeConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCollectorRuntimeConfig",
			Handler:    _CollectorRuntimeConfigService_GetCollectorRuntimeConfig_Handler,
		},
		{
			MethodName: "PatchCollectorRuntimeConfig",
			Handler:    _CollectorRuntimeConfigService_PatchCollectorRuntimeConfig_Handler,
		},
		{
			MethodName: "DryRunCollectorRuntimeConfig",
			Handler:    _CollectorRuntimeConfigService_DryRunCollectorRuntimeConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/collector_runtime_config_service.proto",
}
