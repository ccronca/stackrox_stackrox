{
  "swagger": "2.0",
  "info": {
    "title": "api/v1/resource_collection_service.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "CollectionService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/collections": {
      "get": {
        "operationId": "CollectionService_ListCollections",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListCollectionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "query.query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query.pagination.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "query.pagination.offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "query.pagination.sortOption.field",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query.pagination.sortOption.reversed",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "query.pagination.sortOption.aggregateBy.aggrFunc",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNSET",
              "COUNT",
              "MIN",
              "MAX"
            ],
            "default": "UNSET"
          },
          {
            "name": "query.pagination.sortOption.aggregateBy.distinct",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "CollectionService"
        ]
      },
      "post": {
        "operationId": "CollectionService_CreateCollection",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateCollectionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateCollectionRequest"
            }
          }
        ],
        "tags": [
          "CollectionService"
        ]
      }
    },
    "/v1/collections/dryrun": {
      "post": {
        "operationId": "CollectionService_DryRunCollection",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DryRunCollectionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DryRunCollectionRequest"
            }
          }
        ],
        "tags": [
          "CollectionService"
        ]
      }
    },
    "/v1/collections/selectors": {
      "get": {
        "operationId": "CollectionService_ListCollectionSelectors",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListCollectionSelectorsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "CollectionService"
        ]
      }
    },
    "/v1/collections/{id}": {
      "get": {
        "operationId": "CollectionService_GetCollection",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetCollectionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "options.withMatches",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "options.filterQuery.query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "options.filterQuery.pagination.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "options.filterQuery.pagination.offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "options.filterQuery.pagination.sortOption.field",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "options.filterQuery.pagination.sortOption.reversed",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "options.filterQuery.pagination.sortOption.aggregateBy.aggrFunc",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNSET",
              "COUNT",
              "MIN",
              "MAX"
            ],
            "default": "UNSET"
          },
          {
            "name": "options.filterQuery.pagination.sortOption.aggregateBy.distinct",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "CollectionService"
        ]
      },
      "delete": {
        "operationId": "CollectionService_DeleteCollection",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Empty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CollectionService"
        ]
      },
      "patch": {
        "operationId": "CollectionService_UpdateCollection",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateCollectionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CollectionServiceUpdateCollectionBody"
            }
          }
        ],
        "tags": [
          "CollectionService"
        ]
      }
    },
    "/v1/collectionscount": {
      "get": {
        "operationId": "CollectionService_GetCollectionCount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetCollectionCountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "query.query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query.pagination.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "query.pagination.offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "query.pagination.sortOption.field",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query.pagination.sortOption.reversed",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "query.pagination.sortOption.aggregateBy.aggrFunc",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNSET",
              "COUNT",
              "MIN",
              "MAX"
            ],
            "default": "UNSET"
          },
          {
            "name": "query.pagination.sortOption.aggregateBy.distinct",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "CollectionService"
        ]
      }
    }
  },
  "definitions": {
    "CollectionServiceUpdateCollectionBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "resourceSelectors": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageResourceSelector"
          }
        },
        "embeddedCollectionIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ResourceCollectionEmbeddedResourceCollection": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "@gotags: search:\"Embedded Collection ID\" sql:\"fk(ResourceCollection:id),restrict-delete\"",
          "title": "'id' is searchable to force a separate table"
        }
      }
    },
    "googlerpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "storageBooleanOperator": {
      "type": "string",
      "enum": [
        "OR",
        "AND"
      ],
      "default": "OR"
    },
    "storageListDeployment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "hash": {
          "type": "string",
          "format": "uint64"
        },
        "name": {
          "type": "string"
        },
        "cluster": {
          "type": "string"
        },
        "clusterId": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "priority": {
          "type": "string",
          "format": "int64"
        }
      },
      "title": "Next available tag: 9"
    },
    "storageMatchType": {
      "type": "string",
      "enum": [
        "EXACT",
        "REGEX"
      ],
      "default": "EXACT"
    },
    "storageResourceCollection": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "@gotags: search:\"Collection ID\" sql:\"pk\""
        },
        "name": {
          "type": "string",
          "title": "@gotags: search:\"Collection Name\" sql:\"unique\""
        },
        "description": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "lastUpdated": {
          "type": "string",
          "format": "date-time"
        },
        "createdBy": {
          "$ref": "#/definitions/storageSlimUser",
          "title": "@gotags: sql:\"ignore_labels(User ID)\""
        },
        "updatedBy": {
          "$ref": "#/definitions/storageSlimUser",
          "title": "@gotags: sql:\"ignore_labels(User ID)\""
        },
        "resourceSelectors": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageResourceSelector"
          },
          "description": "`resource_selectors` resolve as disjunction (OR) with each-other and with selectors from `embedded_collections`. For MVP, the size of resource_selectors will at most be 1 from UX standpoint."
        },
        "embeddedCollections": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ResourceCollectionEmbeddedResourceCollection"
          }
        }
      }
    },
    "storageResourceSelector": {
      "type": "object",
      "properties": {
        "rules": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageSelectorRule"
          },
          "description": "`rules` resolve as a conjunction (AND)."
        }
      }
    },
    "storageRuleValue": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        },
        "matchType": {
          "$ref": "#/definitions/storageMatchType"
        }
      }
    },
    "storageSelectorRule": {
      "type": "object",
      "properties": {
        "fieldName": {
          "type": "string",
          "title": "`field_name` can be one of the following:\n- Cluster\n- Cluster Label\n- Namespace\n- Namespace Label\n- Namespace Annotation\n- Deployment\n- Deployment Label\n- Deployment Annotation"
        },
        "operator": {
          "$ref": "#/definitions/storageBooleanOperator",
          "title": "'operator' only supports disjunction (OR) currently"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageRuleValue"
          },
          "description": "`values` resolve as a conjunction (AND) or disjunction (OR) depending on operator. For MVP, only OR is supported from UX standpoint."
        }
      }
    },
    "storageSlimUser": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "@gotags: search:\"User ID\""
        },
        "name": {
          "type": "string",
          "title": "@gotags: search:\"User Name\""
        }
      }
    },
    "v1AggregateBy": {
      "type": "object",
      "properties": {
        "aggrFunc": {
          "$ref": "#/definitions/v1Aggregation"
        },
        "distinct": {
          "type": "boolean"
        }
      }
    },
    "v1Aggregation": {
      "type": "string",
      "enum": [
        "UNSET",
        "COUNT",
        "MIN",
        "MAX"
      ],
      "default": "UNSET"
    },
    "v1CollectionDeploymentMatchOptions": {
      "type": "object",
      "properties": {
        "withMatches": {
          "type": "boolean"
        },
        "filterQuery": {
          "$ref": "#/definitions/v1RawQuery"
        }
      }
    },
    "v1CreateCollectionRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "resourceSelectors": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageResourceSelector"
          }
        },
        "embeddedCollectionIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1CreateCollectionResponse": {
      "type": "object",
      "properties": {
        "collection": {
          "$ref": "#/definitions/storageResourceCollection"
        }
      }
    },
    "v1DryRunCollectionRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "title": "set if dryrun on existing collections"
        },
        "description": {
          "type": "string"
        },
        "resourceSelectors": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageResourceSelector"
          }
        },
        "embeddedCollectionIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "options": {
          "$ref": "#/definitions/v1CollectionDeploymentMatchOptions"
        }
      }
    },
    "v1DryRunCollectionResponse": {
      "type": "object",
      "properties": {
        "deployments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageListDeployment"
          }
        }
      }
    },
    "v1Empty": {
      "type": "object"
    },
    "v1GetCollectionCountResponse": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1GetCollectionResponse": {
      "type": "object",
      "properties": {
        "collection": {
          "$ref": "#/definitions/storageResourceCollection"
        },
        "deployments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageListDeployment"
          }
        }
      }
    },
    "v1ListCollectionSelectorsResponse": {
      "type": "object",
      "properties": {
        "selectors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ListCollectionsResponse": {
      "type": "object",
      "properties": {
        "collections": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageResourceCollection"
          }
        }
      }
    },
    "v1Pagination": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "offset": {
          "type": "integer",
          "format": "int32"
        },
        "sortOption": {
          "$ref": "#/definitions/v1SortOption"
        },
        "sortOptions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SortOption"
          },
          "description": "This field is under development. It is not supported on any REST APIs."
        }
      }
    },
    "v1RawQuery": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string"
        },
        "pagination": {
          "$ref": "#/definitions/v1Pagination"
        }
      },
      "description": "RawQuery represents the search query string.\nThe format of the query string is \"\u003cfield name\u003e:\u003cvalue,value,...\u003e+\u003cfield name\u003e:\u003cvalue, value,...\u003e+...\"\nFor example:\nTo search for deployments named \"central\" and \"sensor\" in the namespace \"stackrox\", the query string would be\n\"Deployment:central,sensor+Namespace:stackrox\"\nRawQuery is used in ListAPIs to search for a particular object."
    },
    "v1SortOption": {
      "type": "object",
      "properties": {
        "field": {
          "type": "string"
        },
        "reversed": {
          "type": "boolean"
        },
        "aggregateBy": {
          "$ref": "#/definitions/v1AggregateBy",
          "description": "This field is under development. It is not supported on any REST APIs."
        }
      }
    },
    "v1UpdateCollectionResponse": {
      "type": "object",
      "properties": {
        "collection": {
          "$ref": "#/definitions/storageResourceCollection"
        }
      }
    }
  }
}
