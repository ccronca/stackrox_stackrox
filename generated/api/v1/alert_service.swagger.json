{
  "swagger": "2.0",
  "info": {
    "title": "api/v1/alert_service.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "AlertService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/alerts": {
      "get": {
        "summary": "List returns the slim list version of the alerts.",
        "operationId": "AlertService_ListAlerts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListAlertsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pagination.sortOption.field",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pagination.sortOption.reversed",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pagination.sortOption.aggregateBy.aggrFunc",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNSET",
              "COUNT",
              "MIN",
              "MAX"
            ],
            "default": "UNSET"
          },
          {
            "name": "pagination.sortOption.aggregateBy.distinct",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "AlertService"
        ]
      },
      "delete": {
        "operationId": "AlertService_DeleteAlerts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteAlertsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "query.query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query.pagination.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "query.pagination.offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "query.pagination.sortOption.field",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query.pagination.sortOption.reversed",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "query.pagination.sortOption.aggregateBy.aggrFunc",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNSET",
              "COUNT",
              "MIN",
              "MAX"
            ],
            "default": "UNSET"
          },
          {
            "name": "query.pagination.sortOption.aggregateBy.distinct",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "confirm",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "AlertService"
        ]
      }
    },
    "/v1/alerts/resolve": {
      "patch": {
        "summary": "ResolveAlertsByQuery marks alerts matching search query as resolved.",
        "operationId": "AlertService_ResolveAlerts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Empty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ResolveAlertsRequest"
            }
          }
        ],
        "tags": [
          "AlertService"
        ]
      }
    },
    "/v1/alerts/summary/counts": {
      "get": {
        "summary": "GetAlertsCounts returns the number of alerts in the requested cluster or category.",
        "operationId": "AlertService_GetAlertsCounts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetAlertsCountsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "request.query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "request.pagination.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "request.pagination.offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "request.pagination.sortOption.field",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "request.pagination.sortOption.reversed",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "request.pagination.sortOption.aggregateBy.aggrFunc",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNSET",
              "COUNT",
              "MIN",
              "MAX"
            ],
            "default": "UNSET"
          },
          {
            "name": "request.pagination.sortOption.aggregateBy.distinct",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "groupBy",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNSET",
              "CATEGORY",
              "CLUSTER"
            ],
            "default": "UNSET"
          }
        ],
        "tags": [
          "AlertService"
        ]
      }
    },
    "/v1/alerts/summary/groups": {
      "get": {
        "summary": "GetAlertsGroup returns alerts grouped by policy.",
        "operationId": "AlertService_GetAlertsGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetAlertsGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pagination.sortOption.field",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pagination.sortOption.reversed",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pagination.sortOption.aggregateBy.aggrFunc",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNSET",
              "COUNT",
              "MIN",
              "MAX"
            ],
            "default": "UNSET"
          },
          {
            "name": "pagination.sortOption.aggregateBy.distinct",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "AlertService"
        ]
      }
    },
    "/v1/alerts/summary/timeseries": {
      "get": {
        "summary": "GetAlertTimeseries returns the alerts sorted by time.",
        "operationId": "AlertService_GetAlertTimeseries",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetAlertTimeseriesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pagination.sortOption.field",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pagination.sortOption.reversed",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pagination.sortOption.aggregateBy.aggrFunc",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNSET",
              "COUNT",
              "MIN",
              "MAX"
            ],
            "default": "UNSET"
          },
          {
            "name": "pagination.sortOption.aggregateBy.distinct",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "AlertService"
        ]
      }
    },
    "/v1/alerts/{id}": {
      "get": {
        "summary": "GetAlert returns the alert given its id.",
        "operationId": "AlertService_GetAlert",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageAlert"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AlertService"
        ]
      }
    },
    "/v1/alerts/{id}/resolve": {
      "patch": {
        "summary": "ResolveAlert marks the given alert (by ID) as resolved.",
        "operationId": "AlertService_ResolveAlert",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Empty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AlertServiceResolveAlertBody"
            }
          }
        ],
        "tags": [
          "AlertService"
        ]
      }
    },
    "/v1/alerts/{id}/snooze": {
      "patch": {
        "summary": "SnoozeAlert is deprecated.",
        "operationId": "AlertService_SnoozeAlert",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Empty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AlertServiceSnoozeAlertBody"
            }
          }
        ],
        "tags": [
          "AlertService"
        ]
      }
    },
    "/v1/alertscount": {
      "get": {
        "summary": "CountAlerts counts how many alerts match the get request.",
        "operationId": "AlertService_CountAlerts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CountAlertsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pagination.sortOption.field",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pagination.sortOption.reversed",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pagination.sortOption.aggregateBy.aggrFunc",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNSET",
              "COUNT",
              "MIN",
              "MAX"
            ],
            "default": "UNSET"
          },
          {
            "name": "pagination.sortOption.aggregateBy.distinct",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "AlertService"
        ]
      }
    }
  },
  "definitions": {
    "AlertDeploymentContainer": {
      "type": "object",
      "properties": {
        "image": {
          "$ref": "#/definitions/storageContainerImage",
          "title": "@gotags: search:\"-\" sql:\"ignore-fks,ignore-index\""
        },
        "name": {
          "type": "string"
        }
      }
    },
    "AlertEnforcement": {
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/storageEnforcementAction",
          "title": "@gotags: search:\"Enforcement\""
        },
        "message": {
          "type": "string"
        }
      }
    },
    "AlertGroupAlertCounts": {
      "type": "object",
      "properties": {
        "severity": {
          "$ref": "#/definitions/storageSeverity"
        },
        "count": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "AlertProcessViolation": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "processes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageProcessIndicator"
          },
          "title": "@gotags: sql:\"ignore-fks\""
        }
      }
    },
    "AlertResource": {
      "type": "object",
      "properties": {
        "resourceType": {
          "$ref": "#/definitions/AlertResourceResourceType",
          "title": "@gotags: search:\"Resource Type,store\""
        },
        "name": {
          "type": "string",
          "title": "@gotags: search:\"Resource\""
        },
        "clusterId": {
          "type": "string",
          "description": "This field has to be duplicated in Alert for scope management and search."
        },
        "clusterName": {
          "type": "string",
          "description": "This field has to be duplicated in Alert for scope management and search."
        },
        "namespace": {
          "type": "string",
          "description": "This field has to be duplicated in Alert for scope management and search."
        },
        "namespaceId": {
          "type": "string",
          "description": "This field has to be duplicated in Alert for scope management and search."
        }
      },
      "title": "Represents an alert on a kubernetes resource other than a deployment (configmaps, secrets, etc.)"
    },
    "AlertResourceResourceType": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "SECRETS",
        "CONFIGMAPS",
        "CLUSTER_ROLES",
        "CLUSTER_ROLE_BINDINGS",
        "NETWORK_POLICIES",
        "SECURITY_CONTEXT_CONSTRAINTS",
        "EGRESS_FIREWALLS"
      ],
      "default": "UNKNOWN"
    },
    "AlertServiceResolveAlertBody": {
      "type": "object",
      "properties": {
        "whitelist": {
          "type": "boolean"
        },
        "addToBaseline": {
          "type": "boolean"
        }
      }
    },
    "AlertServiceSnoozeAlertBody": {
      "type": "object",
      "properties": {
        "snoozeTill": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "AlertViolation": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "keyValueAttrs": {
          "$ref": "#/definitions/ViolationKeyValueAttrs"
        },
        "networkFlowInfo": {
          "$ref": "#/definitions/ViolationNetworkFlowInfo",
          "title": "@gotags: search:\"-\" sql:\"-\""
        },
        "type": {
          "$ref": "#/definitions/AlertViolationType",
          "description": "'type' is for internal use only."
        },
        "time": {
          "type": "string",
          "format": "date-time",
          "description": "Indicates violation time. This field differs from top-level field 'time' which represents last time the alert\noccurred in case of multiple occurrences of the policy alert. As of 55.0, this field is set only for kubernetes\nevent violations, but may not be limited to it in future."
        }
      }
    },
    "AlertViolationType": {
      "type": "string",
      "enum": [
        "GENERIC",
        "K8S_EVENT",
        "NETWORK_FLOW",
        "NETWORK_POLICY"
      ],
      "default": "GENERIC"
    },
    "ClusterAlertsAlertEvents": {
      "type": "object",
      "properties": {
        "severity": {
          "$ref": "#/definitions/storageSeverity"
        },
        "events": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AlertEvent"
          }
        }
      }
    },
    "GetAlertTimeseriesResponseClusterAlerts": {
      "type": "object",
      "properties": {
        "cluster": {
          "type": "string"
        },
        "severities": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ClusterAlertsAlertEvents"
          }
        }
      }
    },
    "GetAlertsCountsRequestRequestGroup": {
      "type": "string",
      "enum": [
        "UNSET",
        "CATEGORY",
        "CLUSTER"
      ],
      "default": "UNSET"
    },
    "GetAlertsCountsResponseAlertGroup": {
      "type": "object",
      "properties": {
        "group": {
          "type": "string"
        },
        "counts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AlertGroupAlertCounts"
          }
        }
      }
    },
    "KeyValueAttrsKeyValueAttr": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "ListAlertCommonEntityInfo": {
      "type": "object",
      "properties": {
        "clusterName": {
          "type": "string",
          "title": "@gotags: search:\"Cluster,store\""
        },
        "namespace": {
          "type": "string",
          "title": "@gotags: search:\"Namespace,store\""
        },
        "clusterId": {
          "type": "string",
          "title": "@gotags: search:\"Cluster ID,store\" sql:\"type(uuid)\""
        },
        "namespaceId": {
          "type": "string",
          "title": "@gotags: search:\"Namespace ID\" sql:\"type(uuid)\""
        },
        "resourceType": {
          "$ref": "#/definitions/storageListAlertResourceType",
          "title": "@gotags: search:\"Resource Type,store\""
        }
      },
      "description": "Fields common to all entities that an alert might belong to."
    },
    "ListAlertPolicyDevFields": {
      "type": "object",
      "properties": {
        "SORTName": {
          "type": "string",
          "title": "@gotags: search:\"SORT_Policy,hidden,analyzer=keyword\""
        }
      }
    },
    "ListAlertResourceEntity": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "@gotags: search:\"Resource\""
        }
      }
    },
    "NetworkFlowInfoEntity": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "entityType": {
          "$ref": "#/definitions/storageNetworkEntityInfoType"
        },
        "deploymentNamespace": {
          "type": "string"
        },
        "deploymentType": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PolicyMitreAttackVectors": {
      "type": "object",
      "properties": {
        "tactic": {
          "type": "string"
        },
        "techniques": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ProcessSignalLineageInfo": {
      "type": "object",
      "properties": {
        "parentUid": {
          "type": "integer",
          "format": "int64"
        },
        "parentExecFilePath": {
          "type": "string",
          "title": "@gotags: policy:\"Process Ancestor\""
        }
      }
    },
    "ViolationKeyValueAttrs": {
      "type": "object",
      "properties": {
        "attrs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/KeyValueAttrsKeyValueAttr"
          }
        }
      }
    },
    "ViolationNetworkFlowInfo": {
      "type": "object",
      "properties": {
        "protocol": {
          "$ref": "#/definitions/storageL4Protocol"
        },
        "source": {
          "$ref": "#/definitions/NetworkFlowInfoEntity"
        },
        "destination": {
          "$ref": "#/definitions/NetworkFlowInfoEntity"
        }
      }
    },
    "googlerpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "storageAlert": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Internal use only // @gotags: search:\"Alert ID,hidden\" sensorhash:\"ignore\" sql:\"pk,type(uuid)\""
        },
        "policy": {
          "$ref": "#/definitions/storagePolicy",
          "title": "@gotags: sql:\"ignore_pk,ignore_unique,ignore_labels(Lifecycle Stage)\""
        },
        "lifecycleStage": {
          "$ref": "#/definitions/storageLifecycleStage",
          "title": "@gotags: search:\"Lifecycle Stage\" sql:\"index=btree\""
        },
        "clusterId": {
          "type": "string",
          "title": "@gotags: search:\"Cluster ID,store\" sql:\"type(uuid)\""
        },
        "clusterName": {
          "type": "string",
          "title": "@gotags: search:\"Cluster,store\""
        },
        "namespace": {
          "type": "string",
          "title": "@gotags: search:\"Namespace,store\""
        },
        "namespaceId": {
          "type": "string",
          "title": "@gotags: search:\"Namespace ID\" sql:\"type(uuid)\""
        },
        "deployment": {
          "$ref": "#/definitions/storageAlertDeployment",
          "title": "Represents an alert on a deployment\nAn alert cannot be on more than one entity (deployment, container image, resource, etc.)"
        },
        "image": {
          "$ref": "#/definitions/storageContainerImage",
          "description": "@gotags: sql:\"ignore-fks,ignore-index\"",
          "title": "Represents an alert on a container image.\nAn alert cannot be on more than one entity (deployment, container image, resource, etc.)"
        },
        "resource": {
          "$ref": "#/definitions/AlertResource",
          "title": "Represents an alert on a kubernetes resource (configmaps, secrets, etc.)\nAn alert cannot be on more than one entity (deployment, container image, resource, etc.)"
        },
        "violations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AlertViolation"
          },
          "description": "For run-time phase alert, a maximum of 40 violations are retained.\n\n@gotags: sensorhash:\"ignore\" search:\"-\""
        },
        "processViolation": {
          "$ref": "#/definitions/AlertProcessViolation",
          "title": "@gotags: search:\"-\""
        },
        "enforcement": {
          "$ref": "#/definitions/AlertEnforcement"
        },
        "time": {
          "type": "string",
          "format": "date-time",
          "title": "@gotags: sensorhash:\"ignore\" search:\"Violation Time\""
        },
        "firstOccurred": {
          "type": "string",
          "format": "date-time",
          "title": "@gotags: sensorhash:\"ignore\""
        },
        "resolvedAt": {
          "type": "string",
          "format": "date-time",
          "description": "The time at which the alert was resolved. Only set if ViolationState is RESOLVED.\n\n@gotags: sensorhash:\"ignore\""
        },
        "state": {
          "$ref": "#/definitions/storageViolationState",
          "title": "@gotags: search:\"Violation State,store\" sql:\"index=btree\""
        },
        "snoozeTill": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "storageAlertDeployment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "@gotags: search:\"Deployment ID,store,hidden\" sql:\"index=hash,type(uuid)\""
        },
        "name": {
          "type": "string",
          "title": "@gotags: search:\"Deployment,store\""
        },
        "type": {
          "type": "string"
        },
        "namespace": {
          "type": "string",
          "description": "This field has to be duplicated in Alert for scope management and search."
        },
        "namespaceId": {
          "type": "string",
          "description": "This field has to be duplicated in Alert for scope management and search."
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "@gotags: sensorhash:\"ignore\""
        },
        "clusterId": {
          "type": "string",
          "description": "This field has to be duplicated in Alert for scope management and search."
        },
        "clusterName": {
          "type": "string",
          "description": "This field has to be duplicated in Alert for scope management and search."
        },
        "containers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AlertDeploymentContainer"
          }
        },
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "@gotags: sensorhash:\"ignore\""
        },
        "inactive": {
          "type": "boolean",
          "title": "@gotags: search:\"Inactive Deployment\""
        }
      }
    },
    "storageBooleanOperator": {
      "type": "string",
      "enum": [
        "OR",
        "AND"
      ],
      "default": "OR"
    },
    "storageContainerImage": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "@gotags: search:\"Image Sha,store,hidden\" sql:\"fk(Image:id),no-fk-constraint,index=hash\""
        },
        "name": {
          "$ref": "#/definitions/storageImageName"
        },
        "notPullable": {
          "type": "boolean"
        },
        "isClusterLocal": {
          "type": "boolean"
        }
      },
      "title": "Next tag: 12"
    },
    "storageEnforcementAction": {
      "type": "string",
      "enum": [
        "UNSET_ENFORCEMENT",
        "SCALE_TO_ZERO_ENFORCEMENT",
        "UNSATISFIABLE_NODE_CONSTRAINT_ENFORCEMENT",
        "KILL_POD_ENFORCEMENT",
        "FAIL_BUILD_ENFORCEMENT",
        "FAIL_KUBE_REQUEST_ENFORCEMENT",
        "FAIL_DEPLOYMENT_CREATE_ENFORCEMENT",
        "FAIL_DEPLOYMENT_UPDATE_ENFORCEMENT"
      ],
      "default": "UNSET_ENFORCEMENT",
      "description": " - FAIL_KUBE_REQUEST_ENFORCEMENT: FAIL_KUBE_REQUEST_ENFORCEMENT takes effect only if admission control webhook is enabled to listen on exec and port-forward events.\n - FAIL_DEPLOYMENT_CREATE_ENFORCEMENT: FAIL_DEPLOYMENT_CREATE_ENFORCEMENT takes effect only if admission control webhook is configured to enforce on object creates.\n - FAIL_DEPLOYMENT_UPDATE_ENFORCEMENT: FAIL_DEPLOYMENT_UPDATE_ENFORCEMENT takes effect only if admission control webhook is configured to enforce on object updates."
    },
    "storageEventSource": {
      "type": "string",
      "enum": [
        "NOT_APPLICABLE",
        "DEPLOYMENT_EVENT",
        "AUDIT_LOG_EVENT"
      ],
      "default": "NOT_APPLICABLE"
    },
    "storageExclusion": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "deployment": {
          "$ref": "#/definitions/storageExclusionDeployment"
        },
        "image": {
          "$ref": "#/definitions/storageExclusionImage"
        },
        "expiration": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "storageExclusionDeployment": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "scope": {
          "$ref": "#/definitions/storageScope"
        }
      }
    },
    "storageExclusionImage": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "storageImageName": {
      "type": "object",
      "properties": {
        "registry": {
          "type": "string",
          "title": "@gotags: search:\"Image Registry,store\""
        },
        "remote": {
          "type": "string",
          "title": "@gotags: search:\"Image Remote,store\""
        },
        "tag": {
          "type": "string",
          "title": "@gotags: search:\"Image Tag,store\""
        },
        "fullName": {
          "type": "string",
          "title": "@gotags: search:\"Image,store,analyzer=standard\""
        }
      }
    },
    "storageL4Protocol": {
      "type": "string",
      "enum": [
        "L4_PROTOCOL_UNKNOWN",
        "L4_PROTOCOL_TCP",
        "L4_PROTOCOL_UDP",
        "L4_PROTOCOL_ICMP",
        "L4_PROTOCOL_RAW",
        "L4_PROTOCOL_SCTP",
        "L4_PROTOCOL_ANY"
      ],
      "default": "L4_PROTOCOL_UNKNOWN"
    },
    "storageLifecycleStage": {
      "type": "string",
      "enum": [
        "DEPLOY",
        "BUILD",
        "RUNTIME"
      ],
      "default": "DEPLOY"
    },
    "storageListAlert": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "lifecycleStage": {
          "$ref": "#/definitions/storageLifecycleStage",
          "title": "@gotags: search:\"Lifecycle Stage,store\""
        },
        "time": {
          "type": "string",
          "format": "date-time",
          "title": "@gotags: search:\"Violation Time\""
        },
        "policy": {
          "$ref": "#/definitions/storageListAlertPolicy"
        },
        "state": {
          "$ref": "#/definitions/storageViolationState",
          "title": "@gotags: search:\"Violation State,store\""
        },
        "enforcementCount": {
          "type": "integer",
          "format": "int32"
        },
        "enforcementAction": {
          "$ref": "#/definitions/storageEnforcementAction",
          "title": "@gotags: search:\"Enforcement\""
        },
        "commonEntityInfo": {
          "$ref": "#/definitions/ListAlertCommonEntityInfo"
        },
        "deployment": {
          "$ref": "#/definitions/storageListAlertDeployment",
          "title": "Represents an alert on a deployment\nAn alert cannot be on more than one entity (deployment, container image, resource, etc.)"
        },
        "resource": {
          "$ref": "#/definitions/ListAlertResourceEntity",
          "title": "Represents an alert on a kubernetes resource (configmaps, secrets, etc.)\nAn alert cannot be on more than one entity (deployment, container image, resource, etc.)"
        }
      }
    },
    "storageListAlertDeployment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "@gotags: search:\"Deployment ID,store,hidden\""
        },
        "name": {
          "type": "string",
          "title": "@gotags: search:\"Deployment,store\""
        },
        "clusterName": {
          "type": "string",
          "description": "This field is deprecated and can be found in CommonEntityInfo. It will be removed from here in a future release.\n\nThis field has moved to CommonEntityInfo"
        },
        "namespace": {
          "type": "string",
          "description": "This field is deprecated and can be found in CommonEntityInfo. It will be removed from here in a future release.\n\nThis field has moved to CommonEntityInfo"
        },
        "clusterId": {
          "type": "string",
          "description": "This field is deprecated and can be found in CommonEntityInfo. It will be removed from here in a future release.\n\nThis field has moved to CommonEntityInfo"
        },
        "inactive": {
          "type": "boolean",
          "title": "@gotags: search:\"Inactive Deployment\""
        },
        "namespaceId": {
          "type": "string",
          "description": "This field is deprecated and can be found in CommonEntityInfo. It will be removed from here in a future release.\n\nThis field has moved to CommonEntityInfo"
        }
      }
    },
    "storageListAlertPolicy": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "@gotags: search:\"Policy ID,store,hidden\""
        },
        "name": {
          "type": "string",
          "title": "@gotags: search:\"Policy,store\""
        },
        "severity": {
          "$ref": "#/definitions/storageSeverity",
          "title": "@gotags: search:\"Severity,store\""
        },
        "description": {
          "type": "string"
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "@gotags: search:\"Category,store\""
        },
        "developerInternalFields": {
          "$ref": "#/definitions/ListAlertPolicyDevFields",
          "description": "For internal use only."
        }
      }
    },
    "storageListAlertResourceType": {
      "type": "string",
      "enum": [
        "DEPLOYMENT",
        "SECRETS",
        "CONFIGMAPS",
        "CLUSTER_ROLES",
        "CLUSTER_ROLE_BINDINGS",
        "NETWORK_POLICIES",
        "SECURITY_CONTEXT_CONSTRAINTS",
        "EGRESS_FIREWALLS"
      ],
      "default": "DEPLOYMENT",
      "title": "A special ListAlert-only enumeration of all resource types. Unlike Alert.Resource.ResourceType this also includes deployment as a type\nThis must be kept in sync with Alert.Resource.ResourceType (excluding the deployment value)"
    },
    "storageNetworkEntityInfoType": {
      "type": "string",
      "enum": [
        "UNKNOWN_TYPE",
        "DEPLOYMENT",
        "INTERNET",
        "LISTEN_ENDPOINT",
        "EXTERNAL_SOURCE",
        "INTERNAL_ENTITIES"
      ],
      "default": "UNKNOWN_TYPE",
      "title": "- INTERNAL_ENTITIES: INTERNAL_ENTITIES is for grouping all internal entities under a single network graph node"
    },
    "storagePolicy": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "@gotags: search:\"Policy ID,store,hidden\" sql:\"pk\""
        },
        "name": {
          "type": "string",
          "title": "@gotags: search:\"Policy,store\" sql:\"unique\""
        },
        "description": {
          "type": "string",
          "title": "@gotags: search:\"Description\""
        },
        "rationale": {
          "type": "string"
        },
        "remediation": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean",
          "title": "@gotags: search:\"Disabled\""
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "@gotags: search:\"Category,store\""
        },
        "lifecycleStages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageLifecycleStage"
          },
          "title": "@gotags: search:\"Lifecycle Stage,store\""
        },
        "eventSource": {
          "$ref": "#/definitions/storageEventSource"
        },
        "exclusions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageExclusion"
          }
        },
        "scope": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageScope"
          }
        },
        "severity": {
          "$ref": "#/definitions/storageSeverity",
          "title": "@gotags: search:\"Severity,store\""
        },
        "enforcementActions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageEnforcementAction"
          },
          "description": "FAIL_DEPLOYMENT_CREATE_ENFORCEMENT takes effect only if admission control webhook is configured to enforce on object creates/updates.\nFAIL_KUBE_REQUEST_ENFORCEMENT takes effect only if admission control webhook is enabled to listen on exec and port-forward events.\nFAIL_DEPLOYMENT_UPDATE_ENFORCEMENT takes effect only if admission control webhook is configured to enforce on object updates.\n\n@gotags: search:\"Enforcement\""
        },
        "notifiers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "lastUpdated": {
          "type": "string",
          "format": "date-time",
          "title": "@gotags: search:\"Policy Last Updated\""
        },
        "SORTName": {
          "type": "string",
          "description": "For internal use only.\n\n@gotags: search:\"SORT_Policy,hidden,analyzer=keyword\""
        },
        "SORTLifecycleStage": {
          "type": "string",
          "description": "For internal use only.\n\n@gotags: search:\"SORT_Lifecycle Stage,hidden\""
        },
        "SORTEnforcement": {
          "type": "boolean",
          "description": "For internal use only.\n\n@gotags: search:\"SORT_Enforcement,hidden\""
        },
        "policyVersion": {
          "type": "string"
        },
        "policySections": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storagePolicySection"
          }
        },
        "mitreAttackVectors": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/PolicyMitreAttackVectors"
          }
        },
        "criteriaLocked": {
          "type": "boolean",
          "description": "Read-only field. If true, the policy's criteria fields are rendered read-only."
        },
        "mitreVectorsLocked": {
          "type": "boolean",
          "description": "Read-only field. If true, the policy's MITRE ATT\u0026CK fields are rendered read-only."
        },
        "isDefault": {
          "type": "boolean",
          "description": "Read-only field. Indicates the policy is a default policy if true and a custom policy if false."
        }
      }
    },
    "storagePolicyGroup": {
      "type": "object",
      "properties": {
        "fieldName": {
          "type": "string"
        },
        "booleanOperator": {
          "$ref": "#/definitions/storageBooleanOperator"
        },
        "negate": {
          "type": "boolean"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storagePolicyValue"
          }
        }
      }
    },
    "storagePolicySection": {
      "type": "object",
      "properties": {
        "sectionName": {
          "type": "string"
        },
        "policyGroups": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storagePolicyGroup"
          }
        }
      }
    },
    "storagePolicyValue": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        }
      }
    },
    "storageProcessIndicator": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "@gotags: search:\"Process ID,store,hidden\"  sql:\"pk,type(uuid)\"",
          "title": "A unique UUID for the Indicator message"
        },
        "deploymentId": {
          "type": "string",
          "title": "@gotags: search:\"Deployment ID,store,hidden\" policy:\",prefer-parent\" sql:\"index=hash,fk(Deployment:id),no-fk-constraint,type(uuid)\""
        },
        "containerName": {
          "type": "string",
          "title": "@gotags: search:\"Container Name,hidden\" policy:\",prefer-parent\""
        },
        "podId": {
          "type": "string",
          "description": "@gotags: search:\"Pod ID,hidden\"",
          "title": "Pod name"
        },
        "podUid": {
          "type": "string",
          "title": "@gotags: search:\"Pod UID,hidden\" sql:\"index=hash,type(uuid)\""
        },
        "signal": {
          "$ref": "#/definitions/storageProcessSignal",
          "title": "A process signal message passed from Collector to Sensor"
        },
        "clusterId": {
          "type": "string",
          "title": "@gotags: search:\"Cluster ID,store,hidden\" policy:\",prefer-parent\" sql:\"type(uuid)\""
        },
        "namespace": {
          "type": "string",
          "title": "@gotags: search:\"Namespace,store,hidden\" policy:\",prefer-parent\""
        },
        "containerStartTime": {
          "type": "string",
          "format": "date-time"
        },
        "imageId": {
          "type": "string"
        }
      },
      "title": "Next available tag: 13"
    },
    "storageProcessSignal": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "A unique UUID for identifying the message\nWe have this here instead of at the top level\nbecause we want to have each message to be\nself contained."
        },
        "containerId": {
          "type": "string",
          "description": "@gotags: search:\"Container ID,hidden\"",
          "title": "ID of container associated with this process"
        },
        "time": {
          "type": "string",
          "format": "date-time",
          "description": "@gotags: search:\"Process Creation Time,hidden\"",
          "title": "Process creation time"
        },
        "name": {
          "type": "string",
          "description": "@gotags: search:\"Process Name\"",
          "title": "Process name"
        },
        "args": {
          "type": "string",
          "description": "@gotags: search:\"Process Arguments\"",
          "title": "Process arguments"
        },
        "execFilePath": {
          "type": "string",
          "description": "@gotags: search:\"Process Path\"",
          "title": "Process executable file path"
        },
        "pid": {
          "type": "integer",
          "format": "int64",
          "title": "Host process ID"
        },
        "uid": {
          "type": "integer",
          "format": "int64",
          "description": "@gotags: search:\"Process UID\"",
          "title": "Real user ID"
        },
        "gid": {
          "type": "integer",
          "format": "int64",
          "title": "Real group ID"
        },
        "lineage": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Process Lineage"
        },
        "scraped": {
          "type": "boolean",
          "title": "Signal origin"
        },
        "lineageInfo": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ProcessSignalLineageInfo"
          },
          "title": "Process LineageInfo"
        }
      }
    },
    "storageScope": {
      "type": "object",
      "properties": {
        "cluster": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "label": {
          "$ref": "#/definitions/storageScopeLabel"
        }
      }
    },
    "storageScopeLabel": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "storageSeverity": {
      "type": "string",
      "enum": [
        "UNSET_SEVERITY",
        "LOW_SEVERITY",
        "MEDIUM_SEVERITY",
        "HIGH_SEVERITY",
        "CRITICAL_SEVERITY"
      ],
      "default": "UNSET_SEVERITY"
    },
    "storageViolationState": {
      "type": "string",
      "enum": [
        "ACTIVE",
        "SNOOZED",
        "RESOLVED",
        "ATTEMPTED"
      ],
      "default": "ACTIVE"
    },
    "v1AggregateBy": {
      "type": "object",
      "properties": {
        "aggrFunc": {
          "$ref": "#/definitions/v1Aggregation"
        },
        "distinct": {
          "type": "boolean"
        }
      }
    },
    "v1Aggregation": {
      "type": "string",
      "enum": [
        "UNSET",
        "COUNT",
        "MIN",
        "MAX"
      ],
      "default": "UNSET"
    },
    "v1AlertEvent": {
      "type": "object",
      "properties": {
        "time": {
          "type": "string",
          "format": "int64"
        },
        "type": {
          "$ref": "#/definitions/v1Type"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "v1CountAlertsResponse": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1DeleteAlertsResponse": {
      "type": "object",
      "properties": {
        "numDeleted": {
          "type": "integer",
          "format": "int64"
        },
        "dryRun": {
          "type": "boolean"
        }
      }
    },
    "v1Empty": {
      "type": "object"
    },
    "v1GetAlertTimeseriesResponse": {
      "type": "object",
      "properties": {
        "clusters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/GetAlertTimeseriesResponseClusterAlerts"
          }
        }
      }
    },
    "v1GetAlertsCountsResponse": {
      "type": "object",
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/GetAlertsCountsResponseAlertGroup"
          }
        }
      }
    },
    "v1GetAlertsGroupResponse": {
      "type": "object",
      "properties": {
        "alertsByPolicies": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1GetAlertsGroupResponsePolicyGroup"
          }
        }
      }
    },
    "v1GetAlertsGroupResponsePolicyGroup": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/storageListAlertPolicy"
        },
        "numAlerts": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1ListAlertsRequest": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string"
        },
        "pagination": {
          "$ref": "#/definitions/v1Pagination"
        }
      }
    },
    "v1ListAlertsResponse": {
      "type": "object",
      "properties": {
        "alerts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageListAlert"
          }
        }
      }
    },
    "v1Pagination": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "offset": {
          "type": "integer",
          "format": "int32"
        },
        "sortOption": {
          "$ref": "#/definitions/v1SortOption"
        },
        "sortOptions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SortOption"
          },
          "description": "This field is under development. It is not supported on any REST APIs."
        }
      }
    },
    "v1RawQuery": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string"
        },
        "pagination": {
          "$ref": "#/definitions/v1Pagination"
        }
      },
      "description": "RawQuery represents the search query string.\nThe format of the query string is \"\u003cfield name\u003e:\u003cvalue,value,...\u003e+\u003cfield name\u003e:\u003cvalue, value,...\u003e+...\"\nFor example:\nTo search for deployments named \"central\" and \"sensor\" in the namespace \"stackrox\", the query string would be\n\"Deployment:central,sensor+Namespace:stackrox\"\nRawQuery is used in ListAPIs to search for a particular object."
    },
    "v1ResolveAlertsRequest": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string"
        }
      }
    },
    "v1SortOption": {
      "type": "object",
      "properties": {
        "field": {
          "type": "string"
        },
        "reversed": {
          "type": "boolean"
        },
        "aggregateBy": {
          "$ref": "#/definitions/v1AggregateBy",
          "description": "This field is under development. It is not supported on any REST APIs."
        }
      }
    },
    "v1Type": {
      "type": "string",
      "enum": [
        "CREATED",
        "REMOVED"
      ],
      "default": "CREATED"
    }
  }
}
