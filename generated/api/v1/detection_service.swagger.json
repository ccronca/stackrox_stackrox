{
  "swagger": "2.0",
  "info": {
    "title": "api/v1/detection_service.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "DetectionService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/detect/build": {
      "post": {
        "summary": "DetectBuildTime checks if any images violate build time policies.",
        "operationId": "DetectionService_DetectBuildTime",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BuildDetectionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BuildDetectionRequest"
            }
          }
        ],
        "tags": [
          "DetectionService"
        ]
      }
    },
    "/v1/detect/deploy": {
      "post": {
        "summary": "DetectDeployTime checks if any deployments violate deploy time policies.",
        "operationId": "DetectionService_DetectDeployTime",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeployDetectionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeployDetectionRequest"
            }
          }
        ],
        "tags": [
          "DetectionService"
        ]
      }
    },
    "/v1/detect/deploy/yaml": {
      "post": {
        "summary": "DetectDeployTimeFromYAML checks if the given deployment yaml violates any deploy time policies.",
        "operationId": "DetectionService_DetectDeployTimeFromYAML",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeployDetectionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeployYAMLDetectionRequest"
            }
          }
        ],
        "tags": [
          "DetectionService"
        ]
      }
    }
  },
  "definitions": {
    "AlertDeploymentContainer": {
      "type": "object",
      "properties": {
        "image": {
          "$ref": "#/definitions/storageContainerImage"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "AlertEnforcement": {
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/storageEnforcementAction"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "AlertProcessViolation": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "processes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageProcessIndicator"
          }
        }
      }
    },
    "AlertResource": {
      "type": "object",
      "properties": {
        "resourceType": {
          "$ref": "#/definitions/AlertResourceResourceType"
        },
        "name": {
          "type": "string"
        },
        "clusterId": {
          "type": "string",
          "description": "This field has to be duplicated in Alert for scope management and search."
        },
        "clusterName": {
          "type": "string",
          "description": "This field has to be duplicated in Alert for scope management and search."
        },
        "namespace": {
          "type": "string",
          "description": "This field has to be duplicated in Alert for scope management and search."
        },
        "namespaceId": {
          "type": "string",
          "description": "This field has to be duplicated in Alert for scope management and search."
        }
      },
      "title": "Represents an alert on a kubernetes resource other than a deployment (configmaps, secrets, etc.)"
    },
    "AlertResourceResourceType": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "SECRETS",
        "CONFIGMAPS",
        "CLUSTER_ROLES",
        "CLUSTER_ROLE_BINDINGS",
        "NETWORK_POLICIES",
        "SECURITY_CONTEXT_CONSTRAINTS",
        "EGRESS_FIREWALLS"
      ],
      "default": "UNKNOWN"
    },
    "AlertViolation": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "keyValueAttrs": {
          "$ref": "#/definitions/ViolationKeyValueAttrs"
        },
        "networkFlowInfo": {
          "$ref": "#/definitions/ViolationNetworkFlowInfo"
        },
        "type": {
          "$ref": "#/definitions/AlertViolationType",
          "description": "'type' is for internal use only."
        },
        "time": {
          "type": "string",
          "format": "date-time",
          "description": "Indicates violation time. This field differs from top-level field 'time' which represents last time the alert\noccurred in case of multiple occurrences of the policy alert. As of 55.0, this field is set only for kubernetes\nevent violations, but may not be limited to it in future."
        }
      }
    },
    "AlertViolationType": {
      "type": "string",
      "enum": [
        "GENERIC",
        "K8S_EVENT",
        "NETWORK_FLOW",
        "NETWORK_POLICY"
      ],
      "default": "GENERIC"
    },
    "ContainerConfigEnvironmentConfig": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "envVarSource": {
          "$ref": "#/definitions/EnvironmentConfigEnvVarSource"
        }
      }
    },
    "DeployDetectionResponseRun": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "alerts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageAlert"
          }
        }
      }
    },
    "EnvironmentConfigEnvVarSource": {
      "type": "string",
      "enum": [
        "UNSET",
        "RAW",
        "SECRET_KEY",
        "CONFIG_MAP_KEY",
        "FIELD",
        "RESOURCE_FIELD",
        "UNKNOWN"
      ],
      "default": "UNSET",
      "title": "For any update to EnvVarSource, please also update 'ui/src/messages/common.js'"
    },
    "KeyValueAttrsKeyValueAttr": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "NetworkFlowInfoEntity": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "entityType": {
          "$ref": "#/definitions/storageNetworkEntityInfoType"
        },
        "deploymentNamespace": {
          "type": "string"
        },
        "deploymentType": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PolicyMitreAttackVectors": {
      "type": "object",
      "properties": {
        "tactic": {
          "type": "string"
        },
        "techniques": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "PortConfigExposureInfo": {
      "type": "object",
      "properties": {
        "level": {
          "$ref": "#/definitions/PortConfigExposureLevel"
        },
        "serviceName": {
          "type": "string",
          "title": "only set if level is not HOST"
        },
        "serviceId": {
          "type": "string"
        },
        "serviceClusterIp": {
          "type": "string"
        },
        "servicePort": {
          "type": "integer",
          "format": "int32"
        },
        "nodePort": {
          "type": "integer",
          "format": "int32",
          "title": "only set if level is HOST, NODE, EXTERNAL or ROUTE"
        },
        "externalIps": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "only set if level is EXTERNAL"
        },
        "externalHostnames": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "only set if level is EXTERNAL or ROUTE"
        }
      }
    },
    "PortConfigExposureLevel": {
      "type": "string",
      "enum": [
        "UNSET",
        "EXTERNAL",
        "NODE",
        "INTERNAL",
        "HOST",
        "ROUTE"
      ],
      "default": "UNSET"
    },
    "ProcessSignalLineageInfo": {
      "type": "object",
      "properties": {
        "parentUid": {
          "type": "integer",
          "format": "int64"
        },
        "parentExecFilePath": {
          "type": "string"
        }
      }
    },
    "SeccompProfileProfileType": {
      "type": "string",
      "enum": [
        "UNCONFINED",
        "RUNTIME_DEFAULT",
        "LOCALHOST"
      ],
      "default": "UNCONFINED"
    },
    "SecurityContextSELinux": {
      "type": "object",
      "properties": {
        "user": {
          "type": "string"
        },
        "role": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "level": {
          "type": "string"
        }
      }
    },
    "SecurityContextSeccompProfile": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/SeccompProfileProfileType"
        },
        "localhostProfile": {
          "type": "string"
        }
      }
    },
    "ViolationKeyValueAttrs": {
      "type": "object",
      "properties": {
        "attrs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/KeyValueAttrsKeyValueAttr"
          }
        }
      }
    },
    "ViolationNetworkFlowInfo": {
      "type": "object",
      "properties": {
        "protocol": {
          "$ref": "#/definitions/storageL4Protocol"
        },
        "source": {
          "$ref": "#/definitions/NetworkFlowInfoEntity"
        },
        "destination": {
          "$ref": "#/definitions/NetworkFlowInfoEntity"
        }
      }
    },
    "VolumeMountPropagation": {
      "type": "string",
      "enum": [
        "NONE",
        "HOST_TO_CONTAINER",
        "BIDIRECTIONAL"
      ],
      "default": "NONE"
    },
    "googlerpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "storageAlert": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Internal use only // "
        },
        "policy": {
          "$ref": "#/definitions/storagePolicy"
        },
        "lifecycleStage": {
          "$ref": "#/definitions/storageLifecycleStage"
        },
        "clusterId": {
          "type": "string"
        },
        "clusterName": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "namespaceId": {
          "type": "string"
        },
        "deployment": {
          "$ref": "#/definitions/storageAlertDeployment",
          "title": "Represents an alert on a deployment\nAn alert cannot be on more than one entity (deployment, container image, resource, etc.)"
        },
        "image": {
          "$ref": "#/definitions/storageContainerImage",
          "title": "Represents an alert on a container image.\nAn alert cannot be on more than one entity (deployment, container image, resource, etc.)"
        },
        "resource": {
          "$ref": "#/definitions/AlertResource",
          "title": "Represents an alert on a kubernetes resource (configmaps, secrets, etc.)\nAn alert cannot be on more than one entity (deployment, container image, resource, etc.)"
        },
        "violations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AlertViolation"
          },
          "description": "For run-time phase alert, a maximum of 40 violations are retained."
        },
        "processViolation": {
          "$ref": "#/definitions/AlertProcessViolation"
        },
        "enforcement": {
          "$ref": "#/definitions/AlertEnforcement"
        },
        "time": {
          "type": "string",
          "format": "date-time"
        },
        "firstOccurred": {
          "type": "string",
          "format": "date-time"
        },
        "resolvedAt": {
          "type": "string",
          "format": "date-time",
          "description": "The time at which the alert was resolved. Only set if ViolationState is RESOLVED."
        },
        "state": {
          "$ref": "#/definitions/storageViolationState"
        },
        "snoozeTill": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "storageAlertDeployment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "namespace": {
          "type": "string",
          "description": "This field has to be duplicated in Alert for scope management and search."
        },
        "namespaceId": {
          "type": "string",
          "description": "This field has to be duplicated in Alert for scope management and search."
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "clusterId": {
          "type": "string",
          "description": "This field has to be duplicated in Alert for scope management and search."
        },
        "clusterName": {
          "type": "string",
          "description": "This field has to be duplicated in Alert for scope management and search."
        },
        "containers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AlertDeploymentContainer"
          }
        },
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "inactive": {
          "type": "boolean"
        }
      }
    },
    "storageBooleanOperator": {
      "type": "string",
      "enum": [
        "OR",
        "AND"
      ],
      "default": "OR"
    },
    "storageContainer": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "config": {
          "$ref": "#/definitions/storageContainerConfig"
        },
        "image": {
          "$ref": "#/definitions/storageContainerImage"
        },
        "securityContext": {
          "$ref": "#/definitions/storageSecurityContext"
        },
        "volumes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageVolume"
          }
        },
        "ports": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storagePortConfig"
          },
          "title": "Policies use the port config on the top-level deployment. // "
        },
        "secrets": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageEmbeddedSecret"
          }
        },
        "resources": {
          "$ref": "#/definitions/storageResources"
        },
        "name": {
          "type": "string"
        },
        "livenessProbe": {
          "$ref": "#/definitions/storageLivenessProbe"
        },
        "readinessProbe": {
          "$ref": "#/definitions/storageReadinessProbe"
        }
      }
    },
    "storageContainerConfig": {
      "type": "object",
      "properties": {
        "env": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ContainerConfigEnvironmentConfig"
          }
        },
        "command": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "args": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "directory": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "uid": {
          "type": "string",
          "format": "int64"
        },
        "appArmorProfile": {
          "type": "string"
        }
      }
    },
    "storageContainerImage": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "$ref": "#/definitions/storageImageName"
        },
        "notPullable": {
          "type": "boolean"
        },
        "isClusterLocal": {
          "type": "boolean"
        }
      },
      "title": "Next tag: 12"
    },
    "storageDeployment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "hash": {
          "type": "string",
          "format": "uint64"
        },
        "type": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "namespaceId": {
          "type": "string"
        },
        "orchestratorComponent": {
          "type": "boolean"
        },
        "replicas": {
          "type": "string",
          "format": "int64"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "podLabels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labelSelector": {
          "$ref": "#/definitions/storageLabelSelector"
        },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "clusterId": {
          "type": "string"
        },
        "clusterName": {
          "type": "string"
        },
        "containers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageContainer"
          }
        },
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "priority": {
          "type": "string",
          "format": "int64"
        },
        "inactive": {
          "type": "boolean"
        },
        "imagePullSecrets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "serviceAccount": {
          "type": "string"
        },
        "serviceAccountPermissionLevel": {
          "$ref": "#/definitions/storagePermissionLevel"
        },
        "automountServiceAccountToken": {
          "type": "boolean"
        },
        "hostNetwork": {
          "type": "boolean"
        },
        "hostPid": {
          "type": "boolean"
        },
        "hostIpc": {
          "type": "boolean"
        },
        "runtimeClass": {
          "type": "string"
        },
        "tolerations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageToleration"
          }
        },
        "ports": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storagePortConfig"
          }
        },
        "stateTimestamp": {
          "type": "string",
          "format": "int64",
          "title": "Internal use only // "
        },
        "riskScore": {
          "type": "number",
          "format": "float"
        }
      },
      "title": "Next available tag: 35"
    },
    "storageEmbeddedSecret": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "path": {
          "type": "string"
        }
      }
    },
    "storageEnforcementAction": {
      "type": "string",
      "enum": [
        "UNSET_ENFORCEMENT",
        "SCALE_TO_ZERO_ENFORCEMENT",
        "UNSATISFIABLE_NODE_CONSTRAINT_ENFORCEMENT",
        "KILL_POD_ENFORCEMENT",
        "FAIL_BUILD_ENFORCEMENT",
        "FAIL_KUBE_REQUEST_ENFORCEMENT",
        "FAIL_DEPLOYMENT_CREATE_ENFORCEMENT",
        "FAIL_DEPLOYMENT_UPDATE_ENFORCEMENT"
      ],
      "default": "UNSET_ENFORCEMENT",
      "description": " - FAIL_KUBE_REQUEST_ENFORCEMENT: FAIL_KUBE_REQUEST_ENFORCEMENT takes effect only if admission control webhook is enabled to listen on exec and port-forward events.\n - FAIL_DEPLOYMENT_CREATE_ENFORCEMENT: FAIL_DEPLOYMENT_CREATE_ENFORCEMENT takes effect only if admission control webhook is configured to enforce on object creates.\n - FAIL_DEPLOYMENT_UPDATE_ENFORCEMENT: FAIL_DEPLOYMENT_UPDATE_ENFORCEMENT takes effect only if admission control webhook is configured to enforce on object updates."
    },
    "storageEventSource": {
      "type": "string",
      "enum": [
        "NOT_APPLICABLE",
        "DEPLOYMENT_EVENT",
        "AUDIT_LOG_EVENT"
      ],
      "default": "NOT_APPLICABLE"
    },
    "storageExclusion": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "deployment": {
          "$ref": "#/definitions/storageExclusionDeployment"
        },
        "image": {
          "$ref": "#/definitions/storageExclusionImage"
        },
        "expiration": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "storageExclusionDeployment": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "scope": {
          "$ref": "#/definitions/storageScope"
        }
      }
    },
    "storageExclusionImage": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "storageImageName": {
      "type": "object",
      "properties": {
        "registry": {
          "type": "string"
        },
        "remote": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        },
        "fullName": {
          "type": "string"
        }
      }
    },
    "storageL4Protocol": {
      "type": "string",
      "enum": [
        "L4_PROTOCOL_UNKNOWN",
        "L4_PROTOCOL_TCP",
        "L4_PROTOCOL_UDP",
        "L4_PROTOCOL_ICMP",
        "L4_PROTOCOL_RAW",
        "L4_PROTOCOL_SCTP",
        "L4_PROTOCOL_ANY"
      ],
      "default": "L4_PROTOCOL_UNKNOWN"
    },
    "storageLabelSelector": {
      "type": "object",
      "properties": {
        "matchLabels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "This is actually a oneof, but we can't make it one due to backwards\ncompatibility constraints."
        },
        "requirements": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageLabelSelectorRequirement"
          }
        }
      },
      "description": "Next available tag: 3",
      "title": "Label selector components are joined with logical AND, see\n    https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/"
    },
    "storageLabelSelectorOperator": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "IN",
        "NOT_IN",
        "EXISTS",
        "NOT_EXISTS"
      ],
      "default": "UNKNOWN"
    },
    "storageLabelSelectorRequirement": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "op": {
          "$ref": "#/definitions/storageLabelSelectorOperator"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "Next available tag: 4"
    },
    "storageLifecycleStage": {
      "type": "string",
      "enum": [
        "DEPLOY",
        "BUILD",
        "RUNTIME"
      ],
      "default": "DEPLOY"
    },
    "storageLivenessProbe": {
      "type": "object",
      "properties": {
        "defined": {
          "type": "boolean"
        }
      }
    },
    "storageNetworkEntityInfoType": {
      "type": "string",
      "enum": [
        "UNKNOWN_TYPE",
        "DEPLOYMENT",
        "INTERNET",
        "LISTEN_ENDPOINT",
        "EXTERNAL_SOURCE",
        "INTERNAL_ENTITIES"
      ],
      "default": "UNKNOWN_TYPE",
      "title": "- INTERNAL_ENTITIES: INTERNAL_ENTITIES is for grouping all internal entities under a single network graph node"
    },
    "storagePermissionLevel": {
      "type": "string",
      "enum": [
        "UNSET",
        "NONE",
        "DEFAULT",
        "ELEVATED_IN_NAMESPACE",
        "ELEVATED_CLUSTER_WIDE",
        "CLUSTER_ADMIN"
      ],
      "default": "UNSET",
      "title": "For any update to PermissionLevel, also update:\n- pkg/searchbasedpolicies/builders/k8s_rbac.go\n- ui/src/messages/common.js"
    },
    "storagePolicy": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "rationale": {
          "type": "string"
        },
        "remediation": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "lifecycleStages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageLifecycleStage"
          }
        },
        "eventSource": {
          "$ref": "#/definitions/storageEventSource"
        },
        "exclusions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageExclusion"
          }
        },
        "scope": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageScope"
          }
        },
        "severity": {
          "$ref": "#/definitions/storageSeverity"
        },
        "enforcementActions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageEnforcementAction"
          },
          "description": "FAIL_DEPLOYMENT_CREATE_ENFORCEMENT takes effect only if admission control webhook is configured to enforce on object creates/updates.\nFAIL_KUBE_REQUEST_ENFORCEMENT takes effect only if admission control webhook is enabled to listen on exec and port-forward events.\nFAIL_DEPLOYMENT_UPDATE_ENFORCEMENT takes effect only if admission control webhook is configured to enforce on object updates."
        },
        "notifiers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "lastUpdated": {
          "type": "string",
          "format": "date-time"
        },
        "SORTName": {
          "type": "string",
          "description": "For internal use only."
        },
        "SORTLifecycleStage": {
          "type": "string",
          "description": "For internal use only."
        },
        "SORTEnforcement": {
          "type": "boolean",
          "description": "For internal use only."
        },
        "policyVersion": {
          "type": "string"
        },
        "policySections": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storagePolicySection"
          }
        },
        "mitreAttackVectors": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/PolicyMitreAttackVectors"
          }
        },
        "criteriaLocked": {
          "type": "boolean",
          "description": "Read-only field. If true, the policy's criteria fields are rendered read-only."
        },
        "mitreVectorsLocked": {
          "type": "boolean",
          "description": "Read-only field. If true, the policy's MITRE ATT&CK fields are rendered read-only."
        },
        "isDefault": {
          "type": "boolean",
          "description": "Read-only field. Indicates the policy is a default policy if true and a custom policy if false."
        }
      }
    },
    "storagePolicyGroup": {
      "type": "object",
      "properties": {
        "fieldName": {
          "type": "string"
        },
        "booleanOperator": {
          "$ref": "#/definitions/storageBooleanOperator"
        },
        "negate": {
          "type": "boolean"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storagePolicyValue"
          }
        }
      }
    },
    "storagePolicySection": {
      "type": "object",
      "properties": {
        "sectionName": {
          "type": "string"
        },
        "policyGroups": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storagePolicyGroup"
          }
        }
      }
    },
    "storagePolicyValue": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        }
      }
    },
    "storagePortConfig": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "containerPort": {
          "type": "integer",
          "format": "int32"
        },
        "protocol": {
          "type": "string"
        },
        "exposure": {
          "$ref": "#/definitions/PortConfigExposureLevel"
        },
        "exposedPort": {
          "type": "integer",
          "format": "int32"
        },
        "exposureInfos": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/PortConfigExposureInfo"
          }
        }
      },
      "title": "Next Available Tag: 6"
    },
    "storageProcessIndicator": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "A unique UUID for the Indicator message"
        },
        "deploymentId": {
          "type": "string"
        },
        "containerName": {
          "type": "string"
        },
        "podId": {
          "type": "string",
          "title": "Pod name"
        },
        "podUid": {
          "type": "string"
        },
        "signal": {
          "$ref": "#/definitions/storageProcessSignal",
          "title": "A process signal message passed from Collector to Sensor"
        },
        "clusterId": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "containerStartTime": {
          "type": "string",
          "format": "date-time"
        },
        "imageId": {
          "type": "string"
        }
      },
      "title": "Next available tag: 13"
    },
    "storageProcessSignal": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "A unique UUID for identifying the message\nWe have this here instead of at the top level\nbecause we want to have each message to be\nself contained."
        },
        "containerId": {
          "type": "string",
          "title": "ID of container associated with this process"
        },
        "time": {
          "type": "string",
          "format": "date-time",
          "title": "Process creation time"
        },
        "name": {
          "type": "string",
          "title": "Process name"
        },
        "args": {
          "type": "string",
          "title": "Process arguments"
        },
        "execFilePath": {
          "type": "string",
          "title": "Process executable file path"
        },
        "pid": {
          "type": "integer",
          "format": "int64",
          "title": "Host process ID"
        },
        "uid": {
          "type": "integer",
          "format": "int64",
          "title": "Real user ID"
        },
        "gid": {
          "type": "integer",
          "format": "int64",
          "title": "Real group ID"
        },
        "lineage": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Process Lineage"
        },
        "scraped": {
          "type": "boolean",
          "title": "Signal origin"
        },
        "lineageInfo": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ProcessSignalLineageInfo"
          },
          "title": "Process LineageInfo"
        }
      }
    },
    "storageReadinessProbe": {
      "type": "object",
      "properties": {
        "defined": {
          "type": "boolean"
        }
      }
    },
    "storageResources": {
      "type": "object",
      "properties": {
        "cpuCoresRequest": {
          "type": "number",
          "format": "float"
        },
        "cpuCoresLimit": {
          "type": "number",
          "format": "float"
        },
        "memoryMbRequest": {
          "type": "number",
          "format": "float"
        },
        "memoryMbLimit": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "storageScope": {
      "type": "object",
      "properties": {
        "cluster": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "label": {
          "$ref": "#/definitions/storageScopeLabel"
        }
      }
    },
    "storageScopeLabel": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "storageSecurityContext": {
      "type": "object",
      "properties": {
        "privileged": {
          "type": "boolean"
        },
        "selinux": {
          "$ref": "#/definitions/SecurityContextSELinux"
        },
        "dropCapabilities": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "addCapabilities": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "readOnlyRootFilesystem": {
          "type": "boolean"
        },
        "seccompProfile": {
          "$ref": "#/definitions/SecurityContextSeccompProfile"
        },
        "allowPrivilegeEscalation": {
          "type": "boolean"
        }
      }
    },
    "storageSeverity": {
      "type": "string",
      "enum": [
        "UNSET_SEVERITY",
        "LOW_SEVERITY",
        "MEDIUM_SEVERITY",
        "HIGH_SEVERITY",
        "CRITICAL_SEVERITY"
      ],
      "default": "UNSET_SEVERITY"
    },
    "storageTaintEffect": {
      "type": "string",
      "enum": [
        "UNKNOWN_TAINT_EFFECT",
        "NO_SCHEDULE_TAINT_EFFECT",
        "PREFER_NO_SCHEDULE_TAINT_EFFECT",
        "NO_EXECUTE_TAINT_EFFECT"
      ],
      "default": "UNKNOWN_TAINT_EFFECT"
    },
    "storageToleration": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "operator": {
          "$ref": "#/definitions/storageTolerationOperator"
        },
        "value": {
          "type": "string"
        },
        "taintEffect": {
          "$ref": "#/definitions/storageTaintEffect"
        }
      }
    },
    "storageTolerationOperator": {
      "type": "string",
      "enum": [
        "TOLERATION_OPERATION_UNKNOWN",
        "TOLERATION_OPERATOR_EXISTS",
        "TOLERATION_OPERATOR_EQUAL"
      ],
      "default": "TOLERATION_OPERATION_UNKNOWN"
    },
    "storageViolationState": {
      "type": "string",
      "enum": [
        "ACTIVE",
        "SNOOZED",
        "RESOLVED",
        "ATTEMPTED"
      ],
      "default": "ACTIVE"
    },
    "storageVolume": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "destination": {
          "type": "string"
        },
        "readOnly": {
          "type": "boolean"
        },
        "type": {
          "type": "string"
        },
        "mountPropagation": {
          "$ref": "#/definitions/VolumeMountPropagation"
        }
      }
    },
    "v1BuildDetectionRequest": {
      "type": "object",
      "properties": {
        "image": {
          "$ref": "#/definitions/storageContainerImage"
        },
        "imageName": {
          "type": "string"
        },
        "noExternalMetadata": {
          "type": "boolean"
        },
        "sendNotifications": {
          "type": "boolean"
        },
        "force": {
          "type": "boolean"
        },
        "policyCategories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "cluster": {
          "type": "string",
          "description": "Cluster to delegate scan to, may be the cluster's name or ID."
        }
      }
    },
    "v1BuildDetectionResponse": {
      "type": "object",
      "properties": {
        "alerts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageAlert"
          }
        }
      }
    },
    "v1DeployDetectionRemark": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "permissionLevel": {
          "type": "string"
        },
        "appliedNetworkPolicies": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1DeployDetectionRequest": {
      "type": "object",
      "properties": {
        "deployment": {
          "$ref": "#/definitions/storageDeployment"
        },
        "noExternalMetadata": {
          "type": "boolean"
        },
        "enforcementOnly": {
          "type": "boolean"
        },
        "clusterId": {
          "type": "string"
        }
      }
    },
    "v1DeployDetectionResponse": {
      "type": "object",
      "properties": {
        "runs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/DeployDetectionResponseRun"
          }
        },
        "ignoredObjectRefs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The reference will be in the format: namespace/name[<group>/<version>, Kind=<kind>]."
        },
        "remarks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DeployDetectionRemark"
          }
        }
      }
    },
    "v1DeployYAMLDetectionRequest": {
      "type": "object",
      "properties": {
        "yaml": {
          "type": "string"
        },
        "noExternalMetadata": {
          "type": "boolean"
        },
        "enforcementOnly": {
          "type": "boolean"
        },
        "force": {
          "type": "boolean"
        },
        "policyCategories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "cluster": {
          "type": "string",
          "description": "Cluster to delegate scan to, may be the cluster's name or ID."
        },
        "namespace": {
          "type": "string"
        }
      }
    }
  }
}
