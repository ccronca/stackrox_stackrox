{
  "swagger": "2.0",
  "info": {
    "title": "api/v1/metadata_service.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "MetadataService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/backup/status": {
      "get": {
        "operationId": "MetadataService_GetDatabaseBackupStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DatabaseBackupStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "MetadataService"
        ]
      }
    },
    "/v1/central-capabilities": {
      "get": {
        "operationId": "MetadataService_GetCentralCapabilities",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CentralServicesCapabilities"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "MetadataService"
        ]
      }
    },
    "/v1/database/status": {
      "get": {
        "operationId": "MetadataService_GetDatabaseStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DatabaseStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "MetadataService"
        ]
      }
    },
    "/v1/metadata": {
      "get": {
        "operationId": "MetadataService_GetMetadata",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Metadata"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "MetadataService"
        ]
      }
    },
    "/v1/tls-challenge": {
      "get": {
        "summary": "TLSChallenge",
        "description": "Returns all trusted CAs, i.e., secret/additional-ca and Central's cert\nchain. This is necessary if Central is running behind a load balancer\nwith self-signed certificates. Does not require authentication.",
        "operationId": "MetadataService_TLSChallenge",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1TLSChallengeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "challengeToken",
            "description": "generated challenge token by the service asking for TLS certs",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "MetadataService"
        ]
      }
    }
  },
  "definitions": {
    "CentralServicesCapabilitiesCapabilityStatus": {
      "type": "string",
      "enum": [
        "CapabilityAvailable",
        "CapabilityDisabled"
      ],
      "default": "CapabilityAvailable",
      "description": " - CapabilityAvailable: CapabilityAvailable means that UI and APIs should be available for users to use.\nThis does not automatically mean that the functionality is 100% available and any calls to APIs will result\nin successful execution. Rather it means that users should be allowed to leverage the functionality as\nopposed to CapabilityDisabled when functionality should be blocked.\n - CapabilityDisabled: CapabilityDisabled means the corresponding UI should be disabled and attempts to use related APIs\nshould lead to errors."
    },
    "DatabaseStatusDatabaseType": {
      "type": "string",
      "enum": [
        "Hidden",
        "RocksDB",
        "PostgresDB"
      ],
      "default": "Hidden"
    },
    "MetadataLicenseStatus": {
      "type": "string",
      "enum": [
        "NONE",
        "INVALID",
        "EXPIRED",
        "RESTARTING",
        "VALID"
      ],
      "default": "NONE"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "storageBackupInfo": {
      "type": "object",
      "properties": {
        "backupLastRunAt": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "$ref": "#/definitions/storageOperationStatus"
        },
        "requestor": {
          "$ref": "#/definitions/storageSlimUser"
        }
      }
    },
    "storageOperationStatus": {
      "type": "string",
      "enum": [
        "FAIL",
        "PASS"
      ],
      "default": "FAIL"
    },
    "storageSlimUser": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1CentralServicesCapabilities": {
      "type": "object",
      "properties": {
        "centralScanningCanUseContainerIamRoleForEcr": {
          "$ref": "#/definitions/CentralServicesCapabilitiesCapabilityStatus",
          "description": "Ability to use container IAM role for scanning images from Amazon ECR using Scanner deployed as part of Central\nServices.\nNote that CapabilityAvailable status does not mean that Scanner container actually has IAM role attached. Such\ncheck isn't implemented at the moment and an attempt to use the corresponding setting may lead to errors when\nthe role is not actually there. It's user's responsibility to check the presence of role and integration status\nwhen the corresponding setting is enabled."
        },
        "centralCanUseCloudBackupIntegrations": {
          "$ref": "#/definitions/CentralServicesCapabilitiesCapabilityStatus",
          "description": "Ability to configure and perform Central backups to Amazon S3 or Google Cloud Storage."
        },
        "centralCanDisplayDeclarativeConfigHealth": {
          "$ref": "#/definitions/CentralServicesCapabilitiesCapabilityStatus",
          "description": "Ability to present health of declarative config resources (e.g. auth providers, roles, access scopes, permission\nsets, notifiers) to the user."
        },
        "centralCanUpdateCert": {
          "$ref": "#/definitions/CentralServicesCapabilitiesCapabilityStatus",
          "title": "Ability to trigger generation of new certificates"
        }
      },
      "description": "Provides availability of certain functionality of Central Services in the current configuration.\nThe initial intended use is to disable certain functionality that does not make sense in the Cloud Service context."
    },
    "v1DatabaseBackupStatus": {
      "type": "object",
      "properties": {
        "backupInfo": {
          "$ref": "#/definitions/storageBackupInfo"
        }
      }
    },
    "v1DatabaseStatus": {
      "type": "object",
      "properties": {
        "databaseAvailable": {
          "type": "boolean",
          "title": "indicates whether or not central can communicate with the database"
        },
        "databaseType": {
          "$ref": "#/definitions/DatabaseStatusDatabaseType",
          "title": "type of database serving central"
        },
        "databaseVersion": {
          "type": "string",
          "title": "version of the database"
        }
      }
    },
    "v1Metadata": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "buildFlavor": {
          "type": "string"
        },
        "releaseBuild": {
          "type": "boolean"
        },
        "licenseStatus": {
          "$ref": "#/definitions/MetadataLicenseStatus",
          "title": "Do not use this field. It will always contain \"VALID\""
        }
      }
    },
    "v1TLSChallengeResponse": {
      "type": "object",
      "properties": {
        "trustInfoSerialized": {
          "type": "string",
          "format": "byte",
          "title": "signed data which is returned to the caller, is validated against the signature"
        },
        "signature": {
          "type": "string",
          "format": "byte"
        }
      }
    }
  }
}
