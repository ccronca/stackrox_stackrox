{
  "swagger": "2.0",
  "info": {
    "title": "api/v1/authprovider_service.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "AuthProviderService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/authProviders": {
      "get": {
        "operationId": "AuthProviderService_GetAuthProviders",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetAuthProvidersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AuthProviderService"
        ]
      },
      "post": {
        "operationId": "AuthProviderService_PostAuthProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageAuthProvider"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "provider",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/storageAuthProvider"
            }
          }
        ],
        "tags": [
          "AuthProviderService"
        ]
      }
    },
    "/v1/authProviders/exchangeToken": {
      "post": {
        "operationId": "AuthProviderService_ExchangeToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ExchangeTokenResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ExchangeTokenRequest"
            }
          }
        ],
        "tags": [
          "AuthProviderService"
        ]
      }
    },
    "/v1/authProviders/{id}": {
      "get": {
        "operationId": "AuthProviderService_GetAuthProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageAuthProvider"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AuthProviderService"
        ]
      },
      "delete": {
        "operationId": "AuthProviderService_DeleteAuthProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Empty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "AuthProviderService"
        ]
      },
      "put": {
        "operationId": "AuthProviderService_PutAuthProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageAuthProvider"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "@gotags: sql:\"pk\"",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthProviderServicePutAuthProviderBody"
            }
          }
        ],
        "tags": [
          "AuthProviderService"
        ]
      },
      "patch": {
        "operationId": "AuthProviderService_UpdateAuthProvider",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageAuthProvider"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthProviderServiceUpdateAuthProviderBody"
            }
          }
        ],
        "tags": [
          "AuthProviderService"
        ]
      }
    },
    "/v1/availableAuthProviders": {
      "get": {
        "operationId": "AuthProviderService_ListAvailableProviderTypes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AvailableProviderTypesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "AuthProviderService"
        ]
      }
    },
    "/v1/login/authproviders": {
      "get": {
        "operationId": "AuthProviderService_GetLoginAuthProviders",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetLoginAuthProvidersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "AuthProviderService"
        ]
      }
    }
  },
  "definitions": {
    "AuthProviderRequiredAttribute": {
      "type": "object",
      "properties": {
        "attributeKey": {
          "type": "string"
        },
        "attributeValue": {
          "type": "string"
        }
      },
      "description": "RequiredAttribute allows to specify a set of attributes which ALL are required to be returned\nby the auth provider.\nIf any attribute is missing within the external claims of the token issued by Central, the\nauthentication request to this IdP is considered failed."
    },
    "AuthProviderServicePutAuthProviderBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "@gotags: sql:\"unique\""
        },
        "type": {
          "type": "string"
        },
        "uiEndpoint": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "config": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "@gotags: scrub:\"map-values\""
        },
        "loginUrl": {
          "type": "string",
          "description": "The login URL will be provided by the backend, and may not be specified in a request."
        },
        "validated": {
          "type": "boolean"
        },
        "extraUiEndpoints": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "UI endpoints which to allow in addition to `ui_endpoint`. I.e., if a login request\nis coming from any of these, the auth request will use these for the callback URL,\nnot ui_endpoint."
        },
        "active": {
          "type": "boolean"
        },
        "requiredAttributes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AuthProviderRequiredAttribute"
          }
        },
        "traits": {
          "$ref": "#/definitions/storageTraits"
        },
        "claimMappings": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Specifies claims from IdP token that will be copied to Rox token attributes.\n\nEach key in this map contains a path in IdP token we want to map. Path is separated by \".\" symbol.\nFor example, if IdP token payload looks like:\n\n\n{\n\n     \"a\": {\n\n         \"b\" : \"c\",\n\n         \"d\": true,\n\n         \"e\": [ \"val1\", \"val2\", \"val3\" ],\n\n         \"f\": [ true, false, false ],\n\n         \"g\": 123.0,\n\n         \"h\": [ 1, 2, 3]\n\n     }\n\n}\n\n\nthen \"a.b\" would be a valid key and \"a.z\" is not.\n\nWe support the following types of claims:\n* string(path \"a.b\")\n* bool(path \"a.d\")\n* string array(path \"a.e\")\n* bool array (path \"a.f.\")\n\nWe do NOT support the following types of claims:\n* complex claims(path \"a\")\n* float/integer claims(path \"a.g\")\n* float/integer array claims(path \"a.h\")\n\nEach value in this map contains a Rox token attribute name we want to add claim to.\nIf, for example, value is \"groups\", claim would be found in \"external_user.Attributes.groups\" in token.\n\nNote: we only support this feature for OIDC auth provider."
        },
        "lastUpdated": {
          "type": "string",
          "format": "date-time",
          "description": "Last updated indicates the last time the auth provider has been updated.\n\nIn case there have been tokens issued by an auth provider _before_ this timestamp, they will be considered\ninvalid. Subsequently, all clients will have to re-issue their tokens (either by refreshing or by an additional\nlogin attempt)."
        }
      },
      "description": "Next Tag: 15."
    },
    "AuthProviderServiceUpdateAuthProviderBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "AvailableProviderTypesResponseAuthProviderType": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "suggestedAttributes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "GetLoginAuthProvidersResponseLoginAuthProvider": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "loginUrl": {
          "type": "string"
        }
      }
    },
    "TraitsMutabilityMode": {
      "type": "string",
      "enum": [
        "ALLOW_MUTATE",
        "ALLOW_MUTATE_FORCED"
      ],
      "default": "ALLOW_MUTATE",
      "description": "EXPERIMENTAL.\nNOTE: Please refer from using MutabilityMode for the time being. It will be replaced in the future (ROX-14276).\nMutabilityMode specifies whether and how an object can be modified. Default\nis ALLOW_MUTATE and means there are no modification restrictions; this is equivalent\nto the absence of MutabilityMode specification. ALLOW_MUTATE_FORCED forbids all\nmodifying operations except object removal with force bit on.\n\nBe careful when changing the state of this field. For example, modifying an\nobject from ALLOW_MUTATE to ALLOW_MUTATE_FORCED is allowed but will prohibit any further\nchanges to it, including modifying it back to ALLOW_MUTATE."
    },
    "TraitsOrigin": {
      "type": "string",
      "enum": [
        "IMPERATIVE",
        "DEFAULT",
        "DECLARATIVE",
        "DECLARATIVE_ORPHANED"
      ],
      "default": "IMPERATIVE",
      "description": "Origin specifies the origin of an object.\nObjects can have four different origins:\n- IMPERATIVE: the object was created via the API. This is assumed by default.\n- DEFAULT: the object is a default object, such as default roles, access scopes etc.\n- DECLARATIVE: the object is created via declarative configuration.\n- DECLARATIVE_ORPHANED: the object is created via declarative configuration and then unsuccessfully deleted(for example, because it is referenced by another object)\nBased on the origin, different rules apply to the objects.\nObjects with the DECLARATIVE origin are not allowed to be modified via API, only via declarative configuration.\nAdditionally, they may not reference objects with the IMPERATIVE origin.\nObjects with the DEFAULT origin are not allowed to be modified via either API or declarative configuration.\nThey may be referenced by all other objects.\nObjects with the IMPERATIVE origin are allowed to be modified via API, not via declarative configuration.\nThey may reference all other objects.\nObjects with the DECLARATIVE_ORPHANED origin are not allowed to be modified via either API or declarative configuration.\nDECLARATIVE_ORPHANED resource can become DECLARATIVE again if it is redefined in declarative configuration.\nObjects with this origin will be cleaned up from the system immediately after they are not referenced by other resources anymore.\nThey may be referenced by all other objects."
    },
    "TraitsVisibility": {
      "type": "string",
      "enum": [
        "VISIBLE",
        "HIDDEN"
      ],
      "default": "VISIBLE",
      "description": "EXPERIMENTAL.\nvisibility allows to specify whether the object should be visible for certain APIs."
    },
    "UserInfoResourceToAccess": {
      "type": "object",
      "properties": {
        "resourceToAccess": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/storageAccess"
          }
        }
      },
      "description": "ResourceToAccess represents a collection of permissions. It is wire\ncompatible with the old format of storage.Role and replaces it in\nplaces where only aggregated permissions are required."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "storageAccess": {
      "type": "string",
      "enum": [
        "NO_ACCESS",
        "READ_ACCESS",
        "READ_WRITE_ACCESS"
      ],
      "default": "NO_ACCESS"
    },
    "storageAuthProvider": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "@gotags: sql:\"pk\""
        },
        "name": {
          "type": "string",
          "title": "@gotags: sql:\"unique\""
        },
        "type": {
          "type": "string"
        },
        "uiEndpoint": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "config": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "@gotags: scrub:\"map-values\""
        },
        "loginUrl": {
          "type": "string",
          "description": "The login URL will be provided by the backend, and may not be specified in a request."
        },
        "validated": {
          "type": "boolean"
        },
        "extraUiEndpoints": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "UI endpoints which to allow in addition to `ui_endpoint`. I.e., if a login request\nis coming from any of these, the auth request will use these for the callback URL,\nnot ui_endpoint."
        },
        "active": {
          "type": "boolean"
        },
        "requiredAttributes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AuthProviderRequiredAttribute"
          }
        },
        "traits": {
          "$ref": "#/definitions/storageTraits"
        },
        "claimMappings": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Specifies claims from IdP token that will be copied to Rox token attributes.\n\nEach key in this map contains a path in IdP token we want to map. Path is separated by \".\" symbol.\nFor example, if IdP token payload looks like:\n\n\n{\n\n     \"a\": {\n\n         \"b\" : \"c\",\n\n         \"d\": true,\n\n         \"e\": [ \"val1\", \"val2\", \"val3\" ],\n\n         \"f\": [ true, false, false ],\n\n         \"g\": 123.0,\n\n         \"h\": [ 1, 2, 3]\n\n     }\n\n}\n\n\nthen \"a.b\" would be a valid key and \"a.z\" is not.\n\nWe support the following types of claims:\n* string(path \"a.b\")\n* bool(path \"a.d\")\n* string array(path \"a.e\")\n* bool array (path \"a.f.\")\n\nWe do NOT support the following types of claims:\n* complex claims(path \"a\")\n* float/integer claims(path \"a.g\")\n* float/integer array claims(path \"a.h\")\n\nEach value in this map contains a Rox token attribute name we want to add claim to.\nIf, for example, value is \"groups\", claim would be found in \"external_user.Attributes.groups\" in token.\n\nNote: we only support this feature for OIDC auth provider."
        },
        "lastUpdated": {
          "type": "string",
          "format": "date-time",
          "description": "Last updated indicates the last time the auth provider has been updated.\n\nIn case there have been tokens issued by an auth provider _before_ this timestamp, they will be considered\ninvalid. Subsequently, all clients will have to re-issue their tokens (either by refreshing or by an additional\nlogin attempt)."
        }
      },
      "description": "Next Tag: 15."
    },
    "storageServiceIdentity": {
      "type": "object",
      "properties": {
        "serialStr": {
          "type": "string",
          "title": "The serial number in decimal representation. // @gotags: sql:\"pk\""
        },
        "serial": {
          "type": "string",
          "format": "int64"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/storageServiceType"
        },
        "initBundleId": {
          "type": "string"
        }
      }
    },
    "storageServiceType": {
      "type": "string",
      "enum": [
        "UNKNOWN_SERVICE",
        "SENSOR_SERVICE",
        "CENTRAL_SERVICE",
        "CENTRAL_DB_SERVICE",
        "REMOTE_SERVICE",
        "COLLECTOR_SERVICE",
        "MONITORING_UI_SERVICE",
        "MONITORING_DB_SERVICE",
        "MONITORING_CLIENT_SERVICE",
        "BENCHMARK_SERVICE",
        "SCANNER_SERVICE",
        "SCANNER_DB_SERVICE",
        "ADMISSION_CONTROL_SERVICE",
        "SCANNER_V4_INDEXER_SERVICE",
        "SCANNER_V4_MATCHER_SERVICE",
        "SCANNER_V4_DB_SERVICE"
      ],
      "default": "UNKNOWN_SERVICE",
      "title": "Next available tag: 16"
    },
    "storageTraits": {
      "type": "object",
      "properties": {
        "mutabilityMode": {
          "$ref": "#/definitions/TraitsMutabilityMode"
        },
        "visibility": {
          "$ref": "#/definitions/TraitsVisibility"
        },
        "origin": {
          "$ref": "#/definitions/TraitsOrigin"
        }
      }
    },
    "storageUserInfo": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "friendlyName": {
          "type": "string"
        },
        "permissions": {
          "$ref": "#/definitions/UserInfoResourceToAccess"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageUserInfoRole"
          }
        }
      }
    },
    "storageUserInfoRole": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "resourceToAccess": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/storageAccess"
          }
        }
      },
      "description": "Role is wire compatible with the old format of storage.Role and\nhence only includes role name and associated permissions."
    },
    "v1AuthStatus": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "serviceId": {
          "$ref": "#/definitions/storageServiceIdentity"
        },
        "expires": {
          "type": "string",
          "format": "date-time"
        },
        "refreshUrl": {
          "type": "string"
        },
        "authProvider": {
          "$ref": "#/definitions/storageAuthProvider"
        },
        "userInfo": {
          "$ref": "#/definitions/storageUserInfo"
        },
        "userAttributes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserAttribute"
          }
        },
        "idpToken": {
          "type": "string",
          "description": "Token returned to ACS by the underlying identity provider. This field is set only in a few,\nspecific contexts. Do not rely on this field being present in the response."
        }
      }
    },
    "v1AvailableProviderTypesResponse": {
      "type": "object",
      "properties": {
        "authProviderTypes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AvailableProviderTypesResponseAuthProviderType"
          }
        }
      }
    },
    "v1Empty": {
      "type": "object"
    },
    "v1ExchangeTokenRequest": {
      "type": "object",
      "properties": {
        "externalToken": {
          "type": "string",
          "description": "The external authentication token. The server will mask the value of this credential in responses and logs.\n\n@gotags: scrub:\"always\""
        },
        "type": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1ExchangeTokenResponse": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        },
        "clientState": {
          "type": "string"
        },
        "test": {
          "type": "boolean"
        },
        "user": {
          "$ref": "#/definitions/v1AuthStatus"
        }
      }
    },
    "v1GetAuthProvidersResponse": {
      "type": "object",
      "properties": {
        "authProviders": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageAuthProvider"
          }
        }
      }
    },
    "v1GetLoginAuthProvidersResponse": {
      "type": "object",
      "properties": {
        "authProviders": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/GetLoginAuthProvidersResponseLoginAuthProvider"
          }
        }
      }
    },
    "v1UserAttribute": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    }
  }
}
