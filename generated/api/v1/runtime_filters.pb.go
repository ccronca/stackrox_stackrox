// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v1/runtime_filters.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	storage "github.com/stackrox/rox/generated/storage"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetRuntimeFiltersRequest struct {
	ClusterName          string   `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRuntimeFiltersRequest) Reset()         { *m = GetRuntimeFiltersRequest{} }
func (m *GetRuntimeFiltersRequest) String() string { return proto.CompactTextString(m) }
func (*GetRuntimeFiltersRequest) ProtoMessage()    {}
func (*GetRuntimeFiltersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_119ccf35179a0b5e, []int{0}
}
func (m *GetRuntimeFiltersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRuntimeFiltersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRuntimeFiltersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRuntimeFiltersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRuntimeFiltersRequest.Merge(m, src)
}
func (m *GetRuntimeFiltersRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetRuntimeFiltersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRuntimeFiltersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRuntimeFiltersRequest proto.InternalMessageInfo

func (m *GetRuntimeFiltersRequest) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

func (m *GetRuntimeFiltersRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetRuntimeFiltersRequest) Clone() *GetRuntimeFiltersRequest {
	if m == nil {
		return nil
	}
	cloned := new(GetRuntimeFiltersRequest)
	*cloned = *m

	return cloned
}

type GetRuntimeFiltersResponse struct {
	Filters              []*storage.RuntimeFilter `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *GetRuntimeFiltersResponse) Reset()         { *m = GetRuntimeFiltersResponse{} }
func (m *GetRuntimeFiltersResponse) String() string { return proto.CompactTextString(m) }
func (*GetRuntimeFiltersResponse) ProtoMessage()    {}
func (*GetRuntimeFiltersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_119ccf35179a0b5e, []int{1}
}
func (m *GetRuntimeFiltersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRuntimeFiltersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRuntimeFiltersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRuntimeFiltersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRuntimeFiltersResponse.Merge(m, src)
}
func (m *GetRuntimeFiltersResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetRuntimeFiltersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRuntimeFiltersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRuntimeFiltersResponse proto.InternalMessageInfo

func (m *GetRuntimeFiltersResponse) GetFilters() []*storage.RuntimeFilter {
	if m != nil {
		return m.Filters
	}
	return nil
}

func (m *GetRuntimeFiltersResponse) MessageClone() proto.Message {
	return m.Clone()
}
func (m *GetRuntimeFiltersResponse) Clone() *GetRuntimeFiltersResponse {
	if m == nil {
		return nil
	}
	cloned := new(GetRuntimeFiltersResponse)
	*cloned = *m

	if m.Filters != nil {
		cloned.Filters = make([]*storage.RuntimeFilter, len(m.Filters))
		for idx, v := range m.Filters {
			cloned.Filters[idx] = v.Clone()
		}
	}
	return cloned
}

type PostRuntimeFilterRequest struct {
	ClusterName          string                 `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	Filter               *storage.RuntimeFilter `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *PostRuntimeFilterRequest) Reset()         { *m = PostRuntimeFilterRequest{} }
func (m *PostRuntimeFilterRequest) String() string { return proto.CompactTextString(m) }
func (*PostRuntimeFilterRequest) ProtoMessage()    {}
func (*PostRuntimeFilterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_119ccf35179a0b5e, []int{2}
}
func (m *PostRuntimeFilterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostRuntimeFilterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PostRuntimeFilterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PostRuntimeFilterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostRuntimeFilterRequest.Merge(m, src)
}
func (m *PostRuntimeFilterRequest) XXX_Size() int {
	return m.Size()
}
func (m *PostRuntimeFilterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PostRuntimeFilterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PostRuntimeFilterRequest proto.InternalMessageInfo

func (m *PostRuntimeFilterRequest) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

func (m *PostRuntimeFilterRequest) GetFilter() *storage.RuntimeFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *PostRuntimeFilterRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *PostRuntimeFilterRequest) Clone() *PostRuntimeFilterRequest {
	if m == nil {
		return nil
	}
	cloned := new(PostRuntimeFilterRequest)
	*cloned = *m

	cloned.Filter = m.Filter.Clone()
	return cloned
}

type DeleteRuntimeFilterRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteRuntimeFilterRequest) Reset()         { *m = DeleteRuntimeFilterRequest{} }
func (m *DeleteRuntimeFilterRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteRuntimeFilterRequest) ProtoMessage()    {}
func (*DeleteRuntimeFilterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_119ccf35179a0b5e, []int{3}
}
func (m *DeleteRuntimeFilterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteRuntimeFilterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteRuntimeFilterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteRuntimeFilterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRuntimeFilterRequest.Merge(m, src)
}
func (m *DeleteRuntimeFilterRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteRuntimeFilterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRuntimeFilterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRuntimeFilterRequest proto.InternalMessageInfo

func (m *DeleteRuntimeFilterRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DeleteRuntimeFilterRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *DeleteRuntimeFilterRequest) Clone() *DeleteRuntimeFilterRequest {
	if m == nil {
		return nil
	}
	cloned := new(DeleteRuntimeFilterRequest)
	*cloned = *m

	return cloned
}

type PutRuntimeFilterRequest struct {
	Id                   string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClusterName          string                 `protobuf:"bytes,2,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	Filter               *storage.RuntimeFilter `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *PutRuntimeFilterRequest) Reset()         { *m = PutRuntimeFilterRequest{} }
func (m *PutRuntimeFilterRequest) String() string { return proto.CompactTextString(m) }
func (*PutRuntimeFilterRequest) ProtoMessage()    {}
func (*PutRuntimeFilterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_119ccf35179a0b5e, []int{4}
}
func (m *PutRuntimeFilterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PutRuntimeFilterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PutRuntimeFilterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PutRuntimeFilterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutRuntimeFilterRequest.Merge(m, src)
}
func (m *PutRuntimeFilterRequest) XXX_Size() int {
	return m.Size()
}
func (m *PutRuntimeFilterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PutRuntimeFilterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PutRuntimeFilterRequest proto.InternalMessageInfo

func (m *PutRuntimeFilterRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PutRuntimeFilterRequest) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

func (m *PutRuntimeFilterRequest) GetFilter() *storage.RuntimeFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *PutRuntimeFilterRequest) MessageClone() proto.Message {
	return m.Clone()
}
func (m *PutRuntimeFilterRequest) Clone() *PutRuntimeFilterRequest {
	if m == nil {
		return nil
	}
	cloned := new(PutRuntimeFilterRequest)
	*cloned = *m

	cloned.Filter = m.Filter.Clone()
	return cloned
}

func init() {
	proto.RegisterType((*GetRuntimeFiltersRequest)(nil), "v1.GetRuntimeFiltersRequest")
	proto.RegisterType((*GetRuntimeFiltersResponse)(nil), "v1.GetRuntimeFiltersResponse")
	proto.RegisterType((*PostRuntimeFilterRequest)(nil), "v1.PostRuntimeFilterRequest")
	proto.RegisterType((*DeleteRuntimeFilterRequest)(nil), "v1.DeleteRuntimeFilterRequest")
	proto.RegisterType((*PutRuntimeFilterRequest)(nil), "v1.PutRuntimeFilterRequest")
}

func init() { proto.RegisterFile("api/v1/runtime_filters.proto", fileDescriptor_119ccf35179a0b5e) }

var fileDescriptor_119ccf35179a0b5e = []byte{
	// 437 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x4f, 0x6b, 0xd4, 0x40,
	0x18, 0xc6, 0x3b, 0x59, 0xa8, 0xf4, 0xad, 0x88, 0x9d, 0xa2, 0x8e, 0x71, 0x37, 0xac, 0xa3, 0x87,
	0xb2, 0xc8, 0xac, 0xa9, 0xb7, 0x82, 0x17, 0xf1, 0xcf, 0x49, 0x29, 0xf1, 0x22, 0x22, 0x2c, 0xd3,
	0xdd, 0xd7, 0x65, 0x30, 0xc9, 0xc4, 0xcc, 0x24, 0x28, 0xb6, 0x17, 0xbf, 0x82, 0x17, 0x3f, 0x8a,
	0x1f, 0xc1, 0xa3, 0xe0, 0x17, 0x90, 0xd5, 0x0f, 0x22, 0x49, 0x46, 0xe8, 0xba, 0xc9, 0x76, 0xaf,
	0xef, 0x9f, 0xe7, 0xf7, 0xbc, 0x79, 0x26, 0xd0, 0x97, 0x99, 0x1a, 0x97, 0xe1, 0x38, 0x2f, 0x52,
	0xab, 0x12, 0x9c, 0xbc, 0x55, 0xb1, 0xc5, 0xdc, 0x88, 0x2c, 0xd7, 0x56, 0x53, 0xaf, 0x0c, 0xfd,
	0xfe, 0x5c, 0xeb, 0x79, 0x8c, 0xe3, 0x6a, 0x50, 0xa6, 0xa9, 0xb6, 0xd2, 0x2a, 0x9d, 0xba, 0x09,
	0x9f, 0xba, 0x7d, 0x4c, 0x32, 0xfb, 0xd1, 0xd5, 0x06, 0xc6, 0xea, 0x5c, 0xce, 0xb1, 0x5d, 0x94,
	0x3f, 0x04, 0xf6, 0x0c, 0x6d, 0xd4, 0xf4, 0x9e, 0x36, 0xad, 0x08, 0xdf, 0x17, 0x68, 0x2c, 0xbd,
	0x0d, 0x97, 0xa7, 0x71, 0x61, 0x2c, 0xe6, 0x93, 0x54, 0x26, 0xc8, 0xc8, 0x90, 0x1c, 0xec, 0x44,
	0xbb, 0xae, 0xf6, 0x42, 0x26, 0xc8, 0x9f, 0xc3, 0xcd, 0x96, 0x75, 0x93, 0xe9, 0xd4, 0x20, 0xbd,
	0x0f, 0x97, 0x1c, 0x8c, 0x91, 0x61, 0xef, 0x60, 0xf7, 0xf0, 0xba, 0x70, 0x66, 0xc4, 0xd2, 0x46,
	0xf4, 0x6f, 0x8c, 0x27, 0xc0, 0x8e, 0xb5, 0x59, 0xd6, 0xdb, 0xdc, 0x0d, 0x15, 0xb0, 0xdd, 0x28,
	0x31, 0x6f, 0x48, 0xd6, 0xf0, 0xdc, 0x14, 0xbf, 0x07, 0xfe, 0x63, 0x8c, 0xd1, 0x62, 0x2b, 0xf0,
	0x0a, 0x78, 0x6a, 0xe6, 0x30, 0x9e, 0x9a, 0xf1, 0x53, 0xb8, 0x71, 0x5c, 0xd8, 0x4d, 0x46, 0x57,
	0xbc, 0x7a, 0xeb, 0xbc, 0xf6, 0x36, 0xf1, 0x7a, 0xf8, 0xad, 0x07, 0xd7, 0x96, 0xbf, 0xf3, 0x4b,
	0xcc, 0x4b, 0x35, 0x45, 0x7a, 0x0a, 0x7b, 0x2b, 0x19, 0xd0, 0xbe, 0x28, 0x43, 0xd1, 0x95, 0xac,
	0x3f, 0xe8, 0xe8, 0x36, 0xc1, 0xf1, 0xd1, 0xe7, 0x9f, 0x7f, 0xbe, 0x78, 0x77, 0x29, 0x6f, 0x79,
	0x8c, 0xe3, 0x4f, 0xe7, 0x2f, 0x3b, 0xa3, 0x6f, 0x60, 0x6f, 0x25, 0xb2, 0x86, 0xde, 0x95, 0xa4,
	0xbf, 0x53, 0x75, 0x9f, 0x54, 0x6f, 0x94, 0x07, 0x35, 0x89, 0xf1, 0xfd, 0x16, 0xd2, 0x11, 0x19,
	0xd1, 0x13, 0xd8, 0x6f, 0x49, 0x88, 0x06, 0x95, 0x42, 0x77, 0x74, 0xe7, 0x09, 0xc3, 0x9a, 0xe0,
	0x8f, 0x58, 0xeb, 0x2d, 0x6a, 0x76, 0x46, 0x27, 0x70, 0xf5, 0xff, 0x5c, 0xe9, 0xad, 0xfa, 0x80,
	0xe2, 0x42, 0xff, 0x77, 0x6a, 0xf5, 0x81, 0xdf, 0xa9, 0x7e, 0x44, 0x46, 0x8f, 0xc4, 0xf7, 0x45,
	0x40, 0x7e, 0x2c, 0x02, 0xf2, 0x6b, 0x11, 0x90, 0xaf, 0xbf, 0x83, 0x2d, 0x60, 0x4a, 0x0b, 0x63,
	0xe5, 0xf4, 0x5d, 0xae, 0x3f, 0x34, 0x3f, 0xa2, 0x90, 0x99, 0x12, 0x65, 0xf8, 0xda, 0x2b, 0xc3,
	0x57, 0x5b, 0x27, 0xdb, 0x75, 0xed, 0xc1, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe6, 0x19, 0x38,
	0x03, 0x11, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RuntimeFiltersServiceClient is the client API for RuntimeFiltersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConnInterface.NewStream.
type RuntimeFiltersServiceClient interface {
	GetRuntimeFilters(ctx context.Context, in *GetRuntimeFiltersRequest, opts ...grpc.CallOption) (*GetRuntimeFiltersResponse, error)
	PostRuntimeFilter(ctx context.Context, in *PostRuntimeFilterRequest, opts ...grpc.CallOption) (*Empty, error)
	DeleteRuntimeFilter(ctx context.Context, in *DeleteRuntimeFilterRequest, opts ...grpc.CallOption) (*Empty, error)
	PutRuntimeFilter(ctx context.Context, in *PutRuntimeFilterRequest, opts ...grpc.CallOption) (*Empty, error)
}

type runtimeFiltersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRuntimeFiltersServiceClient(cc grpc.ClientConnInterface) RuntimeFiltersServiceClient {
	return &runtimeFiltersServiceClient{cc}
}

func (c *runtimeFiltersServiceClient) GetRuntimeFilters(ctx context.Context, in *GetRuntimeFiltersRequest, opts ...grpc.CallOption) (*GetRuntimeFiltersResponse, error) {
	out := new(GetRuntimeFiltersResponse)
	err := c.cc.Invoke(ctx, "/v1.RuntimeFiltersService/GetRuntimeFilters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeFiltersServiceClient) PostRuntimeFilter(ctx context.Context, in *PostRuntimeFilterRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/v1.RuntimeFiltersService/PostRuntimeFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeFiltersServiceClient) DeleteRuntimeFilter(ctx context.Context, in *DeleteRuntimeFilterRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/v1.RuntimeFiltersService/DeleteRuntimeFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeFiltersServiceClient) PutRuntimeFilter(ctx context.Context, in *PutRuntimeFilterRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/v1.RuntimeFiltersService/PutRuntimeFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RuntimeFiltersServiceServer is the server API for RuntimeFiltersService service.
type RuntimeFiltersServiceServer interface {
	GetRuntimeFilters(context.Context, *GetRuntimeFiltersRequest) (*GetRuntimeFiltersResponse, error)
	PostRuntimeFilter(context.Context, *PostRuntimeFilterRequest) (*Empty, error)
	DeleteRuntimeFilter(context.Context, *DeleteRuntimeFilterRequest) (*Empty, error)
	PutRuntimeFilter(context.Context, *PutRuntimeFilterRequest) (*Empty, error)
}

// UnimplementedRuntimeFiltersServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRuntimeFiltersServiceServer struct {
}

func (*UnimplementedRuntimeFiltersServiceServer) GetRuntimeFilters(ctx context.Context, req *GetRuntimeFiltersRequest) (*GetRuntimeFiltersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRuntimeFilters not implemented")
}
func (*UnimplementedRuntimeFiltersServiceServer) PostRuntimeFilter(ctx context.Context, req *PostRuntimeFilterRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostRuntimeFilter not implemented")
}
func (*UnimplementedRuntimeFiltersServiceServer) DeleteRuntimeFilter(ctx context.Context, req *DeleteRuntimeFilterRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRuntimeFilter not implemented")
}
func (*UnimplementedRuntimeFiltersServiceServer) PutRuntimeFilter(ctx context.Context, req *PutRuntimeFilterRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutRuntimeFilter not implemented")
}

func RegisterRuntimeFiltersServiceServer(s *grpc.Server, srv RuntimeFiltersServiceServer) {
	s.RegisterService(&_RuntimeFiltersService_serviceDesc, srv)
}

func _RuntimeFiltersService_GetRuntimeFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRuntimeFiltersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeFiltersServiceServer).GetRuntimeFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RuntimeFiltersService/GetRuntimeFilters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeFiltersServiceServer).GetRuntimeFilters(ctx, req.(*GetRuntimeFiltersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeFiltersService_PostRuntimeFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostRuntimeFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeFiltersServiceServer).PostRuntimeFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RuntimeFiltersService/PostRuntimeFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeFiltersServiceServer).PostRuntimeFilter(ctx, req.(*PostRuntimeFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeFiltersService_DeleteRuntimeFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRuntimeFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeFiltersServiceServer).DeleteRuntimeFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RuntimeFiltersService/DeleteRuntimeFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeFiltersServiceServer).DeleteRuntimeFilter(ctx, req.(*DeleteRuntimeFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeFiltersService_PutRuntimeFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRuntimeFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeFiltersServiceServer).PutRuntimeFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RuntimeFiltersService/PutRuntimeFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeFiltersServiceServer).PutRuntimeFilter(ctx, req.(*PutRuntimeFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RuntimeFiltersService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.RuntimeFiltersService",
	HandlerType: (*RuntimeFiltersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRuntimeFilters",
			Handler:    _RuntimeFiltersService_GetRuntimeFilters_Handler,
		},
		{
			MethodName: "PostRuntimeFilter",
			Handler:    _RuntimeFiltersService_PostRuntimeFilter_Handler,
		},
		{
			MethodName: "DeleteRuntimeFilter",
			Handler:    _RuntimeFiltersService_DeleteRuntimeFilter_Handler,
		},
		{
			MethodName: "PutRuntimeFilter",
			Handler:    _RuntimeFiltersService_PutRuntimeFilter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/runtime_filters.proto",
}

func (m *GetRuntimeFiltersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRuntimeFiltersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRuntimeFiltersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ClusterName) > 0 {
		i -= len(m.ClusterName)
		copy(dAtA[i:], m.ClusterName)
		i = encodeVarintRuntimeFilters(dAtA, i, uint64(len(m.ClusterName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetRuntimeFiltersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRuntimeFiltersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRuntimeFiltersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Filters) > 0 {
		for iNdEx := len(m.Filters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Filters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRuntimeFilters(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PostRuntimeFilterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostRuntimeFilterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PostRuntimeFilterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Filter != nil {
		{
			size, err := m.Filter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRuntimeFilters(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClusterName) > 0 {
		i -= len(m.ClusterName)
		copy(dAtA[i:], m.ClusterName)
		i = encodeVarintRuntimeFilters(dAtA, i, uint64(len(m.ClusterName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteRuntimeFilterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteRuntimeFilterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteRuntimeFilterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintRuntimeFilters(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PutRuntimeFilterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PutRuntimeFilterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PutRuntimeFilterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Filter != nil {
		{
			size, err := m.Filter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRuntimeFilters(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClusterName) > 0 {
		i -= len(m.ClusterName)
		copy(dAtA[i:], m.ClusterName)
		i = encodeVarintRuntimeFilters(dAtA, i, uint64(len(m.ClusterName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintRuntimeFilters(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRuntimeFilters(dAtA []byte, offset int, v uint64) int {
	offset -= sovRuntimeFilters(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetRuntimeFiltersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClusterName)
	if l > 0 {
		n += 1 + l + sovRuntimeFilters(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRuntimeFiltersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Filters) > 0 {
		for _, e := range m.Filters {
			l = e.Size()
			n += 1 + l + sovRuntimeFilters(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PostRuntimeFilterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClusterName)
	if l > 0 {
		n += 1 + l + sovRuntimeFilters(uint64(l))
	}
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovRuntimeFilters(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteRuntimeFilterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRuntimeFilters(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PutRuntimeFilterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRuntimeFilters(uint64(l))
	}
	l = len(m.ClusterName)
	if l > 0 {
		n += 1 + l + sovRuntimeFilters(uint64(l))
	}
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovRuntimeFilters(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRuntimeFilters(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRuntimeFilters(x uint64) (n int) {
	return sovRuntimeFilters(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetRuntimeFiltersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRuntimeFilters
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRuntimeFiltersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRuntimeFiltersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntimeFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRuntimeFilters
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRuntimeFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRuntimeFilters(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRuntimeFilters
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRuntimeFiltersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRuntimeFilters
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRuntimeFiltersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRuntimeFiltersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntimeFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRuntimeFilters
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRuntimeFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filters = append(m.Filters, &storage.RuntimeFilter{})
			if err := m.Filters[len(m.Filters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRuntimeFilters(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRuntimeFilters
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostRuntimeFilterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRuntimeFilters
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostRuntimeFilterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostRuntimeFilterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntimeFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRuntimeFilters
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRuntimeFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntimeFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRuntimeFilters
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRuntimeFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &storage.RuntimeFilter{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRuntimeFilters(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRuntimeFilters
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteRuntimeFilterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRuntimeFilters
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRuntimeFilterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRuntimeFilterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntimeFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRuntimeFilters
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRuntimeFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRuntimeFilters(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRuntimeFilters
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PutRuntimeFilterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRuntimeFilters
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PutRuntimeFilterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PutRuntimeFilterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntimeFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRuntimeFilters
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRuntimeFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntimeFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRuntimeFilters
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRuntimeFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRuntimeFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRuntimeFilters
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRuntimeFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &storage.RuntimeFilter{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRuntimeFilters(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRuntimeFilters
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRuntimeFilters(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRuntimeFilters
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRuntimeFilters
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRuntimeFilters
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRuntimeFilters
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRuntimeFilters
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRuntimeFilters
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRuntimeFilters        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRuntimeFilters          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRuntimeFilters = fmt.Errorf("proto: unexpected end of group")
)
