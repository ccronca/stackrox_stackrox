{
  "swagger": "2.0",
  "info": {
    "title": "api/v1/policy_service.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "PolicyService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/policies": {
      "get": {
        "summary": "ListPolicies returns the list of policies.",
        "operationId": "PolicyService_ListPolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListPoliciesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pagination.sortOption.field",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pagination.sortOption.reversed",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pagination.sortOption.aggregateBy.aggrFunc",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNSET",
              "COUNT",
              "MIN",
              "MAX"
            ],
            "default": "UNSET"
          },
          {
            "name": "pagination.sortOption.aggregateBy.distinct",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "PolicyService"
        ]
      },
      "post": {
        "summary": "PostPolicy creates a new policy.",
        "operationId": "PolicyService_PostPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storagePolicy"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "policy",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/storagePolicy"
            }
          },
          {
            "name": "enableStrictValidation",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "PolicyService"
        ]
      }
    },
    "/v1/policies/dryrun": {
      "post": {
        "summary": "DryRunPolicy evaluates the given policy and returns any alerts without creating the policy.",
        "operationId": "PolicyService_DryRunPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DryRunResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/storagePolicy"
            }
          }
        ],
        "tags": [
          "PolicyService"
        ]
      }
    },
    "/v1/policies/dryrunjob": {
      "post": {
        "operationId": "PolicyService_SubmitDryRunPolicyJob",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1JobId"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/storagePolicy"
            }
          }
        ],
        "tags": [
          "PolicyService"
        ]
      }
    },
    "/v1/policies/dryrunjob/{jobId}": {
      "get": {
        "operationId": "PolicyService_QueryDryRunJobStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DryRunJobStatusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PolicyService"
        ]
      },
      "delete": {
        "operationId": "PolicyService_CancelDryRunJob",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Empty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PolicyService"
        ]
      }
    },
    "/v1/policies/export": {
      "post": {
        "summary": "ExportPolicies takes a list of policy IDs and returns either the entire list of policies or an error message",
        "operationId": "PolicyService_ExportPolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageExportPoliciesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ExportPoliciesRequest"
            }
          }
        ],
        "tags": [
          "PolicyService"
        ]
      }
    },
    "/v1/policies/from-search": {
      "post": {
        "operationId": "PolicyService_PolicyFromSearch",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1PolicyFromSearchResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1PolicyFromSearchRequest"
            }
          }
        ],
        "tags": [
          "PolicyService"
        ]
      }
    },
    "/v1/policies/import": {
      "post": {
        "summary": "ImportPolicies accepts a list of Policies and returns a list of the policies which could not be imported",
        "operationId": "PolicyService_ImportPolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ImportPoliciesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ImportPoliciesRequest"
            }
          }
        ],
        "tags": [
          "PolicyService"
        ]
      }
    },
    "/v1/policies/reassess": {
      "post": {
        "summary": "ReassessPolicies reevaluates all the policies.",
        "operationId": "PolicyService_ReassessPolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Empty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "PolicyService"
        ]
      }
    },
    "/v1/policies/{id}": {
      "get": {
        "summary": "GetPolicy returns the requested policy by ID.",
        "operationId": "PolicyService_GetPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storagePolicy"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PolicyService"
        ]
      },
      "delete": {
        "summary": "DeletePolicy removes a policy by ID.",
        "operationId": "PolicyService_DeletePolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Empty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PolicyService"
        ]
      },
      "put": {
        "summary": "PutPolicy modifies an existing policy.",
        "operationId": "PolicyService_PutPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Empty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PolicyServicePutPolicyBody"
            }
          }
        ],
        "tags": [
          "PolicyService"
        ]
      },
      "patch": {
        "summary": "PatchPolicy edits an existing policy.",
        "operationId": "PolicyService_PatchPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Empty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PolicyServicePatchPolicyBody"
            }
          }
        ],
        "tags": [
          "PolicyService"
        ]
      }
    },
    "/v1/policies/{id}/mitrevectors": {
      "get": {
        "summary": "GetMitreVectorsForPolicy returns the requested policy by ID.",
        "operationId": "PolicyService_GetPolicyMitreVectors",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetPolicyMitreVectorsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "options.excludePolicy",
            "description": "If set to true, policy is excluded from the response.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "PolicyService"
        ]
      }
    },
    "/v1/policies/{policyId}/notifiers": {
      "patch": {
        "summary": "EnableDisablePolicyNotification enables or disables notifications for a policy by ID.",
        "operationId": "PolicyService_EnableDisablePolicyNotification",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Empty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "policyId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PolicyServiceEnableDisablePolicyNotificationBody"
            }
          }
        ],
        "tags": [
          "PolicyService"
        ]
      }
    },
    "/v1/policyCategories": {
      "get": {
        "summary": "GetPolicyCategories returns the policy categories.",
        "operationId": "PolicyService_GetPolicyCategories",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1PolicyCategoriesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "PolicyService"
        ]
      }
    }
  },
  "definitions": {
    "DryRunResponseAlert": {
      "type": "object",
      "properties": {
        "deployment": {
          "type": "string"
        },
        "violations": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ExclusionDeployment": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "scope": {
          "$ref": "#/definitions/storageScope"
        }
      }
    },
    "GetPolicyMitreVectorsRequestOptions": {
      "type": "object",
      "properties": {
        "excludePolicy": {
          "type": "boolean",
          "description": "If set to true, policy is excluded from the response."
        }
      }
    },
    "PolicyMitreAttackVectors": {
      "type": "object",
      "properties": {
        "tactic": {
          "type": "string"
        },
        "techniques": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "PolicyServiceEnableDisablePolicyNotificationBody": {
      "type": "object",
      "properties": {
        "notifierIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "disable": {
          "type": "boolean"
        }
      }
    },
    "PolicyServicePatchPolicyBody": {
      "type": "object",
      "properties": {
        "disabled": {
          "type": "boolean"
        }
      }
    },
    "PolicyServicePutPolicyBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "rationale": {
          "type": "string"
        },
        "remediation": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "lifecycleStages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageLifecycleStage"
          }
        },
        "eventSource": {
          "$ref": "#/definitions/storageEventSource"
        },
        "exclusions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageExclusion"
          }
        },
        "scope": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageScope"
          }
        },
        "severity": {
          "$ref": "#/definitions/storageSeverity"
        },
        "enforcementActions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageEnforcementAction"
          },
          "description": "FAIL_DEPLOYMENT_CREATE_ENFORCEMENT takes effect only if admission control webhook is configured to enforce on object creates/updates.\nFAIL_KUBE_REQUEST_ENFORCEMENT takes effect only if admission control webhook is enabled to listen on exec and port-forward events.\nFAIL_DEPLOYMENT_UPDATE_ENFORCEMENT takes effect only if admission control webhook is configured to enforce on object updates."
        },
        "notifiers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "lastUpdated": {
          "type": "string",
          "format": "date-time"
        },
        "SORTName": {
          "type": "string",
          "description": "For internal use only."
        },
        "SORTLifecycleStage": {
          "type": "string",
          "description": "For internal use only."
        },
        "SORTEnforcement": {
          "type": "boolean",
          "description": "For internal use only."
        },
        "policyVersion": {
          "type": "string"
        },
        "policySections": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storagePolicySection"
          }
        },
        "mitreAttackVectors": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/PolicyMitreAttackVectors"
          }
        },
        "criteriaLocked": {
          "type": "boolean",
          "description": "Read-only field. If true, the policy's criteria fields are rendered read-only."
        },
        "mitreVectorsLocked": {
          "type": "boolean",
          "description": "Read-only field. If true, the policy's MITRE ATT&CK fields are rendered read-only."
        },
        "isDefault": {
          "type": "boolean",
          "description": "Read-only field. Indicates the policy is a default policy if true and a custom policy if false."
        }
      }
    },
    "googlerpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "storageBooleanOperator": {
      "type": "string",
      "enum": [
        "OR",
        "AND"
      ],
      "default": "OR"
    },
    "storageEnforcementAction": {
      "type": "string",
      "enum": [
        "UNSET_ENFORCEMENT",
        "SCALE_TO_ZERO_ENFORCEMENT",
        "UNSATISFIABLE_NODE_CONSTRAINT_ENFORCEMENT",
        "KILL_POD_ENFORCEMENT",
        "FAIL_BUILD_ENFORCEMENT",
        "FAIL_KUBE_REQUEST_ENFORCEMENT",
        "FAIL_DEPLOYMENT_CREATE_ENFORCEMENT",
        "FAIL_DEPLOYMENT_UPDATE_ENFORCEMENT"
      ],
      "default": "UNSET_ENFORCEMENT",
      "description": " - FAIL_KUBE_REQUEST_ENFORCEMENT: FAIL_KUBE_REQUEST_ENFORCEMENT takes effect only if admission control webhook is enabled to listen on exec and port-forward events.\n - FAIL_DEPLOYMENT_CREATE_ENFORCEMENT: FAIL_DEPLOYMENT_CREATE_ENFORCEMENT takes effect only if admission control webhook is configured to enforce on object creates.\n - FAIL_DEPLOYMENT_UPDATE_ENFORCEMENT: FAIL_DEPLOYMENT_UPDATE_ENFORCEMENT takes effect only if admission control webhook is configured to enforce on object updates."
    },
    "storageEventSource": {
      "type": "string",
      "enum": [
        "NOT_APPLICABLE",
        "DEPLOYMENT_EVENT",
        "AUDIT_LOG_EVENT"
      ],
      "default": "NOT_APPLICABLE"
    },
    "storageExclusion": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "deployment": {
          "$ref": "#/definitions/ExclusionDeployment"
        },
        "image": {
          "$ref": "#/definitions/storageExclusionImage"
        },
        "expiration": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "storageExclusionImage": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "storageExportPoliciesResponse": {
      "type": "object",
      "properties": {
        "policies": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storagePolicy"
          }
        }
      },
      "title": "ExportPoliciesResponse is used by the API but it is defined in storage because we expect customers to store them.\nWe do backwards-compatibility checks on objects in the storge folder and those checks should be applied to this object"
    },
    "storageLifecycleStage": {
      "type": "string",
      "enum": [
        "DEPLOY",
        "BUILD",
        "RUNTIME"
      ],
      "default": "DEPLOY"
    },
    "storageListPolicy": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "severity": {
          "$ref": "#/definitions/storageSeverity"
        },
        "disabled": {
          "type": "boolean"
        },
        "lifecycleStages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageLifecycleStage"
          }
        },
        "notifiers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "lastUpdated": {
          "type": "string",
          "format": "date-time"
        },
        "eventSource": {
          "$ref": "#/definitions/storageEventSource"
        },
        "isDefault": {
          "type": "boolean"
        }
      }
    },
    "storageMitreAttackVector": {
      "type": "object",
      "properties": {
        "tactic": {
          "$ref": "#/definitions/storageMitreTactic"
        },
        "techniques": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageMitreTechnique"
          }
        }
      }
    },
    "storageMitreTactic": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "storageMitreTechnique": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "storagePolicy": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "rationale": {
          "type": "string"
        },
        "remediation": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "lifecycleStages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageLifecycleStage"
          }
        },
        "eventSource": {
          "$ref": "#/definitions/storageEventSource"
        },
        "exclusions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageExclusion"
          }
        },
        "scope": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageScope"
          }
        },
        "severity": {
          "$ref": "#/definitions/storageSeverity"
        },
        "enforcementActions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageEnforcementAction"
          },
          "description": "FAIL_DEPLOYMENT_CREATE_ENFORCEMENT takes effect only if admission control webhook is configured to enforce on object creates/updates.\nFAIL_KUBE_REQUEST_ENFORCEMENT takes effect only if admission control webhook is enabled to listen on exec and port-forward events.\nFAIL_DEPLOYMENT_UPDATE_ENFORCEMENT takes effect only if admission control webhook is configured to enforce on object updates."
        },
        "notifiers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "lastUpdated": {
          "type": "string",
          "format": "date-time"
        },
        "SORTName": {
          "type": "string",
          "description": "For internal use only."
        },
        "SORTLifecycleStage": {
          "type": "string",
          "description": "For internal use only."
        },
        "SORTEnforcement": {
          "type": "boolean",
          "description": "For internal use only."
        },
        "policyVersion": {
          "type": "string"
        },
        "policySections": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storagePolicySection"
          }
        },
        "mitreAttackVectors": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/PolicyMitreAttackVectors"
          }
        },
        "criteriaLocked": {
          "type": "boolean",
          "description": "Read-only field. If true, the policy's criteria fields are rendered read-only."
        },
        "mitreVectorsLocked": {
          "type": "boolean",
          "description": "Read-only field. If true, the policy's MITRE ATT&CK fields are rendered read-only."
        },
        "isDefault": {
          "type": "boolean",
          "description": "Read-only field. Indicates the policy is a default policy if true and a custom policy if false."
        }
      }
    },
    "storagePolicyGroup": {
      "type": "object",
      "properties": {
        "fieldName": {
          "type": "string"
        },
        "booleanOperator": {
          "$ref": "#/definitions/storageBooleanOperator"
        },
        "negate": {
          "type": "boolean"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storagePolicyValue"
          }
        }
      }
    },
    "storagePolicySection": {
      "type": "object",
      "properties": {
        "sectionName": {
          "type": "string"
        },
        "policyGroups": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storagePolicyGroup"
          }
        }
      }
    },
    "storagePolicyValue": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        }
      }
    },
    "storageScope": {
      "type": "object",
      "properties": {
        "cluster": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "label": {
          "$ref": "#/definitions/storageScopeLabel"
        }
      }
    },
    "storageScopeLabel": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "storageSeverity": {
      "type": "string",
      "enum": [
        "UNSET_SEVERITY",
        "LOW_SEVERITY",
        "MEDIUM_SEVERITY",
        "HIGH_SEVERITY",
        "CRITICAL_SEVERITY"
      ],
      "default": "UNSET_SEVERITY"
    },
    "v1AggregateBy": {
      "type": "object",
      "properties": {
        "aggrFunc": {
          "$ref": "#/definitions/v1Aggregation"
        },
        "distinct": {
          "type": "boolean"
        }
      }
    },
    "v1Aggregation": {
      "type": "string",
      "enum": [
        "UNSET",
        "COUNT",
        "MIN",
        "MAX"
      ],
      "default": "UNSET"
    },
    "v1DryRunJobStatusResponse": {
      "type": "object",
      "properties": {
        "pending": {
          "type": "boolean"
        },
        "result": {
          "$ref": "#/definitions/v1DryRunResponse"
        }
      }
    },
    "v1DryRunResponse": {
      "type": "object",
      "properties": {
        "alerts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/DryRunResponseAlert"
          }
        }
      }
    },
    "v1Empty": {
      "type": "object"
    },
    "v1ExportPoliciesRequest": {
      "type": "object",
      "properties": {
        "policyIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1GetPolicyMitreVectorsResponse": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/storagePolicy"
        },
        "vectors": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageMitreAttackVector"
          }
        }
      }
    },
    "v1ImportPoliciesMetadata": {
      "type": "object",
      "properties": {
        "overwrite": {
          "type": "boolean"
        }
      }
    },
    "v1ImportPoliciesRequest": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ImportPoliciesMetadata"
        },
        "policies": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storagePolicy"
          }
        }
      }
    },
    "v1ImportPoliciesResponse": {
      "type": "object",
      "properties": {
        "responses": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ImportPolicyResponse"
          }
        },
        "allSucceeded": {
          "type": "boolean"
        }
      }
    },
    "v1ImportPolicyError": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "duplicateName": {
          "type": "string"
        },
        "validationError": {
          "type": "string"
        }
      }
    },
    "v1ImportPolicyResponse": {
      "type": "object",
      "properties": {
        "succeeded": {
          "type": "boolean"
        },
        "policy": {
          "$ref": "#/definitions/storagePolicy"
        },
        "errors": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ImportPolicyError"
          }
        }
      }
    },
    "v1JobId": {
      "type": "object",
      "properties": {
        "jobId": {
          "type": "string"
        }
      }
    },
    "v1ListPoliciesResponse": {
      "type": "object",
      "properties": {
        "policies": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageListPolicy"
          }
        }
      }
    },
    "v1Pagination": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "offset": {
          "type": "integer",
          "format": "int32"
        },
        "sortOption": {
          "$ref": "#/definitions/v1SortOption"
        },
        "sortOptions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SortOption"
          },
          "description": "This field is under development. It is not supported on any REST APIs."
        }
      }
    },
    "v1PolicyCategoriesResponse": {
      "type": "object",
      "properties": {
        "categories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1PolicyFromSearchRequest": {
      "type": "object",
      "properties": {
        "searchParams": {
          "type": "string"
        }
      }
    },
    "v1PolicyFromSearchResponse": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/storagePolicy"
        },
        "alteredSearchTerms": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "hasNestedFields": {
          "type": "boolean"
        }
      }
    },
    "v1SortOption": {
      "type": "object",
      "properties": {
        "field": {
          "type": "string"
        },
        "reversed": {
          "type": "boolean"
        },
        "aggregateBy": {
          "$ref": "#/definitions/v1AggregateBy",
          "description": "This field is under development. It is not supported on any REST APIs."
        }
      }
    }
  }
}
