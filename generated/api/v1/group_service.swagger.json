{
  "swagger": "2.0",
  "info": {
    "title": "api/v1/group_service.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "GroupService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/group": {
      "get": {
        "operationId": "GroupService_GetGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageGroup"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Unique identifier for group properties and respectively the group.\n\n@gotags: sql:\"pk\"",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "traits.mutabilityMode",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ALLOW_MUTATE",
              "ALLOW_MUTATE_FORCED"
            ],
            "default": "ALLOW_MUTATE"
          },
          {
            "name": "traits.visibility",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "VISIBLE",
              "HIDDEN"
            ],
            "default": "VISIBLE"
          },
          {
            "name": "traits.origin",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "IMPERATIVE",
              "DEFAULT",
              "DECLARATIVE",
              "DECLARATIVE_ORPHANED"
            ],
            "default": "IMPERATIVE"
          },
          {
            "name": "authProviderId",
            "description": "@gotags: search:\"Group Auth Provider,hidden\" sql:\"index=category:unique;name:groups_unique_indicator\"",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "key",
            "description": "@gotags: search:\"Group Key,hidden\" sql:\"index=category:unique;name:groups_unique_indicator\"",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "value",
            "description": "@gotags: search:\"Group Value,hidden\" sql:\"index=category:unique;name:groups_unique_indicator\"",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "GroupService"
        ]
      }
    },
    "/v1/groups": {
      "get": {
        "operationId": "GroupService_GetGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetGroupsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "authProviderId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "value",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "GroupService"
        ]
      },
      "delete": {
        "operationId": "GroupService_DeleteGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Empty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "authProviderId",
            "description": "We copy over parameters from storage.GroupProperties for seamless HTTP API migration.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "value",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "GroupService"
        ]
      },
      "post": {
        "operationId": "GroupService_CreateGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Empty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Group is a GroupProperties : Role mapping.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/storageGroup"
            }
          }
        ],
        "tags": [
          "GroupService"
        ]
      },
      "put": {
        "operationId": "GroupService_UpdateGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Empty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "group",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/storageGroup"
            }
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "GroupService"
        ]
      }
    },
    "/v1/groupsbatch": {
      "post": {
        "operationId": "GroupService_BatchUpdate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Empty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GroupBatchUpdateRequest"
            }
          }
        ],
        "tags": [
          "GroupService"
        ]
      }
    }
  },
  "definitions": {
    "TraitsMutabilityMode": {
      "type": "string",
      "enum": [
        "ALLOW_MUTATE",
        "ALLOW_MUTATE_FORCED"
      ],
      "default": "ALLOW_MUTATE",
      "description": "EXPERIMENTAL.\nNOTE: Please refer from using MutabilityMode for the time being. It will be replaced in the future (ROX-14276).\nMutabilityMode specifies whether and how an object can be modified. Default\nis ALLOW_MUTATE and means there are no modification restrictions; this is equivalent\nto the absence of MutabilityMode specification. ALLOW_MUTATE_FORCED forbids all\nmodifying operations except object removal with force bit on.\n\nBe careful when changing the state of this field. For example, modifying an\nobject from ALLOW_MUTATE to ALLOW_MUTATE_FORCED is allowed but will prohibit any further\nchanges to it, including modifying it back to ALLOW_MUTATE."
    },
    "TraitsOrigin": {
      "type": "string",
      "enum": [
        "IMPERATIVE",
        "DEFAULT",
        "DECLARATIVE",
        "DECLARATIVE_ORPHANED"
      ],
      "default": "IMPERATIVE",
      "description": "Origin specifies the origin of an object.\nObjects can have four different origins:\n- IMPERATIVE: the object was created via the API. This is assumed by default.\n- DEFAULT: the object is a default object, such as default roles, access scopes etc.\n- DECLARATIVE: the object is created via declarative configuration.\n- DECLARATIVE_ORPHANED: the object is created via declarative configuration and then unsuccessfully deleted(for example, because it is referenced by another object)\nBased on the origin, different rules apply to the objects.\nObjects with the DECLARATIVE origin are not allowed to be modified via API, only via declarative configuration.\nAdditionally, they may not reference objects with the IMPERATIVE origin.\nObjects with the DEFAULT origin are not allowed to be modified via either API or declarative configuration.\nThey may be referenced by all other objects.\nObjects with the IMPERATIVE origin are allowed to be modified via API, not via declarative configuration.\nThey may reference all other objects.\nObjects with the DECLARATIVE_ORPHANED origin are not allowed to be modified via either API or declarative configuration.\nDECLARATIVE_ORPHANED resource can become DECLARATIVE again if it is redefined in declarative configuration.\nObjects with this origin will be cleaned up from the system immediately after they are not referenced by other resources anymore.\nThey may be referenced by all other objects."
    },
    "TraitsVisibility": {
      "type": "string",
      "enum": [
        "VISIBLE",
        "HIDDEN"
      ],
      "default": "VISIBLE",
      "description": "EXPERIMENTAL.\nvisibility allows to specify whether the object should be visible for certain APIs."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "storageGroup": {
      "type": "object",
      "properties": {
        "props": {
          "$ref": "#/definitions/storageGroupProperties",
          "description": "GroupProperties define the properties of a group, applying to users when their properties match.\nThey also uniquely identify the group with the props.id field."
        },
        "roleName": {
          "type": "string",
          "description": "This is the name of the role that will apply to users in this group.\n\n@gotags: search:\"Role,hidden\" sql:\"index=name:groups_unique_indicator;category:unique\""
        }
      },
      "description": "Group is a GroupProperties : Role mapping."
    },
    "storageGroupProperties": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for group properties and respectively the group.\n\n@gotags: sql:\"pk\""
        },
        "traits": {
          "$ref": "#/definitions/storageTraits"
        },
        "authProviderId": {
          "type": "string",
          "title": "@gotags: search:\"Group Auth Provider,hidden\" sql:\"index=category:unique;name:groups_unique_indicator\""
        },
        "key": {
          "type": "string",
          "title": "@gotags: search:\"Group Key,hidden\" sql:\"index=category:unique;name:groups_unique_indicator\""
        },
        "value": {
          "type": "string",
          "title": "@gotags: search:\"Group Value,hidden\" sql:\"index=category:unique;name:groups_unique_indicator\""
        }
      },
      "description": "GroupProperties defines the properties of a group. Groups apply to users when\ntheir properties match. For instance:\n  - If GroupProperties has only an auth_provider_id, then that group applies\n    to all users logged in with that auth provider.\n  - If GroupProperties in addition has a claim key, then it applies to all\n    users with that auth provider and the claim key, etc.\nNote: Changes to GroupProperties may require changes to v1.DeleteGroupRequest."
    },
    "storageTraits": {
      "type": "object",
      "properties": {
        "mutabilityMode": {
          "$ref": "#/definitions/TraitsMutabilityMode"
        },
        "visibility": {
          "$ref": "#/definitions/TraitsVisibility"
        },
        "origin": {
          "$ref": "#/definitions/TraitsOrigin"
        }
      }
    },
    "v1Empty": {
      "type": "object"
    },
    "v1GetGroupsResponse": {
      "type": "object",
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageGroup"
          }
        }
      },
      "title": "API for updating Groups and getting users.\nNext Available Tag: 2"
    },
    "v1GroupBatchUpdateRequest": {
      "type": "object",
      "properties": {
        "previousGroups": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageGroup"
          },
          "description": "Previous groups are the groups expected to be present in the store.\nPerforms a diff on the GroupProperties present in previous_groups and required_groups:\n1) if in previous_groups but not required_groups, it gets deleted.\n2) if in previous_groups and required_groups, it gets updated.\n3) if not in previous_groups but in required_groups, it gets added."
        },
        "requiredGroups": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageGroup"
          },
          "description": "Required groups are the groups we want to mutate the previous groups into."
        },
        "force": {
          "type": "boolean"
        }
      },
      "title": "GroupBatchUpdateRequest is an in transaction batch update to the groups present.\nNext Available Tag: 3"
    }
  }
}
