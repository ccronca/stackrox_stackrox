{
  "swagger": "2.0",
  "info": {
    "title": "api/v1/cloud_source_service.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "CloudSourcesService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/cloud-sources": {
      "get": {
        "summary": "ListCloudSources returns the list of cloud sources after filtered by requested fields.",
        "operationId": "CloudSourcesService_ListCloudSources",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListCloudSourcesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pagination.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pagination.sortOption.field",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pagination.sortOption.reversed",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pagination.sortOption.aggregateBy.aggrFunc",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNSET",
              "COUNT",
              "MIN",
              "MAX"
            ],
            "default": "UNSET"
          },
          {
            "name": "pagination.sortOption.aggregateBy.distinct",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.names",
            "description": "Matches cloud sources based on their name.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.types",
            "description": "Matches cloud sources based on their type.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "TYPE_UNSPECIFIED",
                "TYPE_PALADIN_CLOUD",
                "TYPE_OCM"
              ]
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "CloudSourcesService"
        ]
      },
      "post": {
        "summary": "CreateCloudSource creates a cloud source.",
        "operationId": "CloudSourcesService_CreateCloudSource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateCloudSourceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateCloudSourceRequest"
            }
          }
        ],
        "tags": [
          "CloudSourcesService"
        ]
      }
    },
    "/v1/cloud-sources/test": {
      "post": {
        "summary": "TestCloudSource tests a cloud source.",
        "operationId": "CloudSourcesService_TestCloudSource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Empty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1TestCloudSourceRequest"
            }
          }
        ],
        "tags": [
          "CloudSourcesService"
        ]
      }
    },
    "/v1/cloud-sources/{cloudSource.id}": {
      "put": {
        "summary": "UpdateCloudSource creates or replaces a cloud source.",
        "operationId": "CloudSourcesService_UpdateCloudSource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Empty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "cloudSource.id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CloudSourcesServiceUpdateCloudSourceBody"
            }
          }
        ],
        "tags": [
          "CloudSourcesService"
        ]
      }
    },
    "/v1/cloud-sources/{id}": {
      "get": {
        "summary": "GetCloudSource retrieves a cloud source by ID.",
        "operationId": "CloudSourcesService_GetCloudSource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetCloudSourceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CloudSourcesService"
        ]
      },
      "delete": {
        "summary": "DeleteCloudSource removes a cloud source.",
        "operationId": "CloudSourcesService_DeleteCloudSource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Empty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CloudSourcesService"
        ]
      }
    },
    "/v1/count/cloud-sources": {
      "get": {
        "summary": "CountCloudSources returns the number of cloud sources after filtering by requested fields.",
        "operationId": "CloudSourcesService_CountCloudSources",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CountCloudSourcesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "filter.names",
            "description": "Matches cloud sources based on their name.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.types",
            "description": "Matches cloud sources based on their type.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "TYPE_UNSPECIFIED",
                "TYPE_PALADIN_CLOUD",
                "TYPE_OCM"
              ]
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "CloudSourcesService"
        ]
      }
    }
  },
  "definitions": {
    "CloudSourceCredentials": {
      "type": "object",
      "properties": {
        "secret": {
          "type": "string"
        }
      }
    },
    "CloudSourcesServiceUpdateCloudSourceBody": {
      "type": "object",
      "properties": {
        "cloudSource": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "type": {
              "$ref": "#/definitions/v1CloudSourceType"
            },
            "credentials": {
              "$ref": "#/definitions/CloudSourceCredentials"
            },
            "skipTestIntegration": {
              "type": "boolean"
            },
            "paladinCloud": {
              "$ref": "#/definitions/v1PaladinCloudConfig"
            },
            "ocm": {
              "$ref": "#/definitions/v1OCMConfig"
            }
          },
          "description": "CloudSource is an integration which provides a source for discovered\nclusters."
        },
        "updateCredentials": {
          "type": "boolean",
          "description": "If true, cloud_source must include valid credentials.\nIf false, the resource must already exist and\ncredentials in cloud_source are ignored."
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1AggregateBy": {
      "type": "object",
      "properties": {
        "aggrFunc": {
          "$ref": "#/definitions/v1Aggregation"
        },
        "distinct": {
          "type": "boolean"
        }
      }
    },
    "v1Aggregation": {
      "type": "string",
      "enum": [
        "UNSET",
        "COUNT",
        "MIN",
        "MAX"
      ],
      "default": "UNSET"
    },
    "v1CloudSource": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/v1CloudSourceType"
        },
        "credentials": {
          "$ref": "#/definitions/CloudSourceCredentials"
        },
        "skipTestIntegration": {
          "type": "boolean"
        },
        "paladinCloud": {
          "$ref": "#/definitions/v1PaladinCloudConfig"
        },
        "ocm": {
          "$ref": "#/definitions/v1OCMConfig"
        }
      },
      "description": "CloudSource is an integration which provides a source for discovered\nclusters."
    },
    "v1CloudSourceType": {
      "type": "string",
      "enum": [
        "TYPE_UNSPECIFIED",
        "TYPE_PALADIN_CLOUD",
        "TYPE_OCM"
      ],
      "default": "TYPE_UNSPECIFIED"
    },
    "v1CloudSourcesFilter": {
      "type": "object",
      "properties": {
        "names": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Matches cloud sources based on their name."
        },
        "types": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1CloudSourceType"
          },
          "description": "Matches cloud sources based on their type."
        }
      }
    },
    "v1CountCloudSourcesResponse": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1CreateCloudSourceRequest": {
      "type": "object",
      "properties": {
        "cloudSource": {
          "$ref": "#/definitions/v1CloudSource"
        }
      }
    },
    "v1CreateCloudSourceResponse": {
      "type": "object",
      "properties": {
        "cloudSource": {
          "$ref": "#/definitions/v1CloudSource"
        }
      }
    },
    "v1Empty": {
      "type": "object"
    },
    "v1GetCloudSourceResponse": {
      "type": "object",
      "properties": {
        "cloudSource": {
          "$ref": "#/definitions/v1CloudSource"
        }
      }
    },
    "v1ListCloudSourcesResponse": {
      "type": "object",
      "properties": {
        "cloudSources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CloudSource"
          }
        }
      }
    },
    "v1OCMConfig": {
      "type": "object",
      "properties": {
        "endpoint": {
          "type": "string",
          "title": "Endpoint to the OpenShift API server. Https is assumed if no\nprotocol is specified. Example: https://api.openshift.com"
        }
      },
      "description": "OCMConfig provides information required to fetch discovered clusters from\nthe OpenShift cluster manager."
    },
    "v1Pagination": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "offset": {
          "type": "integer",
          "format": "int32"
        },
        "sortOption": {
          "$ref": "#/definitions/v1SortOption"
        },
        "sortOptions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SortOption"
          },
          "description": "This field is under development. It is not supported on any REST APIs."
        }
      }
    },
    "v1PaladinCloudConfig": {
      "type": "object",
      "properties": {
        "endpoint": {
          "type": "string",
          "title": "Endpoint to the Paladin Cloud API server. Https is assumed if no\nprotocol is specified. Example: https://apiqa.paladincloud.io"
        }
      },
      "description": "PaladinCloudConfig provides information required to fetch discovered\nclusters from Paladin Cloud."
    },
    "v1SortOption": {
      "type": "object",
      "properties": {
        "field": {
          "type": "string"
        },
        "reversed": {
          "type": "boolean"
        },
        "aggregateBy": {
          "$ref": "#/definitions/v1AggregateBy",
          "description": "This field is under development. It is not supported on any REST APIs."
        }
      }
    },
    "v1TestCloudSourceRequest": {
      "type": "object",
      "properties": {
        "cloudSource": {
          "$ref": "#/definitions/v1CloudSource"
        },
        "updateCredentials": {
          "type": "boolean",
          "description": "If true, cloud_source must include valid credentials.\nIf false, the resource must already exist and\ncredentials in cloud_source are ignored."
        }
      }
    }
  }
}
