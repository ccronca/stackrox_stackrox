// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: internalapi/sensor/collector_iservice.proto

package sensor

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	storage "github.com/stackrox/rox/generated/storage"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MsgToCollector struct {
	// Types that are valid to be assigned to Msg:
	//	*MsgToCollector_ConfigWithCluster
	Msg                  isMsgToCollector_Msg `protobuf_oneof:"msg"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *MsgToCollector) Reset()         { *m = MsgToCollector{} }
func (m *MsgToCollector) String() string { return proto.CompactTextString(m) }
func (*MsgToCollector) ProtoMessage()    {}
func (*MsgToCollector) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ac8c5c7ee64002d, []int{0}
}
func (m *MsgToCollector) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgToCollector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgToCollector.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgToCollector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgToCollector.Merge(m, src)
}
func (m *MsgToCollector) XXX_Size() int {
	return m.Size()
}
func (m *MsgToCollector) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgToCollector.DiscardUnknown(m)
}

var xxx_messageInfo_MsgToCollector proto.InternalMessageInfo

type isMsgToCollector_Msg interface {
	isMsgToCollector_Msg()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isMsgToCollector_Msg
}

type MsgToCollector_ConfigWithCluster struct {
	ConfigWithCluster *CollectorRuntimeConfigWithCluster `protobuf:"bytes,1,opt,name=config_with_cluster,json=configWithCluster,proto3,oneof" json:"config_with_cluster,omitempty"`
}

func (*MsgToCollector_ConfigWithCluster) isMsgToCollector_Msg() {}
func (m *MsgToCollector_ConfigWithCluster) Clone() isMsgToCollector_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgToCollector_ConfigWithCluster)
	*cloned = *m

	cloned.ConfigWithCluster = m.ConfigWithCluster.Clone()
	return cloned
}

func (m *MsgToCollector) GetMsg() isMsgToCollector_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *MsgToCollector) GetConfigWithCluster() *CollectorRuntimeConfigWithCluster {
	if x, ok := m.GetMsg().(*MsgToCollector_ConfigWithCluster); ok {
		return x.ConfigWithCluster
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MsgToCollector) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MsgToCollector_ConfigWithCluster)(nil),
	}
}

func (m *MsgToCollector) MessageClone() proto.Message {
	return m.Clone()
}
func (m *MsgToCollector) Clone() *MsgToCollector {
	if m == nil {
		return nil
	}
	cloned := new(MsgToCollector)
	*cloned = *m

	if m.Msg != nil {
		cloned.Msg = m.Msg.Clone()
	}
	return cloned
}

type MsgFromCollector struct {
	// Types that are valid to be assigned to Msg:
	//	*MsgFromCollector_CollectorRuntimeConfigAck
	Msg                  isMsgFromCollector_Msg `protobuf_oneof:"msg"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *MsgFromCollector) Reset()         { *m = MsgFromCollector{} }
func (m *MsgFromCollector) String() string { return proto.CompactTextString(m) }
func (*MsgFromCollector) ProtoMessage()    {}
func (*MsgFromCollector) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ac8c5c7ee64002d, []int{1}
}
func (m *MsgFromCollector) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFromCollector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFromCollector.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFromCollector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFromCollector.Merge(m, src)
}
func (m *MsgFromCollector) XXX_Size() int {
	return m.Size()
}
func (m *MsgFromCollector) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFromCollector.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFromCollector proto.InternalMessageInfo

type isMsgFromCollector_Msg interface {
	isMsgFromCollector_Msg()
	MarshalTo([]byte) (int, error)
	Size() int
	Clone() isMsgFromCollector_Msg
}

type MsgFromCollector_CollectorRuntimeConfigAck struct {
	CollectorRuntimeConfigAck *CollectorRuntimeConfigACK `protobuf:"bytes,1,opt,name=collector_runtime_config_ack,json=collectorRuntimeConfigAck,proto3,oneof" json:"collector_runtime_config_ack,omitempty"`
}

func (*MsgFromCollector_CollectorRuntimeConfigAck) isMsgFromCollector_Msg() {}
func (m *MsgFromCollector_CollectorRuntimeConfigAck) Clone() isMsgFromCollector_Msg {
	if m == nil {
		return nil
	}
	cloned := new(MsgFromCollector_CollectorRuntimeConfigAck)
	*cloned = *m

	cloned.CollectorRuntimeConfigAck = m.CollectorRuntimeConfigAck.Clone()
	return cloned
}

func (m *MsgFromCollector) GetMsg() isMsgFromCollector_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *MsgFromCollector) GetCollectorRuntimeConfigAck() *CollectorRuntimeConfigACK {
	if x, ok := m.GetMsg().(*MsgFromCollector_CollectorRuntimeConfigAck); ok {
		return x.CollectorRuntimeConfigAck
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MsgFromCollector) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MsgFromCollector_CollectorRuntimeConfigAck)(nil),
	}
}

func (m *MsgFromCollector) MessageClone() proto.Message {
	return m.Clone()
}
func (m *MsgFromCollector) Clone() *MsgFromCollector {
	if m == nil {
		return nil
	}
	cloned := new(MsgFromCollector)
	*cloned = *m

	if m.Msg != nil {
		cloned.Msg = m.Msg.Clone()
	}
	return cloned
}

type CollectorRuntimeConfigACK struct {
	CollectorRuntimeConfigAck *storage.CollectorRuntimeConfigACK `protobuf:"bytes,1,opt,name=collector_runtime_config_ack,json=collectorRuntimeConfigAck,proto3" json:"collector_runtime_config_ack,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}                           `json:"-"`
	XXX_unrecognized          []byte                             `json:"-"`
	XXX_sizecache             int32                              `json:"-"`
}

func (m *CollectorRuntimeConfigACK) Reset()         { *m = CollectorRuntimeConfigACK{} }
func (m *CollectorRuntimeConfigACK) String() string { return proto.CompactTextString(m) }
func (*CollectorRuntimeConfigACK) ProtoMessage()    {}
func (*CollectorRuntimeConfigACK) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ac8c5c7ee64002d, []int{2}
}
func (m *CollectorRuntimeConfigACK) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CollectorRuntimeConfigACK) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CollectorRuntimeConfigACK.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CollectorRuntimeConfigACK) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectorRuntimeConfigACK.Merge(m, src)
}
func (m *CollectorRuntimeConfigACK) XXX_Size() int {
	return m.Size()
}
func (m *CollectorRuntimeConfigACK) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectorRuntimeConfigACK.DiscardUnknown(m)
}

var xxx_messageInfo_CollectorRuntimeConfigACK proto.InternalMessageInfo

func (m *CollectorRuntimeConfigACK) GetCollectorRuntimeConfigAck() *storage.CollectorRuntimeConfigACK {
	if m != nil {
		return m.CollectorRuntimeConfigAck
	}
	return nil
}

func (m *CollectorRuntimeConfigACK) MessageClone() proto.Message {
	return m.Clone()
}
func (m *CollectorRuntimeConfigACK) Clone() *CollectorRuntimeConfigACK {
	if m == nil {
		return nil
	}
	cloned := new(CollectorRuntimeConfigACK)
	*cloned = *m

	cloned.CollectorRuntimeConfigAck = m.CollectorRuntimeConfigAck.Clone()
	return cloned
}

type CollectorRuntimeConfigWithCluster struct {
	ConfigWithCluster    *storage.CollectorRuntimeConfigWithCluster `protobuf:"bytes,1,opt,name=config_with_cluster,json=configWithCluster,proto3" json:"config_with_cluster,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                   `json:"-"`
	XXX_unrecognized     []byte                                     `json:"-"`
	XXX_sizecache        int32                                      `json:"-"`
}

func (m *CollectorRuntimeConfigWithCluster) Reset()         { *m = CollectorRuntimeConfigWithCluster{} }
func (m *CollectorRuntimeConfigWithCluster) String() string { return proto.CompactTextString(m) }
func (*CollectorRuntimeConfigWithCluster) ProtoMessage()    {}
func (*CollectorRuntimeConfigWithCluster) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ac8c5c7ee64002d, []int{3}
}
func (m *CollectorRuntimeConfigWithCluster) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CollectorRuntimeConfigWithCluster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CollectorRuntimeConfigWithCluster.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CollectorRuntimeConfigWithCluster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectorRuntimeConfigWithCluster.Merge(m, src)
}
func (m *CollectorRuntimeConfigWithCluster) XXX_Size() int {
	return m.Size()
}
func (m *CollectorRuntimeConfigWithCluster) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectorRuntimeConfigWithCluster.DiscardUnknown(m)
}

var xxx_messageInfo_CollectorRuntimeConfigWithCluster proto.InternalMessageInfo

func (m *CollectorRuntimeConfigWithCluster) GetConfigWithCluster() *storage.CollectorRuntimeConfigWithCluster {
	if m != nil {
		return m.ConfigWithCluster
	}
	return nil
}

func (m *CollectorRuntimeConfigWithCluster) MessageClone() proto.Message {
	return m.Clone()
}
func (m *CollectorRuntimeConfigWithCluster) Clone() *CollectorRuntimeConfigWithCluster {
	if m == nil {
		return nil
	}
	cloned := new(CollectorRuntimeConfigWithCluster)
	*cloned = *m

	cloned.ConfigWithCluster = m.ConfigWithCluster.Clone()
	return cloned
}

func init() {
	proto.RegisterType((*MsgToCollector)(nil), "sensor.MsgToCollector")
	proto.RegisterType((*MsgFromCollector)(nil), "sensor.MsgFromCollector")
	proto.RegisterType((*CollectorRuntimeConfigACK)(nil), "sensor.CollectorRuntimeConfigACK")
	proto.RegisterType((*CollectorRuntimeConfigWithCluster)(nil), "sensor.CollectorRuntimeConfigWithCluster")
}

func init() {
	proto.RegisterFile("internalapi/sensor/collector_iservice.proto", fileDescriptor_6ac8c5c7ee64002d)
}

var fileDescriptor_6ac8c5c7ee64002d = []byte{
	// 323 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xd1, 0x4a, 0xc3, 0x30,
	0x18, 0x85, 0x1b, 0xc4, 0x5d, 0x64, 0x20, 0x33, 0x82, 0x74, 0x43, 0x8a, 0xeb, 0x85, 0x4c, 0x85,
	0x4e, 0xe6, 0x13, 0xb8, 0x80, 0x0c, 0x64, 0x37, 0x55, 0x18, 0xcc, 0x8b, 0x52, 0x63, 0xec, 0xc2,
	0xda, 0x64, 0x24, 0xa9, 0x5e, 0xce, 0xc7, 0xf0, 0x91, 0xbc, 0xf4, 0x11, 0xa4, 0xbe, 0x88, 0xb0,
	0xb4, 0xb3, 0x8c, 0xb5, 0xf3, 0x36, 0xff, 0xf9, 0x4f, 0x3e, 0xfe, 0x73, 0xe0, 0x25, 0xe3, 0x9a,
	0x4a, 0x1e, 0xc6, 0xe1, 0x82, 0xf5, 0x15, 0xe5, 0x4a, 0xc8, 0x3e, 0x11, 0x71, 0x4c, 0x89, 0x16,
	0x32, 0x60, 0x8a, 0xca, 0x57, 0x46, 0xa8, 0xb7, 0x90, 0x42, 0x0b, 0xd4, 0x30, 0x82, 0xce, 0x99,
	0xd2, 0x42, 0x86, 0x11, 0x2d, 0x29, 0x65, 0xca, 0x35, 0x4b, 0x68, 0x40, 0x04, 0x7f, 0x61, 0x91,
	0xd1, 0xbb, 0x1a, 0x1e, 0x8c, 0x55, 0xf4, 0x20, 0x70, 0x21, 0x43, 0x8f, 0xf0, 0xc8, 0x28, 0x82,
	0x37, 0xa6, 0x67, 0x01, 0x89, 0x53, 0xa5, 0xa9, 0xb4, 0xc1, 0x29, 0xe8, 0x35, 0x07, 0xe7, 0x9e,
	0xf1, 0xf7, 0xd6, 0x7a, 0xdf, 0xb8, 0xe2, 0xd5, 0xca, 0x84, 0xe9, 0x19, 0x36, 0x0b, 0x23, 0xcb,
	0x3f, 0x24, 0x9b, 0x8f, 0xc3, 0x7d, 0xb8, 0x97, 0xa8, 0xc8, 0x5d, 0xc2, 0xd6, 0x58, 0x45, 0xb7,
	0x52, 0x24, 0x7f, 0xff, 0x3e, 0xc3, 0x93, 0x2a, 0xd6, 0x20, 0x24, 0xf3, 0x1c, 0xa0, 0x5b, 0x0f,
	0x70, 0x83, 0xef, 0x46, 0x96, 0xdf, 0x26, 0xdb, 0x87, 0x64, 0x5e, 0x00, 0xbc, 0x03, 0xd8, 0xae,
	0x74, 0x40, 0xe4, 0x5f, 0x28, 0xae, 0x97, 0xdf, 0xb8, 0x9a, 0xa5, 0x86, 0xc4, 0x5d, 0xc2, 0xee,
	0xce, 0x23, 0xa2, 0x69, 0x5d, 0x18, 0x17, 0x3b, 0x00, 0x4a, 0x46, 0x5b, 0xb2, 0x18, 0x4c, 0x60,
	0x6b, 0xbd, 0x77, 0x6f, 0x4a, 0x84, 0x30, 0x6c, 0x62, 0x91, 0x24, 0x29, 0x67, 0x24, 0xd4, 0x14,
	0xd9, 0xc5, 0xb5, 0x37, 0xd3, 0xea, 0x1c, 0x97, 0x26, 0xa5, 0xf6, 0xf4, 0xc0, 0x15, 0x18, 0xda,
	0x9f, 0x99, 0x03, 0xbe, 0x32, 0x07, 0x7c, 0x67, 0x0e, 0xf8, 0xf8, 0x71, 0xac, 0x69, 0xde, 0xca,
	0xa7, 0xc6, 0xaa, 0x74, 0xd7, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa1, 0x30, 0x27, 0x2f, 0xd3,
	0x02, 0x00, 0x00,
}

func (m *MsgToCollector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgToCollector) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToCollector) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Msg != nil {
		{
			size := m.Msg.Size()
			i -= size
			if _, err := m.Msg.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgToCollector_ConfigWithCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToCollector_ConfigWithCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ConfigWithCluster != nil {
		{
			size, err := m.ConfigWithCluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCollectorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *MsgFromCollector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFromCollector) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFromCollector) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Msg != nil {
		{
			size := m.Msg.Size()
			i -= size
			if _, err := m.Msg.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgFromCollector_CollectorRuntimeConfigAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFromCollector_CollectorRuntimeConfigAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CollectorRuntimeConfigAck != nil {
		{
			size, err := m.CollectorRuntimeConfigAck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCollectorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *CollectorRuntimeConfigACK) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollectorRuntimeConfigACK) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CollectorRuntimeConfigACK) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CollectorRuntimeConfigAck != nil {
		{
			size, err := m.CollectorRuntimeConfigAck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCollectorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CollectorRuntimeConfigWithCluster) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollectorRuntimeConfigWithCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CollectorRuntimeConfigWithCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ConfigWithCluster != nil {
		{
			size, err := m.ConfigWithCluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCollectorIservice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCollectorIservice(dAtA []byte, offset int, v uint64) int {
	offset -= sovCollectorIservice(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgToCollector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Msg != nil {
		n += m.Msg.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgToCollector_ConfigWithCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConfigWithCluster != nil {
		l = m.ConfigWithCluster.Size()
		n += 1 + l + sovCollectorIservice(uint64(l))
	}
	return n
}
func (m *MsgFromCollector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Msg != nil {
		n += m.Msg.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MsgFromCollector_CollectorRuntimeConfigAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CollectorRuntimeConfigAck != nil {
		l = m.CollectorRuntimeConfigAck.Size()
		n += 1 + l + sovCollectorIservice(uint64(l))
	}
	return n
}
func (m *CollectorRuntimeConfigACK) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CollectorRuntimeConfigAck != nil {
		l = m.CollectorRuntimeConfigAck.Size()
		n += 1 + l + sovCollectorIservice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CollectorRuntimeConfigWithCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConfigWithCluster != nil {
		l = m.ConfigWithCluster.Size()
		n += 1 + l + sovCollectorIservice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCollectorIservice(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCollectorIservice(x uint64) (n int) {
	return sovCollectorIservice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgToCollector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCollectorIservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgToCollector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgToCollector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigWithCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollectorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCollectorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CollectorRuntimeConfigWithCluster{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgToCollector_ConfigWithCluster{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCollectorIservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCollectorIservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFromCollector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCollectorIservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFromCollector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFromCollector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectorRuntimeConfigAck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollectorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCollectorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CollectorRuntimeConfigACK{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &MsgFromCollector_CollectorRuntimeConfigAck{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCollectorIservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCollectorIservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollectorRuntimeConfigACK) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCollectorIservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectorRuntimeConfigACK: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectorRuntimeConfigACK: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectorRuntimeConfigAck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollectorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCollectorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CollectorRuntimeConfigAck == nil {
				m.CollectorRuntimeConfigAck = &storage.CollectorRuntimeConfigACK{}
			}
			if err := m.CollectorRuntimeConfigAck.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCollectorIservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCollectorIservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollectorRuntimeConfigWithCluster) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCollectorIservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectorRuntimeConfigWithCluster: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectorRuntimeConfigWithCluster: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigWithCluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectorIservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollectorIservice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCollectorIservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConfigWithCluster == nil {
				m.ConfigWithCluster = &storage.CollectorRuntimeConfigWithCluster{}
			}
			if err := m.ConfigWithCluster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCollectorIservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCollectorIservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCollectorIservice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCollectorIservice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCollectorIservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCollectorIservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCollectorIservice
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCollectorIservice
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCollectorIservice
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCollectorIservice        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCollectorIservice          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCollectorIservice = fmt.Errorf("proto: unexpected end of group")
)
