// Code generated by pg-bindings generator. DO NOT EDIT.

//go:build sql_integration

package postgres

import (
	"context"
	"testing"

	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres/pgtest"
	"github.com/stackrox/rox/pkg/sac"
	"github.com/stackrox/rox/pkg/search"
	"github.com/stackrox/rox/pkg/testutils"
	"github.com/stretchr/testify/suite"
)

type ComplianceOperatorBenchmarksStoreSuite struct {
	suite.Suite
	store  Store
	testDB *pgtest.TestPostgres
}

func TestComplianceOperatorBenchmarksStore(t *testing.T) {
	suite.Run(t, new(ComplianceOperatorBenchmarksStoreSuite))
}

func (s *ComplianceOperatorBenchmarksStoreSuite) SetupSuite() {

	s.testDB = pgtest.ForT(s.T())
	s.store = New(s.testDB.DB)
}

func (s *ComplianceOperatorBenchmarksStoreSuite) SetupTest() {
	ctx := sac.WithAllAccess(context.Background())
	tag, err := s.testDB.Exec(ctx, "TRUNCATE compliance_operator_benchmarks CASCADE")
	s.T().Log("compliance_operator_benchmarks", tag)
	s.store = New(s.testDB.DB)
	s.NoError(err)
}

func (s *ComplianceOperatorBenchmarksStoreSuite) TearDownSuite() {
	s.testDB.Teardown(s.T())
}

func (s *ComplianceOperatorBenchmarksStoreSuite) TestStore() {
	ctx := sac.WithAllAccess(context.Background())

	store := s.store

	complianceOperatorBenchmark := &storage.ComplianceOperatorBenchmark{}
	s.NoError(testutils.FullInit(complianceOperatorBenchmark, testutils.SimpleInitializer(), testutils.JSONFieldsFilter))

	foundComplianceOperatorBenchmark, exists, err := store.Get(ctx, complianceOperatorBenchmark.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundComplianceOperatorBenchmark)

	withNoAccessCtx := sac.WithNoAccess(ctx)

	s.NoError(store.Upsert(ctx, complianceOperatorBenchmark))
	foundComplianceOperatorBenchmark, exists, err = store.Get(ctx, complianceOperatorBenchmark.GetId())
	s.NoError(err)
	s.True(exists)
	s.Equal(complianceOperatorBenchmark, foundComplianceOperatorBenchmark)

	complianceOperatorBenchmarkCount, err := store.Count(ctx, search.EmptyQuery())
	s.NoError(err)
	s.Equal(1, complianceOperatorBenchmarkCount)
	complianceOperatorBenchmarkCount, err = store.Count(withNoAccessCtx, search.EmptyQuery())
	s.NoError(err)
	s.Zero(complianceOperatorBenchmarkCount)

	complianceOperatorBenchmarkExists, err := store.Exists(ctx, complianceOperatorBenchmark.GetId())
	s.NoError(err)
	s.True(complianceOperatorBenchmarkExists)
	s.NoError(store.Upsert(ctx, complianceOperatorBenchmark))
	s.ErrorIs(store.Upsert(withNoAccessCtx, complianceOperatorBenchmark), sac.ErrResourceAccessDenied)

	foundComplianceOperatorBenchmark, exists, err = store.Get(ctx, complianceOperatorBenchmark.GetId())
	s.NoError(err)
	s.True(exists)
	s.Equal(complianceOperatorBenchmark, foundComplianceOperatorBenchmark)

	s.NoError(store.Delete(ctx, complianceOperatorBenchmark.GetId()))
	foundComplianceOperatorBenchmark, exists, err = store.Get(ctx, complianceOperatorBenchmark.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundComplianceOperatorBenchmark)
	s.NoError(store.Delete(withNoAccessCtx, complianceOperatorBenchmark.GetId()))

	var complianceOperatorBenchmarks []*storage.ComplianceOperatorBenchmark
	var complianceOperatorBenchmarkIDs []string
	for i := 0; i < 200; i++ {
		complianceOperatorBenchmark := &storage.ComplianceOperatorBenchmark{}
		s.NoError(testutils.FullInit(complianceOperatorBenchmark, testutils.UniqueInitializer(), testutils.JSONFieldsFilter))
		complianceOperatorBenchmarks = append(complianceOperatorBenchmarks, complianceOperatorBenchmark)
		complianceOperatorBenchmarkIDs = append(complianceOperatorBenchmarkIDs, complianceOperatorBenchmark.GetId())
	}

	s.NoError(store.UpsertMany(ctx, complianceOperatorBenchmarks))

	complianceOperatorBenchmarkCount, err = store.Count(ctx, search.EmptyQuery())
	s.NoError(err)
	s.Equal(200, complianceOperatorBenchmarkCount)

	s.NoError(store.DeleteMany(ctx, complianceOperatorBenchmarkIDs))

	complianceOperatorBenchmarkCount, err = store.Count(ctx, search.EmptyQuery())
	s.NoError(err)
	s.Equal(0, complianceOperatorBenchmarkCount)
}
