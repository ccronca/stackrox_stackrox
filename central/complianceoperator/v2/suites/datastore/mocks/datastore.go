// Code generated by MockGen. DO NOT EDIT.
// Source: datastore.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/datastore.go -source datastore.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	storage "github.com/stackrox/rox/generated/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockDataStore is a mock of DataStore interface.
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore.
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance.
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// DeleteSuite mocks base method.
func (m *MockDataStore) DeleteSuite(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSuite", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSuite indicates an expected call of DeleteSuite.
func (mr *MockDataStoreMockRecorder) DeleteSuite(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSuite", reflect.TypeOf((*MockDataStore)(nil).DeleteSuite), ctx, name)
}

// GetSuite mocks base method.
func (m *MockDataStore) GetSuite(ctx context.Context, name string) (*storage.ComplianceOperatorSuite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSuite", ctx, name)
	ret0, _ := ret[0].(*storage.ComplianceOperatorSuite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSuite indicates an expected call of GetSuite.
func (mr *MockDataStoreMockRecorder) GetSuite(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuite", reflect.TypeOf((*MockDataStore)(nil).GetSuite), ctx, name)
}

// UpsertSuite mocks base method.
func (m *MockDataStore) UpsertSuite(ctx context.Context, suite *storage.ComplianceOperatorSuite) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertSuite", ctx, suite)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertSuite indicates an expected call of UpsertSuite.
func (mr *MockDataStoreMockRecorder) UpsertSuite(ctx, suite any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertSuite", reflect.TypeOf((*MockDataStore)(nil).UpsertSuite), ctx, suite)
}

// UpsertSuites mocks base method.
func (m *MockDataStore) UpsertSuites(ctx context.Context, suites []*storage.ComplianceOperatorSuite) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertSuites", ctx, suites)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertSuites indicates an expected call of UpsertSuites.
func (mr *MockDataStoreMockRecorder) UpsertSuites(ctx, suites any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertSuites", reflect.TypeOf((*MockDataStore)(nil).UpsertSuites), ctx, suites)
}
