// Code generated by pg-bindings generator. DO NOT EDIT.

//go:build sql_integration

package postgres

import (
	"context"
	"testing"

	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres/pgtest"
	"github.com/stackrox/rox/pkg/sac"
	"github.com/stackrox/rox/pkg/testutils"
	"github.com/stretchr/testify/suite"
)

type TeamsStoreSuite struct {
	suite.Suite
	store  Store
	testDB *pgtest.TestPostgres
}

func TestTeamsStore(t *testing.T) {
	suite.Run(t, new(TeamsStoreSuite))
}

func (s *TeamsStoreSuite) SetupSuite() {

	s.testDB = pgtest.ForT(s.T())
	s.store = New(s.testDB.DB)
}

func (s *TeamsStoreSuite) SetupTest() {
	ctx := sac.WithAllAccess(context.Background())
	tag, err := s.testDB.Exec(ctx, "TRUNCATE teams CASCADE")
	s.T().Log("teams", tag)
	s.store = New(s.testDB.DB)
	s.NoError(err)
}

func (s *TeamsStoreSuite) TearDownSuite() {
	s.testDB.Teardown(s.T())
}

func (s *TeamsStoreSuite) TestStore() {
	ctx := sac.WithAllAccess(context.Background())

	store := s.store

	team := &storage.Team{}
	s.NoError(testutils.FullInit(team, testutils.SimpleInitializer(), testutils.JSONFieldsFilter))

	foundTeam, exists, err := store.Get(ctx, team.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundTeam)

	withNoAccessCtx := sac.WithNoAccess(ctx)

	s.NoError(store.Upsert(ctx, team))
	foundTeam, exists, err = store.Get(ctx, team.GetId())
	s.NoError(err)
	s.True(exists)
	s.Equal(team, foundTeam)

	teamCount, err := store.Count(ctx)
	s.NoError(err)
	s.Equal(1, teamCount)
	teamCount, err = store.Count(withNoAccessCtx)
	s.NoError(err)
	s.Zero(teamCount)

	teamExists, err := store.Exists(ctx, team.GetId())
	s.NoError(err)
	s.True(teamExists)
	s.NoError(store.Upsert(ctx, team))
	s.ErrorIs(store.Upsert(withNoAccessCtx, team), sac.ErrResourceAccessDenied)

	foundTeam, exists, err = store.Get(ctx, team.GetId())
	s.NoError(err)
	s.True(exists)
	s.Equal(team, foundTeam)

	s.NoError(store.Delete(ctx, team.GetId()))
	foundTeam, exists, err = store.Get(ctx, team.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundTeam)
	s.ErrorIs(store.Delete(withNoAccessCtx, team.GetId()), sac.ErrResourceAccessDenied)

	var teams []*storage.Team
	var teamIDs []string
	for i := 0; i < 200; i++ {
		team := &storage.Team{}
		s.NoError(testutils.FullInit(team, testutils.UniqueInitializer(), testutils.JSONFieldsFilter))
		teams = append(teams, team)
		teamIDs = append(teamIDs, team.GetId())
	}

	s.NoError(store.UpsertMany(ctx, teams))
	allTeam, err := store.GetAll(ctx)
	s.NoError(err)
	s.ElementsMatch(teams, allTeam)

	teamCount, err = store.Count(ctx)
	s.NoError(err)
	s.Equal(200, teamCount)

	s.NoError(store.DeleteMany(ctx, teamIDs))

	teamCount, err = store.Count(ctx)
	s.NoError(err)
	s.Equal(0, teamCount)
}
