// Code generated by pg-bindings generator. DO NOT EDIT.

//go:build sql_integration

package postgres

import (
	"context"
	"testing"

	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres/pgtest"
	"github.com/stackrox/rox/pkg/sac"
	"github.com/stackrox/rox/pkg/search"
	"github.com/stackrox/rox/pkg/testutils"
	"github.com/stretchr/testify/suite"
)

type RuntimeConfigurationStoreSuite struct {
	suite.Suite
	store  Store
	testDB *pgtest.TestPostgres
}

func TestRuntimeConfigurationStore(t *testing.T) {
	suite.Run(t, new(RuntimeConfigurationStoreSuite))
}

func (s *RuntimeConfigurationStoreSuite) SetupSuite() {

	s.testDB = pgtest.ForT(s.T())
	s.store = New(s.testDB.DB)
}

func (s *RuntimeConfigurationStoreSuite) SetupTest() {
	ctx := sac.WithAllAccess(context.Background())
	tag, err := s.testDB.Exec(ctx, "TRUNCATE runtime_configuration CASCADE")
	s.T().Log("runtime_configuration", tag)
	s.store = New(s.testDB.DB)
	s.NoError(err)
}

func (s *RuntimeConfigurationStoreSuite) TearDownSuite() {
	s.testDB.Teardown(s.T())
}

func (s *RuntimeConfigurationStoreSuite) TestStore() {
	ctx := sac.WithAllAccess(context.Background())

	store := s.store

	runtimeFilterData := &storage.RuntimeFilterData{}
	s.NoError(testutils.FullInit(runtimeFilterData, testutils.SimpleInitializer(), testutils.JSONFieldsFilter))

	foundRuntimeFilterData, exists, err := store.Get(ctx, runtimeFilterData.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundRuntimeFilterData)

	withNoAccessCtx := sac.WithNoAccess(ctx)

	s.NoError(store.Upsert(ctx, runtimeFilterData))
	foundRuntimeFilterData, exists, err = store.Get(ctx, runtimeFilterData.GetId())
	s.NoError(err)
	s.True(exists)
	s.Equal(runtimeFilterData, foundRuntimeFilterData)

	runtimeFilterDataCount, err := store.Count(ctx, search.EmptyQuery())
	s.NoError(err)
	s.Equal(1, runtimeFilterDataCount)
	runtimeFilterDataCount, err = store.Count(withNoAccessCtx, search.EmptyQuery())
	s.NoError(err)
	s.Zero(runtimeFilterDataCount)

	runtimeFilterDataExists, err := store.Exists(ctx, runtimeFilterData.GetId())
	s.NoError(err)
	s.True(runtimeFilterDataExists)
	s.NoError(store.Upsert(ctx, runtimeFilterData))
	s.ErrorIs(store.Upsert(withNoAccessCtx, runtimeFilterData), sac.ErrResourceAccessDenied)

	foundRuntimeFilterData, exists, err = store.Get(ctx, runtimeFilterData.GetId())
	s.NoError(err)
	s.True(exists)
	s.Equal(runtimeFilterData, foundRuntimeFilterData)

	s.NoError(store.Delete(ctx, runtimeFilterData.GetId()))
	foundRuntimeFilterData, exists, err = store.Get(ctx, runtimeFilterData.GetId())
	s.NoError(err)
	s.False(exists)
	s.Nil(foundRuntimeFilterData)
	s.ErrorIs(store.Delete(withNoAccessCtx, runtimeFilterData.GetId()), sac.ErrResourceAccessDenied)

	var runtimeFilterDatas []*storage.RuntimeFilterData
	var runtimeFilterDataIDs []string
	for i := 0; i < 200; i++ {
		runtimeFilterData := &storage.RuntimeFilterData{}
		s.NoError(testutils.FullInit(runtimeFilterData, testutils.UniqueInitializer(), testutils.JSONFieldsFilter))
		runtimeFilterDatas = append(runtimeFilterDatas, runtimeFilterData)
		runtimeFilterDataIDs = append(runtimeFilterDataIDs, runtimeFilterData.GetId())
	}

	s.NoError(store.UpsertMany(ctx, runtimeFilterDatas))

	runtimeFilterDataCount, err = store.Count(ctx, search.EmptyQuery())
	s.NoError(err)
	s.Equal(200, runtimeFilterDataCount)

	s.NoError(store.DeleteMany(ctx, runtimeFilterDataIDs))

	runtimeFilterDataCount, err = store.Count(ctx, search.EmptyQuery())
	s.NoError(err)
	s.Equal(0, runtimeFilterDataCount)
}
