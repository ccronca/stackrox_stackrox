name: Scanner dev vulnerability update
on:
  schedule:
  - cron: "30 */4 * * *"
  pull_request:
    types:
    - opened
    - reopened
    - synchronize

jobs:
  build-updater:
    runs-on: ubuntu-latest
    if: >
      github.event_name == 'schedule' ||
      (github.event_name == 'pull_request' &&
       contains(github.event.pull_request.labels.*.name, 'pr-update-scanner-vulns'))
    container:
      image: quay.io/stackrox-io/apollo-ci:stackrox-test-0.3.69
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ github.event.pull_request.head.sha }}

    - uses: ./.github/actions/job-preamble
      with:
        gcp-account: ${{ secrets.GCP_SERVICE_ACCOUNT_STACKROX_CI }}
    - uses: ./.github/actions/cache-go-dependencies

    - name: Build updater
      run: |
        make tag
        make -C scanner bin/updater

    - uses: actions/upload-artifact@v4
      with:
        name: updater
        path: scanner/bin/updater
        if-no-files-found: error

  run-updater:
    needs:
      - build-updater
    runs-on: ubuntu-latest
    env:
      STACKROX_NVD_API_KEY: ${{ secrets.NVD_API_KEY }}
      STACKROX_NVD_API_CALL_INTERVAL: 6s
    steps:
    - uses: actions/download-artifact@v4
      with:
        name: updater
        path: /usr/local/bin

    - name: Run updater
      if: >
        github.event_name == 'schedule' ||
        (github.event_name == 'pull_request' &&
         !contains(github.event.pull_request.labels.*.name, 'scanner-split-vulns'))
      run: |
        chmod +x /usr/local/bin/updater
        updater export vulns

    - name: Run updater with split vulns
      if: >
        github.event_name == 'pull_request' &&
        contains(github.event.pull_request.labels.*.name, 'scanner-split-vulns')
      run: |
        chmod +x /usr/local/bin/updater
        updater export --split bundles
        mkdir vulns
        zip vulns/vulnerabilities.zip bundles/*.json.zst

    - uses: actions/upload-artifact@v4
      with:
        name: vulns
        path: vulns
        if-no-files-found: error

  upload-vulnerabilities:
    runs-on: ubuntu-latest
    needs:
      - run-updater
    steps:
    - uses: actions/download-artifact@v4
      with:
        name: vulns
        path: vulns

    - name: Authenticate with Google Cloud
      if: github.event_name == 'schedule'
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GOOGLE_SA_STACKROX_HUB_VULN_DUMP_UPLOADER }}

    - name: Authenticate with Google Cloud
      if: github.event_name == 'pull_request'
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GOOGLE_SA_CIRCLECI_SCANNER }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Update dev vulnerabilities
      if: github.event_name == 'schedule'
      run: |
        cd vulns
        # Upload development tags for upstream (dev) and downstream (1.0.0).
        gsutil -m cp -r . gs://definitions.stackrox.io/v4/vulnerability-bundles/dev/
        gsutil -m cp -r . gs://definitions.stackrox.io/v4/vulnerability-bundles/1.0.0/

    - name: Update PR vulnerabilities
      if: github.event_name == 'pull_request'
      run: |
        branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
        # Replace / with -, so the branch name isn't truncated when pushed to GCS.
        dir=${branch////-}
        case $dir in
        dev|1.0.0)
          echo "Branch $dir is disallowed"
          exit 1
        esac
        cd vulns
        gsutil cp -r . "gs://scanner-v4-test/vulnerability-bundles/$dir"

  # TODO(DO NOT MERGE): Move this to scanner-release-vuln-update.yaml
  build-and-push-definitions-image:
    runs-on: ubuntu-latest
    needs:
    - run-updater
    strategy:
      matrix:
        arch: [ "amd64", "arm64", "ppc64le", "s390x" ]
    steps:
    # Required for making the tag
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ github.event.pull_request.head.sha }}

    - uses: actions/download-artifact@v4
      with:
        name: vulns
        path: vulns

    - name: Set up QEMU
      if: github.event_name == 'pull_request'
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      if: github.event_name == 'pull_request'
      uses: docker/setup-buildx-action@v3

    - name: Build and save definitions image
      if: github.event_name == 'pull_request'
      run: |
        set -e
        
        TAG="$(make tag)"
        QUAY_TAG_EXPIRATION=1w
        DOCKER_ARGS=(
          "--tag" "stackrox/definitions:${TAG}-${{ matrix.arch }}"
          "--build-arg" "LABEL_VERSION=${TAG}"
          "--build-arg" "LABEL_RELEASE=${TAG}"
          "--build-arg" "QUAY_TAG_EXPIRATION=${QUAY_TAG_EXPIRATION}"
        )
        
        echo "Building with platform linux/${{ matrix.arch }}"
        if docker info | grep buildx; then
          docker buildx build \
            --platform "linux/${{ matrix.arch }}" \
            "${DOCKER_ARGS[@]}
        else
          docker build \
          --platform "linux/${{ matrix.arch }}" \
          "${DOCKER_ARGS[@]}"
        fi
        
        docker save -o definitions-image-${{ matrix.arch }}.tar.gz "stackrox/definitions:${TAG}-${{ matrix.arch }}"

    - uses: actions/upload-artifact@v4
      if: github.event_name == 'pull_request'
      with:
        name: definitions-image-${{ matrix.arch }}
        path: definitions-image-${{ matrix.arch }}.tar.gz

    - name: Create and log image manifest
      if: github.event_name == 'pull_request'
      run: |
        set -e
        TAG="$(make tag)"
        # TODO(DO NOT MERGE): Do we have access to the docker images from before? Guess we'll find out :)
        # TODO(DO NOT MERGE): This kinda sucks. Guess that's why we output the matrix as JSON elsewhere?
        architectures="amd64,arm64,ppc64le,s390x"
        image_list=()
        for arch in architectures; do image_list+="stackrox/definitions:${TAG}-${arch}"; done
        docker manifest create stackrox/definitions:${TAG} "${image_list[@]}"
        docker manifest inspect stackrox/definitions:${TAG} > definitions-manifest.json

    - uses: actions/upload-artifact@v4
      if: github.event_name == 'pull_request'
      with:
        name: definitions-manifest
        path: definitions-manifest.json

  #    - name: Build definitions image
  #      run: make -C scanner GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} images
  #
  #    - name: Push definitions image
  #      # Skip for external contributions.
  #      if: |
  #        github.event_name == 'push' || !github.event.pull_request.head.repo.fork
  #      run: |
  #        source ./scripts/ci/lib.sh
  #        push_scanner_image_set ${{ matrix.goarch }}

#    - name: Push Scanner and ScannerDB image manifests
#      # Skip for external contributions.
#      if: |
#        github.event_name == 'push' || !github.event.pull_request.head.repo.fork
#      run: |
#        source ./scripts/ci/lib.sh
#
#        # TODO(DO NOT MERGE): Surely there's a better way to do this?
#        # If this is updated, be sure to update goarch in define-scanner-job-matrix above.
#        architectures="amd64,arm64,ppc64le,s390x"
#
#        push_scanner_image_manifest_lists "$architectures"

  send-notification:
    needs:
    - upload-vulnerabilities
    runs-on: ubuntu-latest
    if: failure()
    steps:
    - name: Send Slack notification on workflow failure
      run: |
        curl -X POST -H 'Content-type: application/json' --data '{"text":"<${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}}|Workflow ${{ github.workflow }}> failed in repository ${{ github.repository }}: Failed to update vulnerabilities"}' ${{ secrets.SLACK_ONCALL_SCANNER_WEBHOOK }}
