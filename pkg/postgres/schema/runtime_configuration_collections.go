// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"fmt"
	"reflect"

	v1 "github.com/stackrox/rox/generated/api/v1"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
	"github.com/stackrox/rox/pkg/search"
	"github.com/stackrox/rox/pkg/search/postgres/mapping"
)

var (
	// CreateTableRuntimeConfigurationCollectionsStmt holds the create statement for table `runtime_configuration_collections`.
	CreateTableRuntimeConfigurationCollectionsStmt = &postgres.CreateStmts{
		GormModel: (*RuntimeConfigurationCollections)(nil),
		Children: []*postgres.CreateStmts{
			&postgres.CreateStmts{
				GormModel: (*RuntimeConfigurationCollectionsEmbeddedCollections)(nil),
				Children:  []*postgres.CreateStmts{},
			},
		},
	}

	// RuntimeConfigurationCollectionsSchema is the go schema for table `runtime_configuration_collections`.
	RuntimeConfigurationCollectionsSchema = func() *walker.Schema {
		schema := GetSchemaForTable("runtime_configuration_collections")
		if schema != nil {
			return schema
		}
		schema = walker.Walk(reflect.TypeOf((*storage.ResourceCollection)(nil)), "runtime_configuration_collections")
		referencedSchemas := map[string]*walker.Schema{
			"storage.ResourceCollection": CollectionsSchema,
		}

		schema.ResolveReferences(func(messageTypeName string) *walker.Schema {
			return referencedSchemas[fmt.Sprintf("storage.%s", messageTypeName)]
		})
		schema.SetOptionsMap(search.Walk(v1.SearchCategory_RUNTIME_CONFIGURATION_COLLECTIONS, "resourcecollection", (*storage.ResourceCollection)(nil)))
		schema.ScopingResource = resources.WorkflowAdministration
		RegisterTable(schema, CreateTableRuntimeConfigurationCollectionsStmt)
		mapping.RegisterCategoryToTable(v1.SearchCategory_RUNTIME_CONFIGURATION_COLLECTIONS, schema)
		return schema
	}()
)

const (
	// RuntimeConfigurationCollectionsTableName specifies the name of the table in postgres.
	RuntimeConfigurationCollectionsTableName = "runtime_configuration_collections"
	// RuntimeConfigurationCollectionsEmbeddedCollectionsTableName specifies the name of the table in postgres.
	RuntimeConfigurationCollectionsEmbeddedCollectionsTableName = "runtime_configuration_collections_embedded_collections"
)

// RuntimeConfigurationCollections holds the Gorm model for Postgres table `runtime_configuration_collections`.
type RuntimeConfigurationCollections struct {
	ID            string `gorm:"column:id;type:varchar;primaryKey"`
	Name          string `gorm:"column:name;type:varchar;unique"`
	CreatedByName string `gorm:"column:createdby_name;type:varchar"`
	UpdatedByName string `gorm:"column:updatedby_name;type:varchar"`
	Serialized    []byte `gorm:"column:serialized;type:bytea"`
}

// RuntimeConfigurationCollectionsEmbeddedCollections holds the Gorm model for Postgres table `runtime_configuration_collections_embedded_collections`.
type RuntimeConfigurationCollectionsEmbeddedCollections struct {
	RuntimeConfigurationCollectionsID  string                          `gorm:"column:runtime_configuration_collections_id;type:varchar;primaryKey"`
	Idx                                int                             `gorm:"column:idx;type:integer;primaryKey;index:runtimeconfigurationcollectionsembeddedcollections_idx,type:btree"`
	ID                                 string                          `gorm:"column:id;type:varchar"`
	RuntimeConfigurationCollectionsRef RuntimeConfigurationCollections `gorm:"foreignKey:runtime_configuration_collections_id;references:id;belongsTo;constraint:OnDelete:CASCADE"`
	CollectionsRef                     Collections                     `gorm:"foreignKey:id;references:id;belongsTo;constraint:OnDelete:RESTRICT"`
}
