// Code generated by pg-bindings generator. DO NOT EDIT.

package schema

import (
	"fmt"
	"reflect"

	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/pkg/postgres"
	"github.com/stackrox/rox/pkg/postgres/walker"
	"github.com/stackrox/rox/pkg/sac/resources"
)

var (
	// CreateTableComplianceOperatorControlsStmt holds the create statement for table `compliance_operator_controls`.
	CreateTableComplianceOperatorControlsStmt = &postgres.CreateStmts{
		GormModel: (*ComplianceOperatorControls)(nil),
		Children:  []*postgres.CreateStmts{},
	}

	// ComplianceOperatorControlsSchema is the go schema for table `compliance_operator_controls`.
	ComplianceOperatorControlsSchema = func() *walker.Schema {
		schema := GetSchemaForTable("compliance_operator_controls")
		if schema != nil {
			return schema
		}
		schema = walker.Walk(reflect.TypeOf((*storage.ComplianceOperatorControl)(nil)), "compliance_operator_controls")
		referencedSchemas := map[string]*walker.Schema{
			"storage.ComplianceOperatorBenchmark": ComplianceOperatorBenchmarksSchema,
		}

		schema.ResolveReferences(func(messageTypeName string) *walker.Schema {
			return referencedSchemas[fmt.Sprintf("storage.%s", messageTypeName)]
		})
		schema.ScopingResource = resources.Compliance
		RegisterTable(schema, CreateTableComplianceOperatorControlsStmt)
		return schema
	}()
)

const (
	// ComplianceOperatorControlsTableName specifies the name of the table in postgres.
	ComplianceOperatorControlsTableName = "compliance_operator_controls"
)

// ComplianceOperatorControls holds the Gorm model for Postgres table `compliance_operator_controls`.
type ComplianceOperatorControls struct {
	ID         string `gorm:"column:id;type:uuid;primaryKey"`
	Serialized []byte `gorm:"column:serialized;type:bytea"`
}
